import logging
import re
import json
from datetime import datetime, timedelta
import pytz
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
BOT_TOKEN = "–¢–û–ö–ï–ù_–û–¢_–ë–û–¢–§–ê–ó–ï–†–ê"
ADMIN_ID = 123456789     # —Ç–≤–æ–π telegram id
TIMEZONE = pytz.timezone("Europe/Kaliningrad")
DATA_FILE = "data.json"

# –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞
ACCESS_KEYS = {"VIP001": None, "VIP002": None}
ALLOWED_USERS = set()

# –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
MAINTENANCE = False
PENDING_CHATS = set()

# ======= –õ–û–ì–ò =========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ======= –ë–ê–ó–ê =========
def load_db():
    global ALLOWED_USERS, ACCESS_KEYS
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        ALLOWED_USERS = set(data.get("allowed_users", []))
        ACCESS_KEYS = data.get("access_keys", ACCESS_KEYS)
    except FileNotFoundError:
        save_db()

def save_db():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump({"allowed_users": list(ALLOWED_USERS),
                   "access_keys": ACCESS_KEYS}, f)

# ======= –°–¢–ê–†–¢ =========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞\n\n"
        "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
    )

# ======= –¢–ï–•–†–ê–ë–û–¢–´ =========
async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE = True
    await update.message.reply_text("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE = False
    await update.message.reply_text("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    # —É–≤–µ–¥–æ–º–∏–º –æ–∂–∏–¥–∞–≤—à–∏—Ö
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        try:
            await context.bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        except:
            pass

# ======= –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô =========
TASKS = {}

def save_task(uid, chat_id, text, run_at):
    tid = str(len(TASKS) + 1)
    TASKS[tid] = {"uid": uid, "chat": chat_id, "text": text, "time": run_at}
    return tid

def remove_task(uid, task_id):
    if task_id in TASKS and TASKS[task_id]["uid"] == uid:
        del TASKS[task_id]
        return True
    return False

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    task_id = context.args[0]
    removed = remove_task(uid, task_id)
    if removed:
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# ======= –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê =========
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", msg):
            if msg in ACCESS_KEYS and ACCESS_KEYS[msg] is None:
                ACCESS_KEYS[msg] = uid
                ALLOWED_USERS.add(uid)
                save_db()
                await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            else:
                await update.message.reply_text("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ‚ùå.")
        else:
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥: "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç ..."
    if "—á–µ—Ä–µ–∑" in msg and "–º–∏–Ω—É—Ç" in msg:
        try:
            n = int(msg.split("—á–µ—Ä–µ–∑")[1].split("–º–∏–Ω—É—Ç")[0].strip())
            run_at = datetime.now(TIMEZONE) + timedelta(minutes=n)
            tid = save_task(uid, chat_id, msg, run_at.isoformat())
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ {run_at.strftime('%H:%M')} (ID {tid})")
        except:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")

# ======= MAIN =========
def main():
    load_db()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off))
    app.add_handler(CommandHandler("delete", delete_task))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()

if __name__ == "__main__":
    main()
