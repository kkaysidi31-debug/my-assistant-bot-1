import logging
import re
import json
import os
from datetime import datetime, timedelta
import pytz
from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ Render
ADMIN_ID = 963586834            # —Ç–≤–æ–π Telegram ID
TIMEZONE = pytz.timezone("Europe/Kaliningrad")

DB_FILE = "reminders.json"

ACCESS_KEYS = {"VIP001": None}
ALLOWED_USERS = set()

MAINTENANCE = False
PENDING_CHATS = set()

REMINDERS = []  # —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# ------------------------------------------------


# ------------------ –ë–ê–ó–ê ------------------
def save_db():
    data = {
        "reminders": REMINDERS,
        "allowed": list(ALLOWED_USERS)
    }
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False)


def load_db():
    global REMINDERS, ALLOWED_USERS
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            REMINDERS = data.get("reminders", [])
            ALLOWED_USERS.update(data.get("allowed", []))
# ------------------------------------------------


# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00\n\n"
        "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
    )
    await update.message.reply_text(text)


async def affairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not REMINDERS:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª ‚úÖ")
        return
    text = "–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:\n"
    for i, r in enumerate(REMINDERS, start=1):
        text += f"{i}. {r['time']} ‚Äî {r['text']}\n"
    await update.message.reply_text(text)


async def affairs_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: /affairs_delete N")
        return
    try:
        idx = int(context.args[0]) - 1
        if 0 <= idx < len(REMINDERS):
            removed = REMINDERS.pop(idx)
            save_db()
            await update.message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {removed['text']}")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ.")


async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE = True
    await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.")


async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE = False
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    for chat_id in list(PENDING_CHATS):
        try:
            await context.bot.send_message(chat_id, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        except:
            pass
    PENDING_CHATS.clear()
# ------------------------------------------------


# ------------------ –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ------------------
async def handle_key_or_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if uid not in ALLOWED_USERS:
        if msg in ACCESS_KEYS and ACCESS_KEYS[msg] is None:
            ACCESS_KEYS[msg] = uid
            ALLOWED_USERS.add(uid)
            save_db()
     await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        else:
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await update.message.reply_text("‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –±–æ—Ç —Å–µ–π—á–∞—Å –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏.")
        return

    # 3) –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    when = None
    text = None

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
    m = re.match(r"—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω—É—Ç[—ã]?\s+(.*)", msg, re.I)
    if m:
        when = datetime.now(TIMEZONE) + timedelta(minutes=int(m.group(1)))
        text = m.group(2)

    m = re.match(r"—á–µ—Ä–µ–∑ (\d+) —á–∞—Å(–∞|–æ–≤)?\s+(.*)", msg, re.I)
    if m:
        when = datetime.now(TIMEZONE) + timedelta(hours=int(m.group(1)))
        text = m.group(3)

    # —Å–µ–≥–æ–¥–Ω—è
    m = re.match(r"—Å–µ–≥–æ–¥–Ω—è –≤ (\d{1,2}):(\d{2})\s+(.*)", msg, re.I)
    if m:
        when = datetime.now(TIMEZONE).replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0)
        text = m.group(3)

    # –∑–∞–≤—Ç—Ä–∞
    m = re.match(r"–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2})\s+(.*)", msg, re.I)
    if m:
        when = (datetime.now(TIMEZONE) + timedelta(days=1)).replace(hour=int(m.group(1)), minute=int(m.group(2)), second=0, microsecond=0)
        text = m.group(3)

    # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
    m = re.match(r"(\d{1,2})\s+([–∞-—è]+)\s+–≤\s+(\d{1,2}):(\d{2})\s+(.*)", msg, re.I)
    if m:
        day, month, hour, minute, txt = m.groups()
        months = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
            "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }
        when = datetime.now(TIMEZONE).replace(month=months[month.lower()], day=int(day),
                                              hour=int(hour), minute=int(minute), second=0, microsecond=0)
        text = txt

    if when and text:
        REMINDERS.append({"time": when.strftime("%Y-%m-%d %H:%M"), "text": text})
        save_db()
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{text}¬ª")
        context.job_queue.run_once(remind, when, chat_id=chat_id, data=text)
    else:
        await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
# ------------------------------------------------


# ------------------ –§–£–ù–ö–¶–ò–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ------------------
async def remind(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(job.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: {job.data}")
# ------------------------------------------------


# ------------------ MAIN ------------------
def main():
    load_db()
    application = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("affairs", affairs))
    application.add_handler(CommandHandler("affairs_delete", affairs_delete))
    application.add_handler(CommandHandler("maintenance_on", maintenance_on))
    application.add_handler(CommandHandler("maintenance_off", maintenance_off))

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_key_or_text))

    # –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand("maintenance_on", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã (–≤–∫–ª)"),
        BotCommand("maintenance_off", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã (–≤—ã–∫–ª)"),
    ]
    application.bot.set_my_commands(commands)

    application.run_polling()

if __name__ == "__main__":
    main()
