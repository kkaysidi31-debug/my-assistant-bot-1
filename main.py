import logging
import os
import re
from datetime import datetime, timedelta
from pytz import timezone
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)
from apscheduler.schedulers.background import BackgroundScheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = timezone("Europe/Kaliningrad")

# ================= –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ =================
ACCESS_KEYS = [f"VIP{str(i).zfill(3)}" for i in range(1, 101)]
USED_KEYS = set()
ALLOWED_USERS = set()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.start()

# ================= –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =================
async def remind(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(job.chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data}")

# ================= –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è =================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in ALLOWED_USERS:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    await update.message.reply_text("üîë –í–≤–µ–¥–∏ —Å–≤–æ–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:")

async def check_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id in ALLOWED_USERS:
        await set_reminder(update, context)
        return

    if text in ACCESS_KEYS and text not in USED_KEYS:
        ALLOWED_USERS.add(user_id)
        USED_KEYS.add(text)
        await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.")

# ================= –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =================
async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–ª—é—á.")
        return

    text = update.message.text.lower()
    now = datetime.now(TIMEZONE)

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç
    m = re.match(r"—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω—É—Ç", text)
    if m:
        minutes = int(m.group(1))
        run_time = now + timedelta(minutes=minutes)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context], kwargs={"data": text}, id=str(run_time))
        await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
        return

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM
    m = re.match(r"—Å–µ–≥–æ–¥–Ω—è –≤ (\d{1,2}):(\d{2})", text)
    if m:
        hour, minute = map(int, m.groups())
        run_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context], kwargs={"data": text}, id=str(run_time))
        await update.message.reply_text(f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ {hour:02d}:{minute:02d}.")
        return

    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM
    m = re.match(r"–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2})", text)
    if m:
        hour, minute = map(int, m.groups())
        run_time = (now + timedelta(days=1)).replace(hour=hour, minute=minute, second=0, microsecond=0)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context], kwargs={"data": text}, id=str(run_time))
        await update.message.reply_text(f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ {hour:02d}:{minute:02d}.")
        return

    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM
    m = re.match(r"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ (\d{1,2}):(\d{2})", text)
    if m:
        hour, minute = map(int, m.groups())
        scheduler.add_job(remind, "cron", hour=hour, minute=minute, args=[context], kwargs={"data": text}, id=f"daily-{hour}-{minute}-{user_id}")
        await update.message.reply_text(f"üîÅ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour:02d}:{minute:02d}.")
        return

    # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (30 –∞–≤–≥—É—Å—Ç–∞)
    m = re.match(r"(\d{1,2}) (\w+)", text)
    months = {
        "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
        "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,"—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
    }
    if m and m.group(2) in months:
        day, month = int(m.group(1)), months[m.group(2)]
        run_time = datetime(now.year, month, day, 9, 0, tzinfo=TIMEZONE)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context], kwargs={"data": text}, id=str(run_time))
        await update.message.reply_text(f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {day} {m.group(2)} –≤ 09:00.")
        return

    await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:\n"
                                    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n"
                                    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 09:00\n"
                                    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 10:30\n"
                                    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00\n"
                                    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞")

# ================= –ó–∞–ø—É—Å–∫ =================
def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise SystemExit("‚ùå –ù–µ—Ç BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_key))
    app.run_polling()

if __name__ == "__main__":
    main()
