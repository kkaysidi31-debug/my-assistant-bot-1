import logging
import re
import random
from datetime import datetime, timedelta
from pytz import timezone
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = timezone("Europe/Kaliningrad")

# =================== –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ ===================
def generate_keys(n=100):
    keys = {}
    for _ in range(n):
        key = f"VIP{random.randint(100, 999)}"
        keys[key] = None
    return keys

ACCESS_KEYS = generate_keys(100)   # 100 –∫–ª—é—á–µ–π
ALLOWED_USERS = set()

# =================== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===================
scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.start()

# =================== –§—É–Ω–∫—Ü–∏–∏ ===================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    user_id = update.effective_user.id

    if user_id in ALLOWED_USERS:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø!")
        return

    if args and args[0] in ACCESS_KEYS:
        if ACCESS_KEYS[args[0]] is None:
            ACCESS_KEYS[args[0]] = user_id
            ALLOWED_USERS.add(user_id)
            await update.message.reply_text("üîë –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
        else:
            await update.message.reply_text("‚õî –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

async def remind(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(job.chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data}")

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –ø—Ä–∏ /start.")
        return

    text = update.message.text.lower()

    # --- —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç ---
    match = re.match(r"—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω—É—Ç (.+)", text)
    if match:
        minutes, task = int(match.group(1)), match.group(2)
        run_time = datetime.now(TIMEZONE) + timedelta(minutes=minutes)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                          id=str(run_time)+task, kwargs={"data": task}, replace_existing=True)
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç: {task}")
        return

    # --- —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ---
    match = re.match(r"—Å–µ–≥–æ–¥–Ω—è –≤ (\d{1,2}):(\d{2}) (.+)", text)
    if match:
        hour, minute, task = int(match.group(1)), int(match.group(2)), match.group(3)
        run_time = datetime.now(TIMEZONE).replace(hour=hour, minute=minute, second=0, microsecond=0)
        if run_time < datetime.now(TIMEZONE):
            await update.message.reply_text("‚õî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è.")
            return
        scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                          id=str(run_time)+task, kwargs={"data": task}, replace_existing=True)
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ {hour:02d}:{minute:02d}: {task}")
        return

    # --- –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ---
    match = re.match(r"–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2}) (.+)", text)
    if match:
        hour, minute, task = int(match.group(1)), int(match.group(2)), match.group(3)
        run_time = datetime.now(TIMEZONE).replace(hour=hour, minute=minute, second=0, microsecond=0) + timedelta(days=1)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                          id=str(run_time)+task, kwargs={"data": task}, replace_existing=True)
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ {hour:02d}:{minute:02d}: {task}")
        return

    # --- –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ---
    match = re.match(r"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ (\d{1,2}):(\d{2}) (.+)", text)
    if match:
        hour, minute, task = int(match.group(1)), int(match.group(2)), match.group(3)
        scheduler.add_job(remind, "cron", hour=hour, minute=minute, args=[context],id=task, kwargs={"data": task}, replace_existing=True)
        await update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {hour:02d}:{minute:02d}: {task}")
        return

    # --- –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (–î–î –º–µ—Å—è—Ü) ---
    match = re.match(r"(\d{1,2}) (\w+) (.+)", text)
    if match:
        day, month_name, task = match.group(1), match.group(2), match.group(3)
        months = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
            "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }
        if month_name in months:
            month = months[month_name]
            year = datetime.now(TIMEZONE).year
            run_time = datetime(year, month, int(day), 9, 0, tzinfo=TIMEZONE)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
            scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                              id=str(run_time)+task, kwargs={"data": task}, replace_existing=True)
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {day} {month_name}: {task}")
            return

    await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                    "- —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ...\n"
                                    "- —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...\n"
                                    "- –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...\n"
                                    "- –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...\n"
                                    "- 30 –∞–≤–≥—É—Å—Ç–∞ ...")

# =================== –ó–∞–ø—É—Å–∫ ===================
def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder))

    app.run_polling()

if __name__ == "__main__":
    main()
