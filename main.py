import os
import json
import re
import asyncio
from datetime import datetime, timedelta

import pytz
from aiohttp import web
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Update as TgUpdate,
    Message,
    BotCommand,
)

# -------------------- –ö–û–ù–§–ò–ì --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
ADMIN_ID = 963586834  # —Ç–≤–æ–π ID
TZ = pytz.timezone("Europe/Kaliningrad")

DATA_FILE = "data.json"   # —Ç—É—Ç —Ö—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∫–ª—é—á–∏/–∑–∞–¥–∞—á–∏/—Ñ–ª–∞–≥–∏
BASE_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä https://your-service.onrender.com
PORT = int(os.getenv("PORT", "10000"))

# –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ (–±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!)
DEFAULT_ACCESS_KEYS = ["VIP001", "VIP002", "VIP003", "VIP100"]

# -------------------- –ì–õ–û–ë–ê–õ–¨–ù–´–ï --------------------
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
scheduler = AsyncIOScheduler(timezone=TZ)

STATE = {
    "allowed_users": set(),
    "access_keys": {k: None for k in DEFAULT_ACCESS_KEYS},
    "maintenance": False,
    "pending_chats": set(),  # –∫—Ç–æ –ø–∏—Å–∞–ª –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö—Ä–∞–±–æ—Ç
    "tasks": []              # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {id, uid, chat_id, text, run_at_iso, daily}
}


# -------------------- –£–¢–ò–õ–ò–¢–´ –•–†–ê–ù–ò–õ–ö–ò --------------------
def load_db():
    if not os.path.exists(DATA_FILE):
        save_db()
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
    except Exception:
        raw = {}
    STATE["allowed_users"] = set(raw.get("allowed_users", []))
    STATE["access_keys"] = raw.get("access_keys", {k: None for k in DEFAULT_ACCESS_KEYS})
    STATE["maintenance"] = bool(raw.get("maintenance", False))
    STATE["pending_chats"] = set(raw.get("pending_chats", []))
    STATE["tasks"] = raw.get("tasks", [])


def save_db():
    raw = {
        "allowed_users": list(STATE["allowed_users"]),
        "access_keys": STATE["access_keys"],
        "maintenance": STATE["maintenance"],
        "pending_chats": list(STATE["pending_chats"]),
        "tasks": STATE["tasks"],
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(raw, f, ensure_ascii=False, indent=2)


def new_task_id(uid: int, when: datetime) -> str:
    return f"{uid}-{int(when.timestamp())}"


def now_tz() -> datetime:
    return datetime.now(TZ)


# -------------------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö --------------------
async def fire_reminder(chat_id: int, text: str, task_id: str, daily: bool):
    try:
        await bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>{text}</b>")
    finally:
        if daily:
            # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º
            return
        # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
        STATE["tasks"] = [t for t in STATE["tasks"] if t["id"] != task_id]
        save_db()


def schedule_task(task: dict):
    """–ü–æ–¥–Ω—è—Ç—å –∑–∞–¥–∞—á—É –≤ APScheduler (–µ—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º)."""
    when = datetime.fromisoformat(task["run_at_iso"])
    if when.tzinfo is None:
        when = TZ.localize(when)
    if when > now_tz():
        scheduler.add_job(
            fire_reminder,
            DateTrigger(run_date=when),
            args=[task["chat_id"], task["text"], task["id"], task.get("daily", False)],
            id=task["id"],
            replace_existing=True,
            misfire_grace_time=60
        )


def reschedule_all():
    for job in list(scheduler.get_jobs()):
        job.remove()
    for t in STATE["tasks"]:
        schedule_task(t)


# -------------------- –ü–ê–†–°–ò–ù–ì –†–£–°–°–ö–ò–• –§–†–ê–ó --------------------
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
}


def parse_when_and_text(msg: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (when: datetime|None, text: str, daily: bool). None ‚Äî –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ—Å—å."""
    m = msg.strip().lower()

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç
    m1 = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç", m)
    if m1:
        minutes = int(m1.group(1))
        rest = re.sub(r"—á–µ—Ä–µ–∑\s+\d+\s+–º–∏–Ω—É—Ç", "", msg, flags=re.IGNORECASE).strip()
        when = now_tz() + timedelta(minutes=minutes)
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), False

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM
    m2 = re.search(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})", m)
    if m2:
        hh, mm = int(m2.group(1)), int(m2.group(2))
        when = now_tz().replace(hour=hh, minute=mm, second=0, microsecond=0)
        rest = re.sub(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+\d{1,2}:\d{2}", "", msg, flags=re.IGNORECASE).strip()
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), False

    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM
    m3 = re.search(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})", m)
    if m3:
        hh, mm = int(m3.group(1)), int(m3.group(2))
        when = now_tz().replace(hour=hh, minute=mm, second=0, microsecond=0) + timedelta(days=1)
        rest = re.sub(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+\d{1,2}:\d{2}", "", msg, flags=re.IGNORECASE).strip()
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), False

    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM
    m4 = re.search(r"–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+(\d{1,2}):(\d{2})", m)
    if m4:
        hh, mm = int(m4.group(1)), int(m4.group(2))
        when = now_tz().replace(hour=hh, minute=mm, second=0, microsecond=0)
        if when <= now_tz():
            when += timedelta(days=1)
        rest = re.sub(r"–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+\d{1,2}:\d{2}", "", msg, flags=re.IGNORECASE).strip()
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), True

    # DD.MM.YYYY –≤ HH:MM
    m5 = re.search(r"(\d{1,2})\.(\d{1,2})\.(\d{4})\s+–≤\s+(\d{1,2}):(\d{2})", m)
    if m5:
        d, mo, y, hh, mm = map(int, m5.groups())
        when = TZ.localize(datetime(y, mo, d, hh, mm))
        rest = re.sub(r"\d{1,2}\.\d{1,2}\.\d{4}\s+–≤\s+\d{1,2}:\d{2}", "", msg, flags=re.IGNORECASE).strip()
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), False

    # DD <–º–µ—Å—è—Ü> [–≤ HH:MM]
    m6 = re.search(r"(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)(?:\s+–≤\s+(\d{1,2}):(\d{2}))?", m)
    if m6:
        d = int(m6.group(1))
        mo = MONTHS[m6.group(2)]
        hh = int(m6.group(3)) if m6.group(3) else 9
        mm = int(m6.group(4)) if m6.group(4) else 0
        y = now_tz().year
        when = TZ.localize(datetime(y, mo, d, hh, mm))
        rest = re.sub(r"\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)(?:\s+–≤\s+\d{1,2}:\d{2})?", "", msg, flags=re.IGNORECASE).strip()
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), False

    # –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m7 = re.search(r"\b–≤\s+(\d{1,2}):(\d{2})\b", m)
    if m7:
        hh, mm = int(m7.group(1)), int(m7.group(2))
        when = now_tz().replace(hour=hh, minute=mm, second=0, microsecond=0)
        if when <= now_tz():
            when += timedelta(days=1)
        rest = re.sub(r"\b–≤\s+\d{1,2}:\d{2}\b", "", msg, flags=re.IGNORECASE).strip()
        return when, (rest or "–Ω–∞–ø–æ–º–Ω–∏—Ç—å"), False

    return None, "", False


# -------------------- –•–≠–ù–î–õ–ï–†–´ --------------------
@dp.message(Command("start"))
async def cmd_start(m: Message):
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand(command="affairs", description="–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand(command="affairs_delete", description="–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand(command="maintenance_on", description="(–∞–¥–º–∏–Ω) –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"),
        BotCommand(command="maintenance_off", description="(–∞–¥–º–∏–Ω) –í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"),
    ])
    await m.answer(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00\n"
        f"(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)\n\n"
        "–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123."
    )


@dp.message(Command("maintenance_on"))
async def maintenance_on(m: Message):
    if m.from_user.id != ADMIN_ID:
        return
    STATE["maintenance"] = True
    save_db()
    await m.answer("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")


@dp.message(Command("maintenance_off"))
async def maintenance_off(m: Message):
    if m.from_user.id != ADMIN_ID:
        return
    STATE["maintenance"] = False
    save_db()
    await m.answer("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    # –æ–ø–æ–≤–µ—Å—Ç–∏–º –æ–∂–∏–¥–∞–≤—à–∏—Ö
    while STATE["pending_chats"]:
        cid = STATE["pending_chats"].pop()
        try:
            await bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        except Exception:
            pass
    save_db()


@dp.message(Command("affairs"))
async def list_affairs(m: Message):
    uid = m.from_user.id
    items = [t for t in STATE["tasks"] if t["uid"] == uid]
    if not items:
        await m.answer("–ü–æ–∫–∞ –¥–µ–ª –Ω–µ—Ç.")
        return
    items_sorted = sorted(items, key=lambda t: t["run_at_iso"])
    lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:"]
    for i, t in enumerate(items_sorted, start=1):
        when = datetime.fromisoformat(t["run_at_iso"]).astimezone(TZ)
        dstr = when.strftime("%d.%m.%Y %H:%M")
        lines.append(f"{i}. {dstr} ‚Äî {t['text']}")
    await m.answer("\n".join(lines))


@dp.message(Command("affairs_delete"))
async def affairs_delete(m: Message, command: CommandObject):
    uid = m.from_user.id
    if not command.args or not command.args.strip().isdigit():
        await m.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä: /affairs_delete 2")
        return
    idx = int(command.args.strip())
    items = [t for t in STATE["tasks"] if t["uid"] == uid]
    if not items or idx < 1 or idx > len(items):
        await m.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    items_sorted = sorted(items, key=lambda t: t["run_at_iso"])
    task = items_sorted[idx - 1]
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        job = scheduler.get_job(task["id"])
        if job:
            job.remove()
    except Exception:
        pass
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã
    STATE["tasks"] = [t for t in STATE["tasks"] if t["id"] != task["id"]]
    save_db()
    await m.answer("‚úÖ –î–µ–ª–æ —É–¥–∞–ª–µ–Ω–æ.")


@dp.message(F.text)
async def text_router(m: Message):
    text = (m.text or "").strip()
    uid = m.from_user.id
    chat_id = m.chat.id

    # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if uid not in STATE["allowed_users"]:
        if re.fullmatch(r"[A-Z]{3}\d{3}", text):
            # –∫–ª—é—á —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂; –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∏ –µ—â—ë –Ω–µ –∑–∞–Ω—è—Ç—ã
            if text in STATE["access_keys"] and STATE["access_keys"][text] is None:
                STATE["access_keys"][text] = uid
                STATE["allowed_users"].add(uid)
                save_db()
                await m.answer("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            else:
                await m.answer("‚ùå –ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        else:
            await m.answer("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
    if STATE["maintenance"] and uid != ADMIN_ID:
        STATE["pending_chats"].add(chat_id)
        save_db()
        await m.answer("‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
    when, todo_text, daily = parse_when_and_text(text)
    if not when:
        await m.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª, ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã¬ª, ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞¬ª.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º
    task_id = new_task_id(uid, when)
    task = {
        "id": task_id,
        "uid": uid,
        "chat_id": chat_id,
        "text": todo_text,
        "run_at_iso": when.isoformat(),
        "daily": daily
    }
    STATE["tasks"].append(task)
    save_db()
    schedule_task(task)

    when_str = when.strftime("%Y-%m-%d %H:%M")
    if daily:
        await m.answer(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {when.strftime('%H:%M')} ‚Äî ¬´{todo_text}¬ª.")
    else:
        await m.answer(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when_str} ‚Äî ¬´{todo_text}¬ª. (TZ: Europe/Kaliningrad)")


# -------------------- WEBHOOK –°–ï–†–í–ï–† --------------------
async def handle_webhook(request: web.Request):
    data = await request.json()
    await dp.feed_update(bot, TgUpdate(**data))
    return web.Response(text="ok")

async def on_startup(app: web.Application):
    load_db()
    scheduler.start()
    reschedule_all()

    if not BASE_URL:
        print("‚ö†Ô∏è WEBHOOK_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è.")
        return
    url = f"{BASE_URL.rstrip('/')}/webhook/{BOT_TOKEN}"
    await bot.set_webhook(url, drop_pending_updates=True)
    print("‚úÖ Webhook set:", url)

async def on_cleanup(app: web.Application):
    await bot.delete_webhook(drop_pending_updates=False)
    scheduler.shutdown(wait=False)
    save_db()


def build_app() -> web.Application:
    app = web.Application()
    app.router.add_post(f"/webhook/{BOT_TOKEN}", handle_webhook)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app


# -------------------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ --------------------
if __name__ == "__main__":
    if BOT_TOKEN == "PASTE_YOUR_TOKEN_HERE":
        raise RuntimeError("–£–∫–∞–∂–∏ BOT_TOKEN —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    web.run_app(build_app(), host="0.0.0.0", port=PORT)
