# -*- coding: utf-8 -*-
import os
import re
import json
import asyncio
from dataclasses import dataclass, asdict
from datetime import datetime, timedelta, time
from zoneinfo import ZoneInfo
from typing import Dict, Any, List, Optional, Tuple, Set

from telegram import Update, BotCommand
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
)

# =============== –ù–ê–°–¢–†–û–ô–ö–ò ===============
ADMIN_ID = 963586834  # –≤–∞—à ID
TZ = ZoneInfo("Europe/Kaliningrad")
DB_FILE = "db.json"

# –ì–µ–Ω–µ—Ä–∏–º –∫–ª—é—á–∏ VIP001..VIP100
ACCESS_KEYS: Dict[str, Optional[int]] = {f"VIP{n:03d}": None for n in range(1, 101)}

# –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ (–≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –Ω–µ —Ç—Ä–µ–±—É–µ–º ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
    # –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4, "–∏—é–Ω—å": 6, "–∏—é–ª—å": 7,
    "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12,
}

# =============== –•–†–ê–ù–ò–õ–ö–ê ===============
def now_local() -> datetime:
    return datetime.now(TZ)

@dataclass
class Task:
    chat_id: int
    when_iso: str            # ISO –≤—Ä–µ–º—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ)
    text: str
    kind: str                # "once" | "daily"
    job_id: str

DB: Dict[str, Any] = {
    "allowed_users": [],          # list[int]
    "access_keys": ACCESS_KEYS,   # dict[str, Optional[int]]
    "tasks": [],                  # list[Task dict]
    "maintenance": False,
    "pending_chats": []           # list[int] ‚Äî –∫–æ–º—É –æ—Ç–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Ö—Ä–∞–±–æ—Ç
}

def load_db() -> None:
    global DB
    if os.path.exists(DB_FILE):
        try:
            with open(DB_FILE, "r", encoding="utf-8") as f:
                DB.update(json.load(f))
        except Exception:
            pass
    else:
        save_db()

def save_db() -> None:
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(DB, f, ensure_ascii=False, indent=2)

def allowed_users() -> Set[int]:
    return set(DB.get("allowed_users", []))

def is_allowed(uid: int) -> bool:
    return uid in allowed_users() or uid == ADMIN_ID

# =============== –ü–ê–†–°–ò–ù–ì –ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ì–û –Ø–ó–´–ö–ê ===============
RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"

def parse_text(t: str) -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict:
      {"type": "once", "dt": datetime, "text": "..."}  –∏–ª–∏
      {"type": "daily", "t": time, "text": "..."}
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
      ‚Äî "—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ..."
      ‚Äî "—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ..."
      ‚Äî "–∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ..."
      ‚Äî "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ..."
      ‚Äî "DD <–º–µ—Å—è—Ü> [–≤ HH:MM] ..."
      ‚Äî "—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ... –≤ HH:MM ..." (–ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è ‚Äî —Å–∏–≥–Ω–∞–ª, –≤—Ç–æ—Ä–æ–µ ‚Äî —Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
    """
    t = t.strip().lower()

    # 1) —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ...
    m = re.match(r"—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(–º–∏–Ω|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)\b\s*(?P<txt>.*)", t)
    if m:
        n = int(m.group("n"))
        dt = now_local() + timedelta(minutes=n)
        txt = m.group("txt").strip() or "–¥–µ–ª–æ"
        return {"type": "once", "dt": dt, "text": txt}

    m = re.match(r"—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\b\s*(?P<txt>.*)", t)
    if m:
        n = int(m.group("n"))
        dt = now_local() + timedelta(hours=n)
        txt = m.group("txt").strip() or "–¥–µ–ª–æ"
        return {"type": "once", "dt": dt, "text": txt}

    # 2) —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...
    m = re.match(rf"—Å–µ–≥–æ–¥–Ω—è\s*–≤\s*{RE_TIME}\s*(?P<txt>.+)", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        dt = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        # –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if dt <= now_local():
            dt += timedelta(days=1)
        return {"type": "once", "dt": dt, "text": m.group("txt").strip()}

    # 3) –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...
    m = re.match(rf"–∑–∞–≤—Ç—Ä–∞\s*–≤\s*{RE_TIME}\s*(?P<txt>.+)", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        dt = base + timedelta(days=1)
        return {"type": "once", "dt": dt, "text": m.group("txt").strip()}

    # 4) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...
    m = re.match(rf"(–∫–∞–∂–¥—ã–π\s*–¥–µ–Ω—å|–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)\s*–≤\s*{RE_TIME}\s*(?P<txt>.+)", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        return {"type": "daily", "t": time(hour=hh, minute=mm, tzinfo=TZ), "text": m.group("txt").strip()}

    # 5) DD <–º–µ—Å—è—Ü> [–≤ HH:MM] ...
    m = re.match(
        rf"(?P<d>\d{{1,2}})\s+(?P<mon>[–∞-—è]+)(?:\s*–≤\s*{RE_TIME})?\s*(?P<txt>.+)",
        t
    )
    if m and m.group("mon") in MONTHS:
        d = int(m.group("d"))
        mon = MONTHS[m.group("mon")]
        hh = int(m.group("h")) if m.group("h") else 9
        mm = int(m.group("m")) if m.group("m") else 0
        y = now_local().year
        dt = datetime(y, mon, d, hh, mm, tzinfo=TZ)
        if dt <= now_local():
            # –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–µ—á—å –æ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É
            dt = datetime(y + 1, mon, d, hh, mm, tzinfo=TZ)
        return {"type": "once", "dt": dt, "text": m.group("txt").strip()}

    # 6) ¬´—Å–∏–≥–Ω–∞–ª/–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ¬ª: —Å–µ–≥–æ–¥–Ω—è –≤ 14:00 ... –≤ 15:00 ...
    m = re.match(
        rf"—Å–µ–≥–æ–¥–Ω—è\s*–≤\s*{RE_TIME}.*?\b–≤\s*(?P<h2>\d{{1,2}}):(?P<m2>\d{{2}})\s*(?P<txt>.+)",
        t
    )
    if m:
        # –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (—Å–∏–≥–Ω–∞–ª) ‚Äî —Å—Ç–∞–≤–∏–º –Ω–∞ –≤—Ç–æ—Ä–æ–µ
        hh2, mm2 = int(m.group("h2")), int(m.group("m2"))
        dt = now_local().replace(hour=hh2, minute=mm2, second=0, microsecond=0)
        if dt <= now_local():
            dt += timedelta(days=1)
        return {"type": "once", "dt": dt, "text": m.group("txt").strip()}

    return None

# =============== –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ===============
def make_job_id(chat_id: int, when: datetime, text: str) -> str:
    return f"{chat_id}:{int(when.timestamp())}:{abs(hash(text))%10_000_000}"

async def fire_reminder(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    data = ctx.job.data
    chat_id = data["chat_id"]
    text = data["text"]
    when_iso = data["when_iso"]
    try:
        await ctx.bot.send_message(chat_id, f"‚è∞ {text}")
    finally:
        # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        DB["tasks"] = [t for t in DB["tasks"] if not (t["chat_id"] == chat_id and t["when_iso"] == when_iso and t["text"] == text and t["kind"] == "once")]
        save_db()

def schedule_existing(app: Application) -> None:
    for t in DB.get("tasks", []):
        if t["kind"] == "once":
            dt = datetime.fromisoformat(t["when_iso"])
            if dt > now_local():
                app.job_queue.run_once(
                    fire_reminder,
                    when=dt - now_local(),
                    data={"chat_id": t["chat_id"], "text": t["text"], "when_iso": t["when_iso"]},
                    name=t["job_id"]
                )
        elif t["kind"] == "daily":
            hhmm = datetime.fromisoformat(t["when_iso"]).time()
            app.job_queue.run_daily(
                fire_reminder,
                time=hhmm,
                data={"chat_id": t["chat_id"], "text": t["text"], "when_iso": t["when_iso"]},
                name=t["job_id"]
            )

def add_task_once(app: Application, chat_id: int, dt: datetime, text: str) -> Task:
    job_id = make_job_id(chat_id, dt, text)
    app.job_queue.run_once(
        fire_reminder,
        when=dt - now_local(),
        data={"chat_id": chat_id, "text": text, "when_iso": dt.isoformat()},
        name=job_id
    )
    task = Task(chat_id=chat_id, when_iso=dt.isoformat(), text=text, kind="once", job_id=job_id)
    DB["tasks"].append(asdict(task))
    save_db()
    return task

def add_task_daily(app: Application, chat_id: int, t: time, text: str) -> Task:
    # when_iso —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ —Å–µ–≥–æ–¥–Ω—è+—ç—Ç–æ –≤—Ä–µ–º—è (–¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ ISO)
    ref = now_local().replace(hour=t.hour, minute=t.minute, second=0, microsecond=0)
    job_id = make_job_id(chat_id, ref, text)
    app.job_queue.run_daily(
        fire_reminder,
        time=t,
        data={"chat_id": chat_id, "text": text, "when_iso": ref.isoformat()},
        name=job_id
    )
    task = Task(chat_id=chat_id, when_iso=ref.isoformat(), text=text, kind="daily", job_id=job_id)
    DB["tasks"].append(asdict(task))
    save_db()
    return task

# =============== –ì–û–õ–û–° ===============
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_allowed(uid):
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        await update.message.reply_text("üéô –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–Ω–µ—Ç OPENAI_API_KEY). –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º voice –∫–∞–∫ ogg
    file = await context.bot.get_file(update.message.voice.file_id)
    b = await file.download_as_bytearray()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Whisper
    try:
        import aiohttp
        form = aiohttp.FormData()
        form.add_field("file", b, filename="audio.ogg", content_type="audio/ogg")
        form.add_field("model", "whisper-1")
        async with aiohttp.ClientSession() as sess:
            async with sess.post(
                "https://api.openai.com/v1/audio/transcriptions",
                data=form,
                headers={"Authorization": f"Bearer {api_key}"}
            ) as resp:
                js = await resp.json()
        text = js.get("text", "").strip()
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–æ—á–µ –∏ —á—ë—Ç—á–µ.")
            return
        # –°–∫–æ—Ä–º–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        update.message.text = text
        await handle_key_or_text(update, context)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")

# =============== –¢–ï–•–†–ê–ë–û–¢–´ ===============
def maintenance_on() -> None:
    DB["maintenance"] = True
    save_db()

def maintenance_off() -> None:
    DB["maintenance"] = False
    save_db()

# =============== –•–ï–õ–ü–ï–†–´ –í–´–í–û–î–ê ===============
HELP_TEXT = (
    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
    "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00 (—Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)\n"
    f"(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ.key})"
)

def format_affairs(chat_id: int) -> str:
    items = []
    for i, t in enumerate(sorted([x for x in DB["tasks"] if x["chat_id"] == chat_id],
                                 key=lambda x: x["when_iso"])) :
        mark = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" if t["kind"] == "daily" else datetime.fromisoformat(t["when_iso"]).strftime("%d.%m.%Y %H:%M")
        items.append(f"{i+1}. {mark} ‚Äî {t['text']}")
    return "–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:\n" + ("\n".join(items) if items else "–ø–æ–∫–∞ –ø—É—Å—Ç–æ")

# =============== –•–ï–ù–î–õ–ï–†–´ ===============
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_allowed(uid):
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    await update.message.reply_text(HELP_TEXT)

async def cmd_affairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_allowed(uid):
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    await update.message.reply_text(format_affairs(update.effective_chat.id))

async def cmd_affairs_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not is_allowed(uid):
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä: /affairs_delete 2")
        return
    try:
        idx = int(context.args[0]) - 1
    except:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º.")
        return
    my_tasks = [t for t in DB["tasks"] if t["chat_id"] == update.effective_chat.id]
    if not (0 <= idx < len(my_tasks)):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    victim = my_tasks[idx]
    # –æ—Å—Ç–∞–Ω–æ–≤–∏–º job
    j = context.application.job_queue.get_jobs_by_name(victim["job_id"])
    for job in j:
        job.schedule_removal()
    # —É–¥–∞–ª–∏–º –∏–∑ –ë–î
    DB["tasks"] = [t for t in DB["tasks"] if t != victim]
    save_db()
    await update.message.reply_text("–£–¥–∞–ª–∏–ª. ‚úÖ")

async def cmd_maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    maintenance_on()
    await update.message.reply_text("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")
async def cmd_maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    maintenance_off()
    await update.message.reply_text("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    # —É–≤–µ–¥–æ–º–∏–º –æ–∂–∏–¥–∞–≤—à–∏—Ö
    chats = set(DB.get("pending_chats", []))
    DB["pending_chats"] = []
    save_db()
    for cid in chats:
        try:
            await context.bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        except:
            pass

async def handle_key_or_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É
    if not is_allowed(uid):
        if re.fullmatch(r"VIP\d{3}", msg):
            if msg in DB["access_keys"] and DB["access_keys"][msg] is None:
                DB["access_keys"][msg] = uid
                DB["allowed_users"] = sorted(list(allowed_users() | {uid}))
                save_db()
                await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                await update.message.reply_text(HELP_TEXT)
            else:
                await update.message.reply_text("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # 2) –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
    if DB.get("maintenance", False) and uid != ADMIN_ID:
        s = "‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–µ–π—á–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ä–∞–±–æ—Ç—É ‚Äî –º—ã —Å–æ–æ–±—â–∏–º."
        await update.message.reply_text(s)
        # –∑–∞–ø–æ–º–Ω–∏–º —á–∞—Ç
        pend = set(DB.get("pending_chats", []))
        pend.add(chat_id)
        DB["pending_chats"] = list(pend)
        save_db()
        return

    # 3) –†–∞–∑–±–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    parsed = parse_text(msg.lower())
    if not parsed:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        return

    if parsed["type"] == "once":
        task = add_task_once(context.application, chat_id, parsed["dt"], parsed["text"])
        dt = datetime.fromisoformat(task.when_iso)
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {dt.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ.key})"
        )
    else:
        task = add_task_daily(context.application, chat_id, parsed["t"], parsed["text"])
        t = datetime.fromisoformat(task.when_iso).strftime("%H:%M")
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t} ‚Äî ¬´{parsed['text']}¬ª.")
# =============== WEBHOOK –ó–ê–ü–£–°–ö ===============
async def set_bot_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É: /affairs_delete N"),
        BotCommand("maintenance_on", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤–∫–ª—é—á–∏—Ç—å (–∞–¥–º–∏–Ω)"),
        BotCommand("maintenance_off", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤—ã–∫–ª—é—á–∏—Ç—å (–∞–¥–º–∏–Ω)"),
    ])

def build_application() -> Application:
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    app = Application.builder().token(token).build()

    # —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("affairs", cmd_affairs))
    app.add_handler(CommandHandler("affairs_delete", cmd_affairs_delete))
    app.add_handler(CommandHandler("maintenance_on", cmd_maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", cmd_maintenance_off))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_key_or_text))

    return app

def main():
    load_db()
    app = build_application()
    schedule_existing(app)

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ await —Ç—É—Ç –Ω–µ–ª—å–∑—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º post_init)
    async def post_init(_: Application):
        await set_bot_commands(app)

    app.post_init = post_init

    public_url = os.getenv("RENDER_EXTERNAL_URL")
    if not public_url:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL")
    port = int(os.getenv("PORT", "10000"))
    path = os.getenv("BOT_TOKEN")  # –∑–∞–∫—Ä—ã—Ç—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞
    webhook_url = f"{public_url.rstrip('/')}/{path}"

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES,
    )

if __name__ == "__main__":
    main()
