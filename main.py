# -*- coding: utf-8 -*-
import os
import logging
import re
from datetime import datetime, timedelta
from pytz import timezone
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)
from apscheduler.schedulers.background import BackgroundScheduler

# -------------------- –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ --------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("reminder-bot")

TIMEZONE = timezone("Europe/Kaliningrad")

def now_local() -> datetime:
    return datetime.now(TIMEZONE)

# -------------------- –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ ------------------------
# –ì–µ–Ω–µ—Ä–∏–º VIP001..VIP100
ACCESS_KEYS = {f"VIP{n:03d}": None for n in range(1, 101)}  # –∑–Ω–∞—á–µ–Ω–∏–µ = user_id, –∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª
ALLOWED_USERS: set[int] = set()

async def cmd_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞: /key VIP0xx"""
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –∫–ª—é—á —Ç–∞–∫: /key VIP001")
        return

    user_id = update.effective_user.id
    key = context.args[0].strip().upper()

    if user_id in ALLOWED_USERS:
        await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.")
        return

    if key not in ACCESS_KEYS:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
        return

    if ACCESS_KEYS[key] is not None and ACCESS_KEYS[key] != user_id:
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∫–ª—é—á —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    ACCESS_KEYS[key] = user_id
    ALLOWED_USERS.add(user_id)
    await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω! –ù–∞–ø–∏—à–∏ /start")

def check_access(update: Update) -> bool:
    return update.effective_user and update.effective_user.id in ALLOWED_USERS

# -------------------- –ø–∞—Ä—Å–µ—Ä —Ñ—Ä–∞–∑ --------------------------
RE_TIME = r'(?P<h>\d{1,2}):(?P<m>\d{2})'

MONTHS = {
    # —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π + –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    "—è–Ω–≤–∞—Ä—è": 1, "—è–Ω–≤–∞—Ä—å": 1,
    "—Ñ–µ–≤—Ä–∞–ª—è": 2, "—Ñ–µ–≤—Ä–∞–ª—å": 2,
    "–º–∞—Ä—Ç–∞": 3, "–º–∞—Ä—Ç": 3,
    "–∞–ø—Ä–µ–ª—è": 4, "–∞–ø—Ä–µ–ª—å": 4,
    "–º–∞—è": 5, "–º–∞–π": 5,
    "–∏—é–Ω—è": 6, "–∏—é–Ω—å": 6,
    "–∏—é–ª—è": 7, "–∏—é–ª—å": 7,
    "–∞–≤–≥—É—Å—Ç–∞": 8, "–∞–≤–≥—É—Å—Ç": 8,
    "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "—Å–µ–Ω—Ç—è–±—Ä—å": 9,
    "–æ–∫—Ç—è–±—Ä—è": 10, "–æ–∫—Ç—è–±—Ä—å": 10,
    "–Ω–æ—è–±—Ä—è": 11, "–Ω–æ—è–±—Ä—å": 11,
    "–¥–µ–∫–∞–±—Ä—è": 12, "–¥–µ–∫–∞–±—Ä—å": 12,
}

def parse_command(text: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –∏–∑ —Ñ–æ—Ä–º:
    - {"after": timedelta, "text": str}
    - {"once_at": datetime, "text": str}
    - {"daily_at": (hour, minute), "text": str}
    - {"date": (year, month, day, hour, minute), "text": str}
    """
    t = text.strip().lower()

    # 1) "—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç <—Ç–µ–∫—Å—Ç>" –∏–ª–∏ "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ <—Ç–µ–∫—Å—Ç>"
    m = re.match(r'^—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(–º–∏–Ω(—É—Ç[—É—ã])?|–º|—á–∞—Å(–∞|–æ–≤)?|—á)\s+(?P<text>.+)$', t)
    if m:
        n = int(m.group('n'))
        word = m.group(2)  # –º–∏–Ω..., –º, —á–∞—Å..., —á
        if word.startswith('–º–∏–Ω') or word == '–º':
            delta = timedelta(minutes=n)
        else:
            delta = timedelta(hours=n)
        return {"after": delta, "text": m.group('text').strip()}

    # 2) "—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM <—Ç–µ–∫—Å—Ç>"
    m = re.match(rf'^—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$', t)
    if m:
        hh, mm = int(m.group('h')), int(m.group('m'))
        target = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        return {"once_at": target, "text": m.group('text').strip()}

    # 3) "–∑–∞–≤—Ç—Ä–∞ –≤ HH:MM <—Ç–µ–∫—Å—Ç>"
    m = re.match(rf'^–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$', t)
    if m:
        hh, mm = int(m.group('h')), int(m.group('m'))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        target = base + timedelta(days=1)
        return {"once_at": target, "text": m.group('text').strip()}

    # 4) "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM <—Ç–µ–∫—Å—Ç>"
    m = re.match(rf'^–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$', t)
    if m:
        hh, mm = int(m.group('h')), int(m.group('m'))
        return {"daily_at": (hh, mm), "text": m.group('text').strip()}

    # 5) "30 –∞–≤–≥—É—Å—Ç–∞ <—Ç–µ–∫—Å—Ç>" –∏–ª–∏ "30 –∞–≤–≥—É—Å—Ç–∞ –≤ HH:MM <—Ç–µ–∫—Å—Ç>"
    m = re.match(rf'^(?P<d>\d{{1,2}})\s+(?P<month>[–∞-—è—ë]+)(?:\s+–≤\s+{RE_TIME})?\s+(?P<text>.+)$',
        t
    )
    if m and m.group('month') in MONTHS:
        day = int(m.group('d'))
        month = MONTHS[m.group('month')]
        if m.group('h') and m.group('m'):
            hh, mm = int(m.group('h')), int(m.group('m'))
        else:
            hh, mm = 9, 0  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
        year = now_local().year
        return {"date": (year, month, day, hh, mm), "text": m.group('text').strip()}

    return None

# -------------------- –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ --------------------------
scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.start()

async def remind(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.kwargs["data"]
    chat_id = data["chat_id"]
    text = data["text"]
    await context.application.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

# -------------------- —Ö–µ–Ω–¥–ª–µ—Ä—ã -----------------------------
HELP = (
    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n"
    "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update):
        await update.message.reply_text("üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç. –ü—Ä–∏—à–ª–∏ –∫–ª—é—á: /key VIP001")
        return
    await update.message.reply_text(HELP)

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_access(update):
        await update.message.reply_text("üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–∏—à–ª–∏ –∫–ª—é—á: /key VIP001")
        return

    text = update.message.text.strip()
    # –¥–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ "–¥–æ–±–∞–≤—å" / "–Ω–∞–ø–æ–º–Ω–∏"
    if text.lower().startswith("–¥–æ–±–∞–≤—å "):
        text = "–Ω–∞–ø–æ–º–Ω–∏ " + text[7:].strip()

    if text.lower().startswith("–Ω–∞–ø–æ–º–Ω–∏ "):
        text = text[len("–Ω–∞–ø–æ–º–Ω–∏ "):]

    parsed = parse_command(text)
    if not parsed:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ...\n"
            "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...\n"
            "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...\n"
            "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ [–≤ HH:MM] ..."
        )
        return

    chat_id = update.effective_chat.id

    if "after" in parsed:
        run_time = now_local() + parsed["after"]
        scheduler.add_job(
            remind, "date", run_date=run_time,
            kwargs={"data": {"chat_id": chat_id, "text": parsed["text"]}},
            id=f"once_{chat_id}_{run_time.timestamp()}_{hash(parsed['text'])}",
            replace_existing=True,
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {run_time.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: Europe/Kaliningrad)"
        )
        return

    if "once_at" in parsed:
        run_time = parsed["once_at"]
        scheduler.add_job(
            remind, "date", run_date=run_time,
            kwargs={"data": {"chat_id": chat_id, "text": parsed["text"]}},
            id=f"once_{chat_id}_{run_time.timestamp()}_{hash(parsed['text'])}",
            replace_existing=True,
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {run_time.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: Europe/Kaliningrad)"
        )
        return

    if "daily_at" in parsed:
        hh, mm = parsed["daily_at"]
        scheduler.add_job(
            remind, "cron", hour=hh, minute=mm,
            kwargs={"data": {"chat_id": chat_id, "text": parsed["text"]}},
            id=f"daily_{chat_id}_{hh:02d}{mm:02d}_{hash(parsed['text'])}",
            replace_existing=True,
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hh:02d}:{mm:02d} ‚Äî ¬´{parsed['text']}¬ª. (TZ: Europe/Kaliningrad)"
        )
        return

    if "date" in parsed:
        y, mth, d, hh, mm = parsed["date"]run_time = datetime(y, mth, d, hh, mm, tzinfo=TIMEZONE)
        scheduler.add_job(
            remind, "date", run_date=run_time,
            kwargs={"data": {"chat_id": chat_id, "text": parsed["text"]}},
            id=f"date_{chat_id}_{y}{mth:02d}{d:02d}{hh:02d}{mm:02d}_{hash(parsed['text'])}",
            replace_existing=True,
        )
        mon_names = {v: k for k, v in MONTHS.items() if k.endswith('–∞') or k in ("–º–∞–π",)}
        month_name = mon_names.get(mth, f"{mth}")
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {d} {month_name} –≤ {hh:02d}:{mm:02d} ‚Äî ¬´{parsed['text']}¬ª. (TZ: Europe/Kaliningrad)"
        )
        return

# -------------------- –∑–∞–ø—É—Å–∫ -------------------------------
def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("key", cmd_key))  # –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder))

    log.info("Starting bot with polling...")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
