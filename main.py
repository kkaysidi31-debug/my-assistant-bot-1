import os
import re
import json
import uuid
import logging
from datetime import datetime, timedelta, time as dtime
from typing import Dict, Any, List

import pytz
from aiohttp import web
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ---------- –ö–æ–Ω—Ñ–∏–≥ ----------
ADMIN_ID = 963586834                      # —Ç–≤–æ–π ID
TIMEZONE = pytz.timezone("Europe/Kaliningrad")
DB_FILE = "db.json"

# –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ VIP001..VIP100
ACCESS_KEYS = [f"VIP{str(i).zfill(3)}" for i in range(1, 101)]
ALLOWED_USERS = set()
USED_KEYS = set()

MAINTENANCE = False
PENDING_CHATS = set()  # –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "–±–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("reminder-bot")

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ ----------
def load_db() -> Dict[str, Any]:
    if not os.path.exists(DB_FILE):
        return {"allowed_users": [], "used_keys": [], "tasks": {}}
    with open(DB_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_db(db: Dict[str, Any]) -> None:
    with open(DB_FILE, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)

def boot_db():
    db = load_db()
    ALLOWED_USERS.update(db.get("allowed_users", []))
    USED_KEYS.update(db.get("used_keys", []))
    return db

DB = boot_db()

def persist_users():
    DB["allowed_users"] = sorted(list(ALLOWED_USERS))
    DB["used_keys"] = sorted(list(USED_KEYS))
    save_db(DB)

def user_tasks(uid: int) -> List[Dict[str, Any]]:
    DB.setdefault("tasks", {})
    return DB["tasks"].setdefault(str(uid), [])

def add_task(uid: int, task: Dict[str, Any]):
    tasks = user_tasks(uid)
    tasks.append(task)
    save_db(DB)

def remove_task(uid: int, job_id: str) -> bool:
    tasks = user_tasks(uid)
    before = len(tasks)
    DB["tasks"][str(uid)] = [t for t in tasks if t["job_id"] != job_id]
    save_db(DB)
    return len(DB["tasks"][str(uid)]) < before

# ---------- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ ----------
def now_local() -> datetime:
    return datetime.now(TIMEZONE)

MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
    "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4, "–∏—é–Ω—å": 6, "–∏—é–ª—å": 7,
    "–∞–≤–≥—É—Å—Ç": 8, "—Å–µ–Ω—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12,
}

RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"

def parse_text(txt: str) -> Dict[str, Any] | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {"kind":"in","delta":timedelta,"text":...}
      {"kind":"today","dt":datetime,"text":...}
      {"kind":"tomorrow","dt":datetime,"text":...}
      {"kind":"daily","t":datetime.time,"text":...}
      {"kind":"date","dt":datetime,"text":...}
    """
    t = " ".join(txt.split()).lower()

    # 1) —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ...
    m = re.match(r"^—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(–º–∏–Ω—É—Ç(?:—ã)?|–º–∏–Ω|—á–∞—Å(?:–∞|–æ–≤)?)\s+(?P<text>.+)$", t)
    if m:
        n = int(m.group("n"))
        unit = m.group(2)
        delta = timedelta(minutes=n) if unit.startswith("–º–∏–Ω") else timedelta(hours=n)
        return {"kind": "in", "delta": delta, "text": m.group("text").strip()}

    # 2) —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...
    m = re.match(rf"^—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        return {"kind": "today", "dt": base, "text": m.group("text").strip()}

    # 3) –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...
    m = re.match(rf"^–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0) + timedelta(days=1)
        return {"kind": "tomorrow", "dt": base, "text": m.group("text").strip()}

    # 4) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...
    m = re.match(rf"^–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s*(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        return {"kind": "daily", "t": dtime(hh, mm, tzinfo=TIMEZONE), "text": m.group("text").strip()}

    # 5) "30 –∞–≤–≥—É—Å—Ç–∞ [–≤ 09:00] ..."
    m = re.match(
        rf"^(?P<d>\d{{1,2}})\s+(?P<mon>[–∞-—è]+)(?:\s+–≤\s+{RE_TIME})?\s*(?P<text>.+)$",
        t
    )
    if m and m.group("mon") in MONTHS:
        day = int(m.group("d"))
        mon = MONTHS[m.group("mon")]
        hh = int(m.group("h")) if m.group("h") else 9
        mm = int(m.group("m")) if m.group("m") else 0
        year = now_local().year
        dt = TIMEZONE.localize(datetime(year, mon, day, hh, mm, 0))
        return {"kind": "date", "dt": dt, "text": m.group("text").strip()}

    return None

# ---------- –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ ----------
async def remind_callback(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    data = ctx.job.data or {}
    chat_id = data.get("chat_id")
    text = data.get("text", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    try:
        await ctx.bot.send_message(chat_id, f"‚è∞ {text}")
    finally:
        # –¥–ª—è —Ä–∞–∑–æ–≤—ã—Ö –∑–∞–¥–∞—á —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        if data.get("one_time") and chat_id and ctx.job:
            remove_task(chat_id, ctx.job.name)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
HELP_TEXT = (
    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
    "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00 (—Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 15:00)\n"
    "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
)

async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand("maintenance_on", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤–∫–ª—é—á–∏—Ç—å (–∞–¥–º–∏–Ω)"),
        BotCommand("maintenance_off", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤—ã–∫–ª—é—á–∏—Ç—å (–∞–¥–º–∏–Ω)"),
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USERS:
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    await update.message.reply_text(HELP_TEXT)

async def affairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    tasks = user_tasks(uid)
    if not tasks:
        await update.message.reply_text("–ü–æ–∫–∞ –ø—É—Å—Ç–æ ‚ú®")
        return
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–π
    def _key(t):
        if t["type"] == "daily":
            return ("1", t["time"])  # daily –ø–æ—Å–ª–µ —Ä–∞–∑–æ–≤—ã—Ö
        return ("0", t["when"])
    tasks_sorted = sorted(tasks, key=_key)
    lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:"]
    for i, t in enumerate(tasks_sorted, 1):
        if t["type"] == "daily":
            lines.append(f"{i}. –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t['time']} ‚Äî {t['text']}")
        else:
            lines.append(f"{i}. {t['when']} ‚Äî {t['text']}")
    await update.message.reply_text("\n".join(lines))

async def affairs_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä: /affairs_delete 2")
        return
    try:
        n = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    tasks_sorted = sorted(user_tasks(uid), key=lambda t: (t["type"] != "once", t.get("when","9999")))
    if not (1 <= n <= len(tasks_sorted)):
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return

    task = tasks_sorted[n-1]
    job_id = task["job_id"]
    # –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å
    job = context.job_queue.get_jobs_by_name(job_id)
    for j in job:
        j.schedule_removal()
    removed = remove_task(uid, job_id)
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–æ ‚úÖ" if removed else "–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –∑–∞–¥–∞—á—É.")

async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE   # –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ –Ω–∞–≤–µ—Ä—Ö
    uid = update.effective_user.id
    if uid != ADMIN_ID:
        return
    MAINTENANCE = True
    await update.message.reply_text("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")


async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE   # —Ç–æ–∂–µ –Ω–∞–≤–µ—Ä—Ö
    uid = update.effective_user.id
    if uid != ADMIN_ID:
        return
    MAINTENANCE = False
    await update.message.reply_text("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

    # —É–≤–µ–¥–æ–º–∏–º –æ–∂–∏–¥–∞–≤—à–∏—Ö
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        try:
            await context.bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.")
        except Exception:
            pass
            
# ---------- –ì–æ–ª–æ—Å–æ–≤—ã–µ ----------
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USERS:
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(update.effective_chat.id)
        await update.message.reply_text("üü° –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –°–æ–æ–±—â–∏–º, –∫–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    if not OPENAI_API_KEY:
        await update.message.reply_text("–î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –∑–∞–¥–∞–Ω OPENAI_API_KEY.")
        return

    try:
        file = await update.message.voice.get_file()
        path = f"/tmp/{uuid.uuid4()}.oga"
        await file.download_to_drive(path)

        # OpenAI (whisper-1)
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        with open(path, "rb") as f:
            tr = client.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                response_format="text",
                language="ru"
            )
        text = tr.strip()
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ.")
            return
        # –ø—Ä–æ–≥–æ–Ω—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        update.message.text = text
        await handle_key_or_text(update, context)
    except Exception as e:
        log.exception("voice error: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞/–∫–ª—é—á–µ–π ----------
async def handle_key_or_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1) –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –∫–ª—é—á
    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", msg) and msg in ACCESS_KEYS and msg not in USED_KEYS:
            USED_KEYS.add(msg)
            ALLOWED_USERS.add(uid)
            persist_users()
            await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            await update.message.reply_text(HELP_TEXT)
        else:
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # 2) —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await update.message.reply_text("üü° –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –ù–∞–ø–∏—à–µ–º, –∫–æ–≥–¥–∞ –±–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    # 3) –ø–∞—Ä—Å–∏–Ω–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    parsed = parse_text(msg)
    if not parsed:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Äî —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
            "‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
            "‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
            "‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
            "‚Äî 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç"
        )
        return

    jq = context.job_queue
    text = parsed["text"]
    job_id = f"job-{uuid.uuid4().hex}"

    if parsed["kind"] == "in":
        when = now_local() + parsed["delta"]
        await jq.run_once(
            remind_callback, when=when,
            data={"chat_id": chat_id, "text": text, "one_time": True},
            name=job_id
        )
        add_task(uid, {"type": "once", "when": when.strftime("%Y-%m-%d %H:%M"), "text": text, "job_id": job_id})
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {parsed['delta']} ‚Äî ¬´{text}¬ª.")
        return

    if parsed["kind"] in ("today", "tomorrow", "date"):
        when = parsed["dt"]
        await jq.run_once(
            remind_callback, when=when,
            data={"chat_id": chat_id, "text": text, "one_time": True},
            name=job_id
        )
        add_task(uid, {"type": "once", "when": when.strftime("%Y-%m-%d %H:%M"), "text": text, "job_id": job_id})
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{text}¬ª. (TZ: {TIMEZONE})")
        return

    if parsed["kind"] == "daily":
        t: dtime = parsed["t"]
        await jq.run_daily(
            remind_callback, time=t,
            data={"chat_id": chat_id, "text": text, "one_time": False},
            name=job_id
        )
        add_task(uid, {"type": "daily", "time": t.strftime('%H:%M'), "text": text, "job_id": job_id})
        await update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {t.strftime('%H:%M')} ‚Äî ¬´{text}¬ª.")
        return

# ---------- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
def build_application() -> Application:
    token = os.getenv("BOT_TOKEN", "").strip()
    if not token:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    app = Application.builder().token(token).post_init(set_commands).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("affairs", affairs))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off))

    app.add_handler(MessageHandler(filters.VOICE & ~filters.COMMAND, handle_voice))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_key_or_text))

    return app

# ---------- Webhook ----------
def main():
    app = build_application()

    # aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health-check
    aio = web.Application()
    async def health(_: web.Request):
        return web.Response(text="OK")
    aio.router.add_get("/", health)
    aio.router.add_get("/healthz", health)

    port = int(os.getenv("PORT", "10000"))
    public_url = os.getenv("WEBHOOK_URL", "").rstrip("/")
    if not public_url:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL (https://<—Ç–≤–æ–π-—Å–µ—Ä–≤–∏—Å>.onrender.com)")

    # Telegram –±—É–¥–µ—Ç –±–∏—Ç—å –≤ –∫–æ—Ä–µ–Ω—å "/", Render —Ç–µ—Ä–º–∏–Ω–∏—Ä—É–µ—Ç TLS ‚ÜîÔ∏è –Ω–∞—à HTTP
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path="",                        # —Å–ª—É—à–∞–µ–º POST –Ω–∞ /
        webhook_url=public_url,             # –≤–Ω–µ—à–Ω–∏–π https-URL —Å–µ—Ä–≤–∏—Å–∞
        web_app=aio,
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == "__main__":
    main()
