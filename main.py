import os
import re
import sqlite3
import logging
import secrets
import string
import asyncio
from dataclasses import dataclass
from datetime import datetime, timedelta, time, timezone
from typing import Optional, List, Tuple, Dict

import pytz
from aiohttp import web
from telegram import (
    Update,
    BotCommand,
)
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler,
    ContextTypes, filters, JobQueue,
)

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)

BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0"))
TZ_NAME = os.environ.get("TZ", "Europe/Kaliningrad").strip() or "Europe/Kaliningrad"
TZ = pytz.timezone(TZ_NAME)

PORT = int(os.environ.get("PORT", "10000"))

DB_PATH = "bot.db"

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª.\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ–µ—Å—Ç—å / —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 09:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n\n"
    "‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´–∑–∞ N –º–∏–Ω—É—Ç¬ª: –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º—è –Ω–∞ N –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ."
)

# -------------------- –•–†–ê–ù–ò–õ–ö–ò --------------------
def db() -> sqlite3.Connection:
    return sqlite3.connect(DB_PATH, check_same_thread=False)

def init_db():
    with db() as c:
        c.execute("""
        CREATE TABLE IF NOT EXISTS auth(
            chat_id INTEGER PRIMARY KEY
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS tasks(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            type TEXT NOT NULL,           -- once/daily/monthly
            run_at_utc TEXT,              -- ISO
            hour INTEGER, minute INTEGER,
            day_of_month INTEGER,
            active INTEGER DEFAULT 1
        )""")
        c.execute("""
        CREATE TABLE IF NOT EXISTS keys(
            key TEXT PRIMARY KEY,
            issued INTEGER DEFAULT 0,   -- –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω—É, –Ω–æ –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω
            used_by INTEGER,           -- chat_id, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            used_ts TEXT               -- ISO when used
        )""")

# -------------------- –ö–õ–Æ–ß–ò --------------------
ALPH = string.ascii_letters + string.digits

def gen_key() -> str:
    return "".join(secrets.choice(ALPH) for _ in range(5))

def ensure_keys_pool(n: int = 1000):
    with db() as c:
        cur = c.execute("SELECT COUNT(*) FROM keys WHERE used_by IS NULL")
        free_now = cur.fetchone()[0]
        need = max(0, n - free_now)
        if need > 0:
            rows = [(gen_key(), 0, None, None) for _ in range(need)]
            # –∏–∑–±–µ–≥–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–π: –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π —Å –∏–≥–Ω–æ—Ä–æ–º
            for k, i, u, t in rows:
                c.execute("INSERT OR IGNORE INTO keys(key,issued,used_by,used_ts) VALUES(?,?,?,?)",
                          (k, i, u, t))
            logging.info("Keys ensured: +%s (free now will be >= %s)", need, n)

def stats_keys() -> Tuple[int,int,int]:
    with db() as c:
        free_ = c.execute("SELECT COUNT(*) FROM keys WHERE used_by IS NULL").fetchone()[0]
        used_ = c.execute("SELECT COUNT(*) FROM keys WHERE used_by IS NOT NULL").fetchone()[0]
        issued_ = c.execute("SELECT COUNT(*) FROM keys WHERE issued=1 AND used_by IS NULL").fetchone()[0]
    return free_, used_, issued_

def issue_random_key() -> Optional[str]:
    with db() as c:
        row = c.execute(
            "SELECT key FROM keys WHERE issued=0 AND used_by IS NULL LIMIT 1"
        ).fetchone()
        if not row:
            return None
        k = row[0]
        c.execute("UPDATE keys SET issued=1 WHERE key=?", (k,))
        return k

def use_key(chat_id: int, key: str) -> bool:
    with db() as c:
        row = c.execute(
            "SELECT key, issued, used_by FROM keys WHERE key=?", (key,)
        ).fetchone()
        if not row:
            return False
        _, issued, used_by = row
        if used_by is not None:
            return False
        # —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
        if issued != 1:
            return False
        c.execute(
            "UPDATE keys SET used_by=?, used_ts=? WHERE key=?",
            (chat_id, datetime.now(timezone.utc).isoformat(), key)
        )
        c.execute("INSERT OR IGNORE INTO auth(chat_id) VALUES(?)", (chat_id,))
        return True

def is_auth(chat_id: int) -> bool:
    with db() as c:
        row = c.execute("SELECT 1 FROM auth WHERE chat_id=?", (chat_id,)).fetchone()
        return bool(row)

# -------------------- –í–°–ü–û–ú–û–ì–ê–¢–û–†–´ –í–†–ï–ú–ï–ù–ò --------------------
def now_tz() -> datetime:
    return datetime.now(TZ)

def to_utc(dt_local: datetime) -> datetime:
    if dt_local.tzinfo is None:
        dt_local = TZ.localize(dt_local)
    return dt_local.astimezone(timezone.utc)

def fmt(dt_utc: datetime) -> str:
    return dt_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

# -------------------- JOBS --------------------
@dataclass
class Task:
    id: int
    chat_id: int
    title: str
    type: str
    run_at_utc: Optional[str]
    hour: Optional[int]
    minute: Optional[int]
    day_of_month: Optional[int]
    active: int

def get_task(task_id:int) -> Optional[Task]:
    with db() as c:
        r = c.execute("SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month,active FROM tasks WHERE id=?",
                      (task_id,)).fetchone()
    return Task(*r) if r else None

async def job_once(ctx: ContextTypes.DEFAULT_TYPE):
    t = get_task(ctx.job.data["id"])
    if not t or not t.active:
        return
    await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{t.title}¬ª")
    # –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é
    with db() as c:
        c.execute("UPDATE tasks SET active=0 WHERE id=?", (t.id,))

async def job_daily(ctx: ContextTypes.DEFAULT_TYPE):
    t = get_task(ctx.job.data["id"])
    if t and t.active:
        await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{t.title}¬ª")

async def job_monthly(ctx: ContextTypes.DEFAULT_TYPE):
    t = get_task(ctx.job.data["id"])
    if t and t.active and now_tz().day == (t.day_of_month or 1):
        await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{t.title}¬ª")

async def schedule(app: Application, t: Task):
    jq = app.job_queue
    # –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∂–æ–±—ã —Å —Ç–∞–∫–∏–º id
    for j in jq.get_jobs_by_name(f"task_{t.id}"):
        j.schedule_removal()

    if t.type == "once" and t.run_at_utc:
        run_at_utc = datetime.fromisoformat(t.run_at_utc)
        if run_at_utc > datetime.now(timezone.utc):
            jq.run_once(
                job_once,
                when=run_at_utc,
                data={"id": t.id},
                name=f"task_{t.id}",
            )
    elif t.type == "daily":
        jq.run_daily(
            job_daily,
            time=time(hour=t.hour or 0, minute=t.minute or 0, tzinfo=TZ),
            data={"id": t.id},
            name=f"task_{t.id}",
        )
    elif t.type == "monthly":
        jq.run_daily(
            job_monthly,
            time=time(hour=t.hour or 0, minute=t.minute or 0, tzinfo=TZ),
            data={"id": t.id},
            name=f"task_{t.id}",
        )

async def reschedule_all(app: Application):
    with db() as c:
        rows = c.execute(
            "SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month,active "
            "FROM tasks WHERE active=1"
        ).fetchall()
    for row in rows:
        await schedule(app, Task(*row))

# -------------------- –ü–ê–†–°–ï–† –¢–ï–ö–°–¢–ê --------------------
months = {
    "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
    "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12
}

def parse_task(text:str) -> Optional[Tuple[str, str, datetime, Optional[int], Optional[int], Optional[int]]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (type, title, run_at_local, hour, minute, day_of_month)
    type: once/daily/monthly
    """
    t = text.lower().strip()

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥/—á–∞—Å–æ–≤
    m = re.async def maintenance_on_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE["on"] = True
    await update.message.reply_text("–¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE["on"] = False
    await update.message.reply_text("–¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# --- –∞–¥–º–∏–Ω: –∫–ª—é—á–∏ ---
async def issue_key_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    k = issue_random_key()
    if not k:
        await update.message.reply_text("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ—Ç.")
        return
    await update.message.reply_text(f"–¢–≤–æ–π –∫–ª—é—á: `{k}`", parse_mode="Markdown")

async def keys_left_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    free_, used_, issued_ = stats_keys()
    await update.message.reply_text(f"–°–≤–æ–±–æ–¥–Ω–æ: {free_}\n–í—ã–¥–∞–Ω–æ (–∂–¥—É—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏): {issued_}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_}")

async def keys_free_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    free_, _, _ = stats_keys()
    await update.message.reply_text(str(free_))

async def keys_used_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    _, used_, _ = stats_keys()
    await update.message.reply_text(str(used_))

async def keys_reset_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    # –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–ª–∞ (–æ–ø–∞—Å–Ω–æ –≤ –ø—Ä–æ–¥–µ; –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –¥–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ)
    ensure_keys_pool(1000)
    await update.message.reply_text("–ü—É–ª –∫–ª—é—á–µ–π –ø–æ–ø–æ–ª–Ω–µ–Ω –¥–æ 1000 —Å–≤–æ–±–æ–¥–Ω—ã—Ö.")

# --- —Ç–µ–∫—Å—Ç: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è + –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª ---
async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat.id
    text = (update.message.text or "").strip()

    # –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE["on"] and update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ò–¥—É—Ç —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if not is_auth(chat):
        if use_key(chat, text):
            await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç.")
            await update.message.reply_text(WELCOME_TEXT)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º: "affairs delete 3" (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–æ–º–∞–Ω–¥–µ)
    m = re.fullmatch(r"(?i)\s*affairs\s*delete\s+(\d+)\s*", text)
    if m:
        idx = int(m.group(1))
        with db() as c:
            ids = [r[0] for r in c.execute("SELECT id FROM tasks WHERE chat_id=? AND active=1 ORDER BY id", (chat,)).fetchall()]
        if not ids or idx<1 or idx>len(ids):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π /affairs.")
            return
        tid = ids[idx-1]
        with db() as c:
            c.execute("UPDATE tasks SET active=0 WHERE id=?", (tid,))
        for j in ctx.application.job_queue.get_jobs_by_name(f"task_{tid}"):
            j.schedule_removal()
        await update.message.reply_text("–£–¥–∞–ª–µ–Ω–æ.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    parsed = parse_task(text)
    if not parsed:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä: ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª.")
        return

    typ, title, run_local, hh, mm, dom = parsed
    run_at_utc = None
    hour = mmnt = daym = None
    if typ == "once":
        run_at_utc = to_utc(run_local).isoformat()
    elif typ == "daily":
        hour, mmnt = hh, mm
    else:
        hour, mmnt, daym = hh, mm, dom

    with db() as c:
        c.execute(
            "INSERT INTO tasks(chat_id,title,type,run_at_utc,hour,minute,day_of_month,active) VALUES(?,?,?,?,?,?,?,1)",
            (chat, title, typ, run_at_utc, hour, mmnt, daym)
        )
        tid = c.execute("SELECT last_insert_rowid()").fetchone()[0]

    t = get_task(tid)
    try:


await schedule(ctx.application, t)
        if t.type == "once":
            await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî {fmt(datetime.fromisoformat(t.run_at_utc))}")
        elif t.type == "daily":
            await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}")
        else:
            await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü, {t.day_of_month}-–≥–æ –≤ {t.hour:02d}:{t.minute:02d}")
    except Exception:
        logging.exception("schedule failed")
        await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á—É —Å–æ—Ö—Ä–∞–Ω–∏–ª, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
        # –∑–∞–ø–∞—Å–Ω–æ–π —Ä–µ—Å–∫–µ–π–¥–∂—É–ª —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        ctx.application.job_queue.run_once(lambda c: asyncio.create_task(reschedule_all(ctx.application)), when=timedelta(minutes=1))

# -------------------- KEEP-ALIVE HTTP --------------------
async def handle_root(request):
    return web.Response(text="alive")

async def run_web():
    app = web.Application()
    app.add_routes([web.get('/', handle_root)])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info("HTTP keep-alive running on port %s", PORT)

# -------------------- –°–¢–ê–†–¢ --------------------
async def on_startup(app: Application):
    # —É–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π webhook –Ω–∞ –≤—Å—è–∫–∏–π
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        logging.warning("delete_webhook failed: %s", e)
    try:
        await reschedule_all(app)
    except Exception:
        logging.exception("Reschedule failed")

async def set_commands(app: Application):
    cmds = [
        BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand("maintenance_on", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤–∫–ª—é—á–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("maintenance_off", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤—ã–∫–ª—é—á–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("issue_key", "–í—ã–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("keys_left", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("keys_free", "–°–≤–æ–±–æ–¥–Ω—ã–µ –∫–ª—é—á–∏ (—á–∏—Å–ª–æ, —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("keys_used", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("keys_reset", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ø—É–ª –∫–ª—é—á–µ–π –¥–æ 1000"),
    ]
    await app.bot.set_my_commands(cmds)

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty. Set it in Render ‚Üí Environment.")
    init_db()
    ensure_keys_pool(1000)

    # –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–æ–≤
    asyncio.create_task(run_web())

    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("affairs", affairs_cmd))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete_cmd))

    app.add_handler(CommandHandler("maintenance_on", maintenance_on_cmd))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off_cmd))

    app.add_handler(CommandHandler("issue_key", issue_key_cmd))
    app.add_handler(CommandHandler("keys_left", keys_left_cmd))
    app.add_handler(CommandHandler("keys_free", keys_free_cmd))
    app.add_handler(CommandHandler("keys_used", keys_used_cmd))
    app.add_handler(CommandHandler("keys_reset", keys_reset_cmd))

    # —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.post_init = on_startup

    # –∑–∞–ø—É—Å–∫–∞–µ–º
    await set_commands(app)
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    asyncio.run(main())
