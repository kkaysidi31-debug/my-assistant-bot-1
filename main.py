import os
import threading
from datetime import datetime, timedelta
import pytz
from flask import Flask, request
import telebot

# ======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ======================
BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
ADMIN_ID = 963586834  # —Ç–≤–æ–π ID
TZ = pytz.timezone("Europe/Kaliningrad")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# ======================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ
# ======================
TASKS = {}
MAINTENANCE = False
PENDING_CHATS = set()


# ======================
# –§—É–Ω–∫—Ü–∏–∏
# ======================
def set_task(uid, text, delay_sec):
    run_at = datetime.now(TZ) + timedelta(seconds=delay_sec)

    def job():
        try:
            bot.send_message(uid, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)

    t = threading.Timer(delay_sec, job)
    t.start()

    task_id = f"{uid}_{int(run_at.timestamp())}"
    TASKS[task_id] = {"uid": uid, "text": text, "time": run_at}
    return task_id, run_at


def remove_task(task_id):
    return TASKS.pop(task_id, None)


# ======================
# –ö–æ–º–∞–Ω–¥—ã
# ======================
@bot.message_handler(commands=["start"])
def start(message):
    bot.reply_to(message,
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 300 —Å–µ–∫—É–Ω–¥ —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω\n"
        "‚Ä¢ /delete ID ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "‚Ä¢ /maintenance_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)\n"
        "‚Ä¢ /maintenance_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã"
    )


@bot.message_handler(commands=["delete"])
def delete(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "–£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    task_id = parts[1]
    removed = remove_task(task_id)
    if removed:
        bot.reply_to(message, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
    else:
        bot.reply_to(message, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")


@bot.message_handler(commands=["maintenance_on"])
def maintenance_on(message):
    global MAINTENANCE
    if message.from_user.id != ADMIN_ID:
        return
    MAINTENANCE = True
    bot.reply_to(message, "üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")


@bot.message_handler(commands=["maintenance_off"])
def maintenance_off(message):
    global MAINTENANCE
    if message.from_user.id != ADMIN_ID:
        return
    MAINTENANCE = False
    bot.reply_to(message, "üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")


# ======================
# –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
# ======================
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    global MAINTENANCE
    uid = message.from_user.id
    text = message.text.strip()

    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(uid)
        bot.reply_to(message, "‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if text.startswith("—á–µ—Ä–µ–∑"):
        try:
            parts = text.split()
            delay = int(parts[1])  # —Å–µ–∫—É–Ω–¥—ã
            task_text = " ".join(parts[2:])
            task_id, run_at = set_task(uid, task_text, delay)
            bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (ID: {task_id}), –Ω–∞–ø–æ–º–Ω—é –≤ {run_at.strftime('%H:%M:%S')}")
        except Exception:
            bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 60 –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã")
    else:
        bot.reply_to(message, "–ü—Ä–∏–º–µ—Ä: '—á–µ—Ä–µ–∑ 300 —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω'")


# ======================
# Flask Webhook
# ======================
@app.route("/" + BOT_TOKEN, methods=["POST"])
def getMessage():
    json_str = request.get_data().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200


@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url="https://YOUR_RENDER_URL.onrender.com/" + BOT_TOKEN)
    return "Webhook set", 200


# ======================
# –ó–∞–ø—É—Å–∫
# ======================
if name == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
