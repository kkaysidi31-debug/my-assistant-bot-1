import asyncio
import logging
import os
import re
import sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta, time as dtime, timezone
from typing import List, Optional, Tuple, Set
from zoneinfo import ZoneInfo

from aiohttp import web
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)

# =========================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")

ADMIN_ID = 963586834  # —Ç–≤–æ–π Telegram ID (–∞–¥–º–∏–Ω)
TZ = ZoneInfo("Europe/Kaliningrad")

DB_PATH = os.getenv("DB_PATH", "data.sqlite3")

# –î–ª—è UptimeRobot/Render free ‚Äî –ø–æ–¥–Ω–∏–º–µ–º health-—Å–µ—Ä–≤–µ—Ä
PORT = int(os.getenv("PORT", "10000"))  # Render –æ—Ç–¥–∞—ë—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, "
    "—á—Ç–æ–±—ã —Ç—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–ª—Å—è –Ω–∞ —Å–∞–º–æ–º –≥–ª–∞–≤–Ω–æ–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª.\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ–µ—Å—Ç—å / —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 09:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n"
    "‚Ä¢ 30 —á–∏—Å–ª–∞ –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n\n"
    "‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´–∑–∞ N –º–∏–Ω—É—Ç¬ª: –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º—è –Ω–∞ N –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ."
)

PRIVATE_PROMPT = "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123."

# =========================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î
# =========================
def db() -> sqlite3.Connection:
    con = sqlite3.connect(DB_PATH, check_same_thread=False)
    con.row_factory = sqlite3.Row
    return con

def init_db():
    with db() as con:
        con.execute("""
            CREATE TABLE IF NOT EXISTS tasks(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                type TEXT NOT NULL,            -- once | daily | monthly
                run_at_utc TEXT,               -- ISO –¥–ª—è once
                hour INTEGER, minute INTEGER,  -- –¥–ª—è daily/monthly
                day_of_month INTEGER           -- –¥–ª—è monthly
            );
        """)
        con.execute("""
            CREATE TABLE IF NOT EXISTS keys(
                key TEXT PRIMARY KEY,
                chat_id INTEGER,
                used_at TEXT
            );
        """)
        con.execute("""
            CREATE TABLE IF NOT EXISTS user_state(
                chat_id INTEGER PRIMARY KEY,
                authed INTEGER NOT NULL DEFAULT 0
            );
        """)
        con.commit()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VIP001..VIP100
    with db() as con:
        for i in range(1, 101):
            k = f"VIP{i:03d}"
            con.execute("INSERT OR IGNORE INTO keys(key, chat_id, used_at) VALUES(?, NULL, NULL)", (k,))
        con.commit()

def set_authed(chat_id: int, ok: bool):
    with db() as con:
        con.execute("INSERT INTO user_state(chat_id, authed) VALUES(?, ?) ON CONFLICT(chat_id) DO UPDATE SET authed=excluded.authed",
                    (chat_id, 1 if ok else 0))
        con.commit()

def is_auth(chat_id: int) -> bool:
    if chat_id == ADMIN_ID:
        return True
    with db() as con:
        r = con.execute("SELECT authed FROM user_state WHERE chat_id=?", (chat_id,)).fetchone()
        return bool(r and r["authed"])

def try_use_key(chat_id: int, text: str) -> bool:
    k = text.strip().upper()
    if not re.fullmatch(r"VIP\d{3}", k):
        return False
    with db() as con:
        row = con.execute("SELECT key, chat_id FROM keys WHERE key=?", (k,)).fetchone()
        if not row:
            return False
        # –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –∂–µ —á–∞—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        if row["chat_id"] == chat_id:
            set_authed(chat_id, True)
            return True
        # –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –∑–∞–Ω—è—Ç ‚Äî –Ω–∞–∑–Ω–∞—á–∞–µ–º
        if row["chat_id"] is None:
            con.execute("UPDATE keys SET chat_id=?, used_at=? WHERE key=?", (chat_id, datetime.utcnow().isoformat(), k))
            con.commit()
            set_authed(chat_id, True)
            return True
        # –∫–ª—é—á –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º
        return False

def keys_left() -> int:
    with db() as con:
        r = con.execute("SELECT COUNT(*) AS c FROM keys WHERE chat_id IS NULL").fetchone()
        return r["c"] if r else 0

# =========================
# –ú–û–î–ï–õ–¨/–•–ï–õ–ü–ï–†–´
# =========================
@dataclass
class Task:
    id: int
    chat_id: int
    title: str
    type: str
    run_at_utc: Optional[datetime]
    hour: Optional[int]
    minute: Optional[int]
    day_of_month: Optional[int]

def row_to_task(row: sqlite3.Row) -> Task:
    run = datetime.fromisoformat(row["run_at_utc"]).replace(tzinfo=timezone.utc) if row["run_at_utc"] else None
    return Task(
        id=row["id"], chat_id=row["chat_id"], title=row["title"], type=row["type"],
        run_at_utc=run, hour=row["hour"], minute=row["minute"], day_of_month=row["day_of_month"]
    )

def add_task(chat_id: int, title: str, type_: str,
             run_at_utc: Optional[datetime],
             h: Optional[int], m: Optional[int], d: Optional[int]) -> int:
    with db() as con:
        cur = con.execute(
            "INSERT INTO tasks(chat_id,title,type,run_at_utc,hour,minute,day_of_month) VALUES(?,?,?,?,?,?,?)",
            (chat_id, title, type_, run_at_utc.isoformat() if run_at_utc else None, h, m, d))
        con.commit()
        return cur.lastrowid

def get_task(tid: int) -> Optional[Task]:
    with db() as con:
        row = con.execute("SELECT * FROM tasks WHERE id=?", (tid,)).fetchone()
        return row_to_task(row) if row else None

def delete_task(tid: int) -> bool:
    with db() as con:
        cur = con.execute("DELETE FROM tasks WHERE id=?", (tid,))
        con.commit()
        return cur.rowcount > 0

def list_active_tasks(chat_id: int) -> List[Task]:
    with db() as con:
        rows = con.execute("SELECT * FROM tasks WHERE chat_id=?", (chat_id,)).fetchall()
        return [row_to_task(r) for r in rows]

# =========================
# –ü–ê–†–°–ò–ù–ì –ö–û–ú–ê–ù–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =========================
@dataclass
class ParsedTask:
    type: str                 # once | daily | monthly
    title: str
    run_utc: Optional[datetime]  # –¥–ª—è once
    h: Optional[int]
    m: Optional[int]
    d: Optional[int]          # –¥–ª—è monthly

# –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ ¬´—á–µ—Ä–µ–∑ N ...¬ª
RELATIVE_RE = re.compile(
    r"(?i)^\s*—á–µ—Ä–µ–∑\s+(\d{1,4})\s*(—Å–µ–∫—É–Ω–¥(?:—ã|—É)?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç(?:—ã|—É)?|–º–∏–Ω|m|—á–∞—Å(?:–∞|–æ–≤)?|—á)\s+(.+?)\s*$"
)
TODAY_RE = re.compile(r"(?i)^\s*—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+?)\s*$")
TOMORROW_RE = re.compile(r"(?i)^\s*–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+?)\s*$")
DAILY_RE = re.compile(r"(?i)^\s*–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+?)\s*$")
MONTHLY_RE = re.compile(r"(?i)^\s*(\d{1,2})\s*(?:—á–∏—Å–ª[–æ–∞]?)?\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+?)\s*$")

def parse_user_text_to_task(text: str, now_tz: datetime) -> Optional[ParsedTask]:
    txt = text.strip()

    m = RELATIVE_RE.match(txt)
    if m:
        amount = int(m.group(1))
        unit = m.group(2).lower()
        title = m.group(3).strip()
        if "—Å–µ–∫" in unit or unit in ("—Å",):
            delta = timedelta(seconds=amount)
        elif "–º–∏–Ω" in unit or unit == "m":
            delta = timedelta(minutes=amount)
        elif "—á–∞—Å" in unit or unit == "—á":
            delta = timedelta(hours=amount)
        else:
            delta = timedelta(minutes=amount)
        run_local = now_tz + delta
        run_utc = run_local.astimezone(timezone.utc)
        return ParsedTask("once", title, run_utc, None, None, None)

    m = TODAY_RE.match(txt)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        run_local = now_tz.replace(hour=h, minute=mi, second=0, microsecond=0)
        if run_local <= now_tz:
            run_local = run_local + timedelta(days=1)  # –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    m = TOMORROW_RE.match(txt)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        run_local = (now_tz + timedelta(days=1)).replace(hour=h, minute=mi, second=0, microsecond=0)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    m = DAILY_RE.match(txt)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        return ParsedTask("daily", title, None, h, mi, None)

    m = MONTHLY_RE.match(txt)
    if m:
        d, h, mi, title = int(m.group(1)), int(m.group(2)), int(m.group(3)), m.group(4).strip()
        return ParsedTask("monthly", title, None, h, mi, d)

    return None

# =========================
# JOB QUEUE / –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï
# =========================
async def job_once(ctx: ContextTypes.DEFAULT_TYPE):
    try:
        tid = ctx.job.data["id"]
        t = get_task(tid)
        if not t:
            return
        await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{t.title}¬ª")
        # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if t.type == "once":
            delete_task(t.id)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ job_once: %s", e)

async def schedule_task(app: Application, t: Task):
    jq = app.job_queue
    # —É–±–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ job'—ã —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
    name = f"task_{t.id}"
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

    now_utc = datetime.now(timezone.utc)

    if t.type == "once":
        run = t.run_at_utc or now_utc + timedelta(seconds=2)
        if run <= now_utc:
            run = now_utc + timedelta(seconds=2)
        jq.run_once(job_once, when=run, name=name, data={"id": t.id}, chat_id=t.chat_id)
    elif t.type == "daily":
        fire = dtime(hour=t.hour, minute=t.minute, tzinfo=TZ)
        jq.run_daily(job_once, time=fire, name=name, data={"id": t.id}, chat_id=t.chat_id)
    elif t.type == "monthly":
        fire = dtime(hour=t.hour, minute=t.minute, tzinfo=TZ)

        async def monthly(ctx: ContextTypes.DEFAULT_TYPE):
            try:
                tid = ctx.job.data["id"]
                tt = get_task(tid)
                if not tt:
                    return
                if datetime.now(TZ).day == tt.day_of_month:
                    await ctx.bot.send_message(tt.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{tt.title}¬ª")
            except Exception as e:
                logging.exception("–û—à–∏–±–∫–∞ –≤ monthly: %s", e)

        jq.run_daily(monthly, time=fire, name=name, data={"id": t.id}, chat_id=t.chat_id)

async def reschedule_all(app: Application):
    with db() as con:
        rows = con.execute("SELECT * FROM tasks").fetchall()
        for r in rows:
            t = row_to_task(r)
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ
            if t.type == "once" and t.run_at_utc and t.run_at_utc < datetime.now(timezone.utc) - timedelta(minutes=5):
                continue
            await schedule_task(app, t)

# =========================
# –¢–ï–•–†–ê–ë–û–¢–´
# =========================
MAINTENANCE = False
MAINTENANCE_WAITERS: Set[int] = set()

def guard_maintenance(update: Update) -> bool:
    global MAINTENANCE
    if not MAINTENANCE:
        return False
    chat_id = update.effective_chat.id
    MAINTENANCE_WAITERS.add(chat_id)
    return True

# =========================
# –£–¢–ò–õ–ò–¢–´
# =========================
def fmt(dt_utc: datetime) -> str:
    return dt_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

# =========================
# –ö–û–ú–ê–ù–î–´
# =========================
LAST_LIST_INDEX: dict[int, List[int]] = {}

async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if guard_maintenance(update):
        await update.message.reply_text("‚ö† –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    await update.message.reply_text(PRIVATE_PROMPT)

async def affairs_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if guard_maintenance(update):
        await update.message.reply_text("‚ö† –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    chat = update.effective_chat.id
    if not is_auth(chat):
        await update.message.reply_text(PRIVATE_PROMPT)
        return
    tasks = list_active_tasks(chat)
    if not tasks:
        await update.message.reply_text("–¢–≤–æ–∏—Ö –¥–µ–ª –ø–æ–∫–∞ –Ω–µ—Ç.")
        LAST_LIST_INDEX[chat] = []
        return

    now_local = datetime.now(TZ)

    def next_run(t: Task) -> datetime:
        if t.type == "once" and t.run_at_utc:
            return t.run_at_utc.astimezone(TZ)
        if t.type == "daily":
            cand = now_local.replace(hour=t.hour, minute=t.minute, second=0, microsecond=0)
            if cand <= now_local:
                cand += timedelta(days=1)
            return cand
        if t.type == "monthly":
            d = t.day_of_month or 1
            cand = now_local.replace(day=min(d, 28), hour=t.hour or 0, minute=t.minute or 0, second=0, microsecond=0)
            # –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å (28..31)
            while True:
                try:
                    cand = cand.replace(day=d)
                    break
                except ValueError:
                    d -= 1
            if cand <= now_local:
                # —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                month = cand.month + 1
                year = cand.year + (1 if month > 12 else 0)
                month = 1 if month > 12 else month
                nd = min(t.day_of_month or 1, 28)
                cand = cand.replace(year=year, month=month, day=nd)
                while True:
                    try:
                        cand = cand.replace(day=t.day_of_month or nd)
                        break
                    except ValueError:
                        cand = cand.replace(day=cand.day - 1)
            return cand
        return now_local

    tasks_sorted = sorted(tasks, key=next_run)[:20]
    LAST_LIST_INDEX[chat] = [t.id for t in tasks_sorted]
    lines = []
    for i, t in enumerate(tasks_sorted, 1):
        if t.type == "once" and t.run_at_utc:
            when = fmt(t.run_at_utc)
        elif t.type == "daily":
            when = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}"
        else:
            when = f"{t.day_of_month} —á–∏—Å–ª–∞ –≤ {t.hour:02d}:{t.minute:02d}"
        lines.append(f"{i}. {t.title} ‚Äî {when}")
    await update.message.reply_text("–¢–≤–æ–∏ –¥–µ–ª–∞:\n" + "\n".join(lines))

# –ê–¥–º–∏–Ω: —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã ON/OFF
async def maintenance_on_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    global MAINTENANCE
    MAINTENANCE = True
    await update.message.reply_text("‚ö† –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.")

async def maintenance_off_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    global MAINTENANCE
    MAINTENANCE = False
    # –æ–ø–æ–≤–µ—Å—Ç–∏–º —Ç–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
    for cid in list(MAINTENANCE_WAITERS):
        try:
            await ctx.bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        except Exception:
            pass
    MAINTENANCE_WAITERS.clear()
    await update.message.reply_text("–¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# –ê–¥–º–∏–Ω: —Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
async def keys_left_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    await update.message.reply_text(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: {keys_left()}")

# =========================
# –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
# =========================
async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if guard_maintenance(update):
        await update.message.reply_text("‚ö† –£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    chat_id = update.effective_chat.id
    text = (update.message.text or "").strip()

    # 1) –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –∫–ª—é—á–∞
    if re.fullmatch(r"(?i)\s*vip\d{3}\s*", text):
        ok = try_use_key(chat_id, text)
        if ok:
            await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç.")
            await update.message.reply_text(WELCOME_TEXT)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        return

    # 2) –ï—Å–ª–∏ –µ—â—ë –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ—Å–∏–º –∫–ª—é—á
    if not is_auth(chat_id):
        await update.message.reply_text(PRIVATE_PROMPT)
        return

    # 3) –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É: "affairs delete 3"
    m = re.fullmatch(r"(?i)\s*affairs\s+delete\s+(\d+)\s*", text)
    if m:
        idx = int(m.group(1))
        ids = LAST_LIST_INDEX.get(chat_id)
        if not ids or idx < 1 or idx > len(ids):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π /affairs.")
            return
        tid = ids[idx - 1]
        t = get_task(tid)
        if t and delete_task(t.id):
            await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: ¬´{t.title}¬ª")
        else:
            await update.message.reply_text("–≠—Ç–æ –¥–µ–ª–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        return

    # 4) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    now_local = datetime.now(TZ)
    parsed = parse_user_text_to_task(text, now_local)
    if not parsed:
        await update.message.reply_text("‚ö† –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä: ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª.")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if parsed.type == "once":
        when_str = parsed.run_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")
        confirm = f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{parsed.title}¬ª ‚Äî {when_str}"
    elif parsed.type == "daily":
        confirm = f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {parsed.h:02d}:{parsed.m:02d} ‚Äî ¬´{parsed.title}¬ª"
    else:
        confirm = f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: –∫–∞–∂–¥–æ–µ {parsed.d} —á–∏—Å–ª–æ –≤ {parsed.h:02d}:{parsed.m:02d} ‚Äî ¬´{parsed.title}¬ª"
    await update.message.reply_text(confirm)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º
    tid = add_task(chat_id, parsed.title, parsed.type, parsed.run_utc, parsed.h, parsed.m, parsed.d)
    t = get_task(tid)
    await schedule_task(ctx.application, t)

# =========================
# AIOHTTP HEALTH SERVER (–¥–ª—è Render/UptimeRobot)
# =========================
async def start_health_server():
    app = web.Application()

    async def root(_):
        return web.Response(text="alive")

    async def health(_):
        return web.Response(text="OK")

    app.add_routes([web.get("/", root), web.get("/health", health)])

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    logging.info("Health server started on port %s", PORT)

# =========================
# MAIN
# =========================
async def on_startup(app: Application):
    # —Å–Ω–∏–º–∞–µ–º webhook, —á—Ç–æ–±—ã long-polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
    await app.bot.delete_webhook(drop_pending_updates=True)
    # –∑–∞–ø—É—Å–∫–∞–µ–º health-—Å–µ—Ä–≤–µ—Ä
    asyncio.create_task(start_health_server())
    # –ø–µ—Ä–µ—Åchedule –∑–∞–¥–∞—á –∏–∑ –ë–î
    await reschedule_all(app)
    logging.info("Bot started. Timezone=%s", TZ)

def main():
    logging.basicConfig(
        format="%(asctime)s %(levelname)s | %(message)s",
        level=logging.INFO
    )
    init_db()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("affairs", affairs_cmd))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on_cmd))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off_cmd))
    app.add_handler(CommandHandler("keys_left", keys_left_cmd))   # –∞–¥–º–∏–Ω

    # –¢–µ–∫—Å—Ç (–æ–¥–∏–Ω —Ä–∞–∑!)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.post_init = on_startup
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
