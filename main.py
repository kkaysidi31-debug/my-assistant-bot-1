import os
import re
import json
import logging
import threading
from datetime import datetime, timedelta
import pytz

from flask import Flask, Response
from telegram import Update, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("assistant-bot")

# ---------- –ö–û–ù–°–¢–ê–ù–¢–´ ----------
TIMEZONE = pytz.timezone("Europe/Kaliningrad")
ADMIN_ID = 963586834  # —Ç–≤–æ–π id
DB_PATH = "db.json"

# 100 –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∫–ª—é—á–µ–π VIP001..VIP100
ACCESS_KEYS = {f"VIP{n:03d}": None for n in range(1, 101)}  # None = –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
ALLOWED_USERS: set[int] = set()

# –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
MAINTENANCE = False
PENDING_CHATS: set[int] = set()  # –ß–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ —Å–æ–æ–±—â–∏—Ç—å ¬´–±–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç¬ª

# ---------- –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ë–ê–ó–´ ----------
def load_db():
    global ACCESS_KEYS, ALLOWED_USERS
    if not os.path.exists(DB_PATH):
        save_db()
        return
    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
        ACCESS_KEYS.update(data.get("keys", {}))
        ALLOWED_USERS.update(data.get("allowed", []))
    except Exception as e:
        log.warning("DB load warning: %s", e)


def save_db():
    try:
        with open(DB_PATH, "w", encoding="utf-8") as f:
            json.dump(
                {"keys": ACCESS_KEYS, "allowed": list(ALLOWED_USERS)},
                f,
                ensure_ascii=False,
                indent=2,
            )
    except Exception as e:
        log.error("DB save error: %s", e)


def now_local():
    return datetime.now(TIMEZONE)


def fmt_dt(dt: datetime) -> str:
    return dt.strftime("%Y-%m-%d %H:%M")


# ---------- –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ----------
async def post_init(application: Application):
    # –û–±—â–µ–µ –º–µ–Ω—é
    await application.bot.set_my_commands(
        [
            BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
            BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
            BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        ],
        scope=BotCommandScopeDefault(),
    )
    # –ê–¥–º–∏–Ω-–º–µ–Ω—é —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ
    await application.bot.set_my_commands(
        [
            BotCommand("maintenance_on", "–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"),
            BotCommand("maintenance_off", "–í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã"),
        ],
        scope=BotCommandScopeChat(chat_id=ADMIN_ID),
    )


# ---------- –¢–ï–ö–°–¢ –ü–û–î–°–ö–ê–ó–û–ö ----------
HELP_TEXT = (
    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
    "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00 (—Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:00)\n"
    "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
)

PRIVATE_PROMPT = "–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123."

# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USERS:
        await update.message.reply_text(PRIVATE_PROMPT)
        return
    await update.message.reply_text(HELP_TEXT)


async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE = True
    await update.message.reply_text("‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")


async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE, PENDING_CHATS
    if update.effective_user.id != ADMIN_ID:
        return
    MAINTENANCE = False
    await update.message.reply_text("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    # –£–≤–µ–¥–æ–º–∏—Ç—å –æ–∂–∏–¥–∞–≤—à–∏—Ö
    for chat_id in list(PENDING_CHATS):
        try:
            await context.bot.send_message(chat_id, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            except Exception as e:
            log.warning("Notify back error: %s", e)
    PENDING_CHATS.clear()


# ---------- –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï –ì–û–õ–û–°–ê (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        await update.message.reply_text("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ—Ç OPENAI_API_KEY).")
        return
    try:
        voice = update.message.voice or update.message.audio or update.message.document
        if not voice:
            return
        file = await context.bot.get_file(voice.file_id)
        local_path = f"/tmp/{voice.file_unique_id}.ogg"
        await file.download_to_drive(local_path)

        from openai import OpenAI
        client = OpenAI(api_key=api_key)
        with open(local_path, "rb") as f:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                language="ru",
            )
        text = transcript.text.strip()
        if not text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return

        fake_update = update
        fake_update.message.text = text
        await handle_key_or_text(fake_update, context)

    except Exception as e:
        log.exception("Voice error")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")


# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
async def job_remind(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    chat_id = data.get("chat_id")
    text = data.get("text", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    try:
        await context.bot.send_message(chat_id, f"‚è∞ {text}")
    except Exception as e:
        log.warning("Send remind error: %s", e)


def schedule_once(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, when_dt: datetime, text: str):
    when_dt = when_dt.astimezone(TIMEZONE)
    name = f"once-{chat_id}-{int(when_dt.timestamp())}-{abs(hash(text))%10000}"
    ctx.job_queue.run_once(
        job_remind,
        when=when_dt,
        name=name,
        data={"chat_id": chat_id, "text": f"{fmt_dt(when_dt)} ‚Äî ¬´{text}¬ª"},
        tzinfo=TIMEZONE,
    )
    return name


def schedule_in(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, delta: timedelta, text: str):
    when = now_local() + delta
    return schedule_once(ctx, chat_id, when, text)


def schedule_daily(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, hh: int, mm: int, text: str):
    name = f"daily-{chat_id}-{hh:02d}{mm:02d}-{abs(hash(text))%10000}"
    ctx.job_queue.run_daily(
        job_remind,
        time=datetime.now(TIMEZONE).replace(hour=hh, minute=mm, second=0, microsecond=0).timetz(),
        name=name,
        data={"chat_id": chat_id, "text": f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å {hh:02d}:{mm:02d} ‚Äî ¬´{text}¬ª"},
        tzinfo=TIMEZONE,
    )
    return name


# ---------- –°–ü–ò–°–û–ö –î–ï–õ ----------
def list_jobs_for_chat(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int):
    jobs = []
    for job in ctx.job_queue.jobs():
        data = job.data or {}
        if data.get("chat_id") == chat_id:
            when = job.next_t if hasattr(job, "next_t") else None
            when_str = fmt_dt(when.astimezone(TIMEZONE)) if when else data.get("text", "")
            jobs.append((job, when_str, data.get("text", "")))
    jobs.sort(key=lambda x: (x[0].next_t or datetime.max.replace(tzinfo=TIMEZONE)))
    return jobs


async def cmd_affairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USERS:
        await update.message.reply_text(PRIVATE_PROMPT)
        return
    jobs = list_jobs_for_chat(context, update.effective_chat.id)
    if not jobs:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç.")
        return
    lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:"]
    for i, (_, when_str, text) in enumerate(jobs, start=1):
        lines.append(f"{i}. {text}")
    await update.message.reply_text("\n".join(lines))


async def cmd_affairs_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.idif uid not in ALLOWED_USERS:
        await update.message.reply_text(PRIVATE_PROMPT)
        return
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –¥–µ–ª–∞: /affairs_delete 2")
        return
    try:
        idx = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    jobs = list_jobs_for_chat(context, update.effective_chat.id)
    if not jobs or not (1 <= idx <= len(jobs)):
        await update.message.reply_text("–ù–µ—Ç –¥–µ–ª–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return
    job = jobs[idx - 1][0]
    job.schedule_removal()
    await update.message.reply_text("‚úÖ –£–¥–∞–ª–∏–ª.")


# ---------- –ü–ê–†–°–ï–† ----------
RE_TIME = r"(?P<h>\d{1,2})[:.](?P<m>\d{2})"
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
}

def parse_text(t: str):
    txt = t.strip().lower()
    m = re.match(rf"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}(?:.*?)(?P<text>.+)$", txt)
    if m: return {"kind": "today", "h": int(m["h"]), "m": int(m["m"]), "text": m["text"].strip()}
    m = re.match(rf"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", txt)
    if m: return {"kind": "tomorrow", "h": int(m["h"]), "m": int(m["m"]), "text": m["text"].strip()}
    m = re.match(rf"–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", txt)
    if m: return {"kind": "daily", "h": int(m["h"]), "m": int(m["m"]), "text": m["text"].strip()}
    m = re.match(r"—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(?P<u>–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω|—á–∞—Å(?:–∞|–æ–≤)?|—á)\s+(?P<text>.+)$", txt)
    if m:
        n, u = int(m["n"]), m["u"]
        minutes = n if u.startswith("–º–∏–Ω") else n * 60
        return {"kind": "in", "minutes": minutes, "text": m["text"].strip()}
    m = re.match(rf"(?P<d>\d{{1,2}})\s+(?P<mon>[–∞-—è]+)(?:\s+–≤\s+{RE_TIME})?\s+(?P<text>.+)$", txt)
    if m and m["mon"] in MONTHS:
        h = int(m["h"]) if m.groupdict().get("h") else 9
        mm = int(m["m"]) if m.groupdict().get("m") else 0
        return {"kind": "date","day": int(m["d"]),"month": MONTHS[m["mon"]],"h": h,"m": mm,"text": m["text"].strip()}
    return None


# ---------- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ----------
async def handle_key_or_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", msg):
            if msg in ACCESS_KEYS and (ACCESS_KEYS[msg] in (None, uid)):
                ACCESS_KEYS[msg] = uid; ALLOWED_USERS.add(uid); save_db()
                await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                await update.message.reply_text(HELP_TEXT)
            else:
                await update.message.reply_text("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text(PRIVATE_PROMPT)
        return

    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await update.message.reply_text("‚ö†Ô∏è –°–µ–π—á–∞—Å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –ú—ã —É–≤–µ–¥–æ–º–∏–º, –∫–æ–≥–¥–∞ –±–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    parsed = parse_text(msg)
    if not parsed:
        await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç.")
        return

    kind, text = parsed["kind"], parsed["text"]

    if kind == "in":
        schedule_in(context, chat_id, timedelta(minutes=parsed["minutes"]), text)
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {parsed['minutes']} –º–∏–Ω ‚Äî ¬´{text}¬ª."); return
    if kind == "today":
        target = now_local().replace(hour=parsed["h"], minute=parsed["m"], second=0, microsecond=0)
        if target < now_local(): target += timedelta(days=1)
        schedule_once(context, chat_id, target, text)
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt_dt(target)} ‚Äî ¬´{text}¬ª."); return
    if kind == "tomorrow":
        base = now_local() + timedelta(days=1)
        target = base.replace(hour=parsed["h"], minute=parsed["m"], second=0, microsecond=0)
        schedule_once(context, chat_id, target, text)
        await update.message.reply_text(f"‚úÖ –û–∫, –∑–∞–≤—Ç—Ä–∞ {fmt_dt(target)} ‚Äî ¬´{text}¬ª."); return
    if kind == "daily":
        schedule_daily(context, chat_id, parsed["h"], parsed["m"], text)
        await update.message.reply_text(f"‚úÖ –û–∫, –∫–∞–∂–¥—ã–π –¥–µ–Ω—å {parsed['h']:02d}:{parsed['m']:02d} ‚Äî ¬´{text}¬ª."); return
    if kind == "date":
        year = now_local().year
        target = TIMEZONE.localize(datetime(year, parsed["month"], parsed["day"], parsed["h"], parsed["m"]))
        if target < now_local(): target = target.replace(year=year + 1)
        schedule_once(context, chat_id, target, text)
        await update.message.reply_text(f"‚úÖ –û–∫, {fmt_dt(target)} ‚Äî ¬´{text}¬ª."); return


# ---------- HTTP –ü–†–û–ë–ê ----------
def run_http_probe():
    app = Flask(__name__)
    @app.get("/") 
    def root(): return Response("ok", status=200)
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)


# ---------- –ó–ê–ü–£–°–ö ----------
def main():
    load_db()
    token = os.getenv("BOT_TOKEN")
    if not token: raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    threading.Thread(target=run_http_probe, daemon=True).start()
    application = Application.builder().token(token).post_init(post_init).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("affairs", cmd_affairs))
    application.add_handler(CommandHandler("affairs_delete", cmd_affairs_delete))
    application.add_handler(CommandHandler("maintenance_on", maintenance_on))
    application.add_handler(CommandHandler("maintenance_off", maintenance_off))
    application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO | filters.Document.AUDIO, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_key_or_text))
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
