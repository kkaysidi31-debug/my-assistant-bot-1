# main.py
# -*- coding: utf-8 -*-

import json
import logging
import os
import re
import threading
from datetime import datetime, timedelta, time, timezone as dt_timezone

import pytz
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    filters
)

# ------------------------ –ö–æ–Ω—Ñ–∏–≥ ------------------------

ADMIN_ID = 963586834  # —Ç–≤–æ–π Telegram ID (–∞–¥–º–∏–Ω)
TZ_NAME = "Europe/Kaliningrad"
TZ = pytz.timezone(TZ_NAME)

DATA_FILE = "data.json"
DATA_LOCK = threading.Lock()

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ VIP001..VIP100
ACCESS_KEYS = {f"VIP{str(i).zfill(3)}": None for i in range(1, 101)}

# ------------------------ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("reminder-bot")

# ------------------------ –•—Ä–∞–Ω–∏–ª–∏—â–µ ---------------------

def _load():
    if not os.path.exists(DATA_FILE):
        return {
            "allowed_users": [],
            "keys": ACCESS_KEYS,
            "tasks": [],     # –±—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
            "history": [],   # –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            "maintenance": False,
            "pending_chats": []  # –∫–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
        }
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def _save(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def db_get():
    with DATA_LOCK:
        return _load()

def db_put(mutator):
    with DATA_LOCK:
        data = _load()
        mutator(data)
        _save(data)
        return data

# --------------------- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ ------------------

def now_local():
    return datetime.now(TZ)

def to_utc(dt_local):
    """–ü–æ–ª—É—á–∏—Ç—å aware-UTC datetime –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ aware-–¥–∞—Ç–∞–≤—Ä–µ–º–µ–Ω–∏."""
    return dt_local.astimezone(dt_timezone.utc)

def fmt_dt_local(dt_local):
    return dt_local.strftime("%d.%m.%Y %H:%M")

# ------------------------ –î–æ—Å—Ç—É–ø ------------------------

def user_allowed(user_id: int) -> bool:
    data = db_get()
    return user_id in data["allowed_users"]

async def ask_key(update: Update):
    await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")

async def try_accept_key(update: Update) -> bool:
    """–ü—Ä–æ–±—É–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∫–ª—é—á, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–ª—é—á. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç/—É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø."""
    user_id = update.effective_user.id
    text = (update.message.text or "").strip().upper()

    if user_allowed(user_id):
        return True

    if not re.fullmatch(r"[A-Z]{3}\d{3}", text):
        return False

    def mutate(d):
        # –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –∏ —Å–≤–æ–±–æ–¥–µ–Ω?
        if text in d["keys"] and (d["keys"][text] is None or d["keys"][text] == user_id):
            d["keys"][text] = user_id
            if user_id not in d["allowed_users"]:
                d["allowed_users"].append(user_id)

    db_put(mutate)
    if user_allowed(user_id):
        await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return True
    return False

# ------------------------ –¢–µ—Ö—Ä–∞–±–æ—Ç—ã ----------------------

async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    def mutate(d):
        d["maintenance"] = True
    db_put(mutate)
    await update.message.reply_text("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    data = db_put(lambda d: d.update({"maintenance": False}))
    # –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å —Ç–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è
    pending = data.get("pending_chats", [])
    if pending:
        # –û—á–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ –∏ —Å–æ–æ–±—â–∏–º
        def clear_mut(d):
            d["pending_chats"] = []
        db_put(clear_mut)
        for chat_id in set(pending):
            try:
                await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            except Exception as e:log.warning(f"notify back failed for {chat_id}: {e}")
    await update.message.reply_text("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# ------------------------ –ü–∞—Ä—Å–µ—Ä RU ----------------------

MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
    "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
}

RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"

def parse_request_ru(text: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π:
    {"after": timedelta, "text": "..."}
    {"once_at": datetime_local, "text": "..."}
    {"daily_at": time_local, "text": "..."}
    """
    t = text.strip().lower()

    # 1) —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ <—Ç–µ–∫—Å—Ç>
    m = re.match(r"^—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(?P<u>–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å[–∞–æ–≤]?)\s+(?P<txt>.+)$", t)
    if m:
        n = int(m.group("n"))
        unit = m.group("u")
        txt = m.group("txt").strip()
        delta = timedelta(minutes=n) if unit.startswith("–º–∏–Ω—É—Ç") else timedelta(hours=n)
        return {"after": delta, "text": txt}

    # 2) —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m = re.match(rf"^—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}\s+(?P<txt>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        txt = m.group("txt").strip()
        dt = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        # –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –¥–≤–∏–≥–∞–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if dt < now_local():
            dt += timedelta(days=1)
        return {"once_at": dt, "text": txt}

    # 3) –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m = re.match(rf"^–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<txt>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        txt = m.group("txt").strip()
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        dt = base + timedelta(days=1)
        return {"once_at": dt, "text": txt}

    # 4) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m = re.match(rf"^–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(?P<txt>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        txt = m.group("txt").strip()
        return {"daily_at": time(hour=hh, minute=mm, tzinfo=TZ), "text": txt}

    # 5) DD <–º–µ—Å—è—Ü> [–≤ HH:MM] <—Ç–µ–∫—Å—Ç>
    m = re.match(
        rf"^(?P<d>\d{{1,2}})\s+(?P<mon>{'|'.join(MONTHS.keys())})(?:\s+–≤\s+{RE_TIME})?\s+(?P<txt>.+)$",
        t
    )
    if m:
        d = int(m.group("d"))
        mon = MONTHS[m.group("mon")]
        txt = (m.group("txt") or "").strip()
        hh = int(m.group("h")) if m.group("h") else 9
        mm = int(m.group("m")) if m.group("m") else 0
        year = now_local().year
        dt = datetime(year, mon, d, hh, mm, tzinfo=TZ)
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        if dt < now_local():
            dt = datetime(year + 1, mon, d, hh, mm, tzinfo=TZ)
        return {"once_at": dt, "text": txt}

    return None

# --------------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á ----------------

def add_task(chat_id: int, when_dt_local: datetime | None, text: str, kind: str, job_name: str):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –ë–î.
    kind: "once" –∏–ª–∏ "daily"
    when_dt_local: –¥–ª—è once ‚Äî aware –ª–æ–∫–∞–ª—å–Ω—ã–π datetime; –¥–ª—è daily ‚Äî None (–≤ tasks –∫–ª–∞–¥—ë–º HH:MM –æ—Ç–¥–µ–ª—å–Ω–æ)
    """
    def mutate(d):
        if kind == "once":
            d["tasks"].append({
                "id": job_name,
                "chat_id": chat_id,
                "type": "once",
                "when": when_dt_local.isoformat(),
                "text": text
            })
        elif kind == "daily":
            d["tasks"].append({
                "id": job_name,
                "chat_id": chat_id,
                "type": "daily",
                "hhmm": when_dt_local.strftime("%H:%M"),
                "text": text
            })
    db_put(mutate)

def remove_task(job_name: str):
    def mutate(d):
        d["tasks"] = [t for t in d["tasks"] if t["id"] != job_name]
    db_put(mutate)

def push_history(chat_id: int, planned_local_iso: str, text: str):
    def mutate(d):
        d["history"].append({
            "chat_id": chat_id,
            "planned_for": planned_local_iso,
            "text": text,"done_at": now_local().isoformat()
        })
    db_put(mutate)

# ---------------------- –î–∂–æ–±-–∫–æ–ª–ª–±–µ–∫–∏ -------------------

async def remind_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    payload = job.data or {}
    chat_id = payload.get("chat_id")
    text = payload.get("text")
    planned_local_iso = payload.get("planned_local_iso")  # —Å—Ç—Ä–æ–∫–æ–π

    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    finally:
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if planned_local_iso and chat_id is not None and text:
            push_history(chat_id, planned_local_iso, text)
        remove_task(job.name)

# ------------------------ –•—ç–Ω–¥–ª–µ—Ä—ã ----------------------

HELP_EXAMPLES = (
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
    "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –∫–∞–∫–æ–µ –ª–∏–±–æ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–∏—à–∏—Ç–µ —Ç–∞–∫ (–ø—Ä–∏–º–µ—Ä –Ω–∞ 1 —á–∞—Å):\n"
    "  –°–µ–≥–æ–¥–Ω—è –≤ 14:00 –Ω–∞–ø–æ–º–Ω–∏, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00\n"
    "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not user_allowed(uid):
        await ask_key(update)
        return

    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n" + HELP_EXAMPLES)

async def list_affairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not user_allowed(uid):
        if await try_accept_key(update):
            await start(update, context)
        else:
            await ask_key(update)
        return

    data = db_get()
    tasks = [t for t in data["tasks"] if t["chat_id"] == uid]

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ + —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞—Ä—Ç—É –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –ø–∞–º—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    items = []
    index_map = []
    for t in sorted(tasks, key=lambda x: x["when"] if x["type"] == "once" else x.get("hhmm", "")):
        if t["type"] == "once":
            dt_loc = datetime.fromisoformat(t["when"])
            items.append(f"{fmt_dt_local(dt_loc)} ‚Äî {t['text']}")
        else:
            items.append(f"–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {t['hhmm']} ‚Äî {t['text']}")
        index_map.append(t["id"])

    if not items:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç.")
        return

    # –∑–∞–ø–æ–º–Ω–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data["index_map"] = index_map
    pretty = "–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:\n" + "\n".join(f"{i+1}. {it}" for i, it in enumerate(items))
    await update.message.reply_text(pretty)

async def delete_affair(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not user_allowed(uid):
        if await try_accept_key(update):
            await start(update, context)
        else:
            await ask_key(update)
        return

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–ª–∞: /affairs_delete N")
        return
    try:
        n = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    index_map = context.user_data.get("index_map")
    if not index_map:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /affairs, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é.")
        return
    if not (1 <= n <= len(index_map)):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    job_name = index_map[n-1]
    # —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    def mutate(d):
        d["tasks"] = [t for t in d["tasks"] if t["id"] != job_name]
    db_put(mutate)

    # –æ—Ç–º–µ–Ω—è–µ–º –¥–∂–æ–±, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        context.job_queue.get_jobs_by_name(job_name)
        for j in context.job_queue.get_jobs_by_name(job_name):
            j.schedule_removal()
    except Exception:
        pass

    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–æ.")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not user_allowed(uid):
        if await try_accept_key(update):
            await start(update, context)
        else:
            await ask_key(update)
        return

    data = db_get()
    items = [h for h in data["history"] if h["chat_id"] == uid]
    if not items:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
    items = items[-20:]
    lines = []
    for h in items:
        dt_planned = datetime.fromisoformat(h["planned_for"])
        done_at = datetime.fromisoformat(h["done_at"])
        lines.append(f"{fmt_dt_local(dt_planned)} ‚Äî {h['text']} (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {fmt_dt_local(done_at)})")
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–ª:\n" + "\n".join(lines))

# –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return

    user_id = update.effective_user.id
    data = db_get()

    # –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
    if data.get("maintenance") and user_id != ADMIN_ID:
        # –∑–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∑–∂–µ
        def mutate(d):
            d["pending_chats"].append(update.effective_chat.id)
        db_put(mutate)
        await msg.reply_text("üü° –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å.")
        return

    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if not user_allowed(user_id):
        if await try_accept_key(update):
            await start(update, context)
        else:
            await ask_key(update)
        return

    parsed = parse_request_ru(msg.text)
    if not parsed:
        await msg.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "‚Äî —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ...\n"
            "‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...\n"
            "‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...\n"
            "‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...\n"
            "‚Äî DD <–º–µ—Å—è—Ü> [–≤ HH:MM] ..."
        )
        return

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    q = context.job_queue
    chat_id = update.effective_chat.id

    # —Ä–∞–∑–æ–≤—ã–µ —á–µ—Ä–µ–∑ delta
    if "after" in parsed:
        run_at_local = now_local() + parsed["after"]
        job_name = f"once_{user_id}_{int(datetime.now().timestamp())}"
        q.run_once(
            remind_job,
            when=to_utc(run_at_local),              # datetime aware (UTC)
            name=job_name,
            data={"chat_id": chat_id, "text": parsed["text"], "planned_local_iso": run_at_local.isoformat()},
        )
        add_task(chat_id, run_at_local, parsed["text"], "once", job_name)
        await msg.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {parsed['after']} ‚Äî ¬´{parsed['text']}¬ª.")
        return

    # —Ä–∞–∑–æ–≤—ã–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–æ–º–µ–Ω—Ç—É
    if "once_at" in parsed:
        run_at_local = parsed["once_at"]
        job_name = f"once_{user_id}_{int(datetime.now().timestamp())}"
        q.run_once(
            remind_job,
            when=to_utc(run_at_local),
            name=job_name,
            data={"chat_id": chat_id, "text": parsed["text"], "planned_local_iso": run_at_local.isoformat()},
        )
        add_task(chat_id, run_at_local, parsed["text"], "once", job_name)
        await msg.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt_dt_local(run_at_local)} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ_NAME})")
        return

    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ
    if "daily_at" in parsed:
        t_local: time = parsed["daily_at"]
        hhmm = time(hour=t_local.hour, minute=t_local.minute, tzinfo=TZ)
        job_name = f"daily_{user_id}_{int(datetime.now().timestamp())}"

        # –±–ª–∏–∂–∞–π—à–∏–π –∑–∞–ø—É—Å–∫ (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞), –∑–∞—Ç–µ–º ‚Äî —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        first = now_local().replace(hour=hhmm.hour, minute=hhmm.minute, second=0, microsecond=0)
        if first <= now_local():
            first += timedelta(days=1)

        async def daily_wrapper(ctx: ContextTypes.DEFAULT_TYPE):
            await remind_job(ctx)

        q.run_repeating(
            daily_wrapper,
            interval=timedelta(days=1),
            first=to_utc(first),
            name=job_name,
            data={"chat_id": chat_id, "text": parsed["text"], "planned_local_iso": first.isoformat()},
        )
        add_task(chat_id, first, parsed["text"], "daily", job_name)
        await msg.reply_text(f"‚úÖ –û–∫, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hhmm.strftime('%H:%M')} ‚Äî ¬´{parsed['text']}¬ª.")
        return

# ------------------------ –ö–æ–º–∞–Ω–¥—ã -----------------------

async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand("history", "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–ª"),
        BotCommand("maintenance_on", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤–∫–ª (–∞–¥–º–∏–Ω)"),
        BotCommand("maintenance_off", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤—ã–∫–ª (–∞–¥–º–∏–Ω)"),
    ])

# ------------------------ –ó–∞–ø—É—Å–∫ ------------------------

def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –ë–î –∏ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    db_put(lambda d: d)  # lazy init

    app = Application.builder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("affairs", list_affairs))
    app.add_handler(CommandHandler("affairs_delete", delete_affair))
    app.add_handler(CommandHandler("history", show_history))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off))

    # —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    app.post_init = lambda _: app.create_task(set_commands(app))

    log.info("Starting bot with polling...")
    app.run_polling(close_loop=False)

import asyncio

if __name__ == "__main__":
    asyncio.run(main())
