import os
import re
import logging
import threading
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
import tempfile

from flask import Flask, Response
from openai import OpenAI

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ----------------------------- –õ–û–ì–ò -----------------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("reminder-bot")

# ------------------------- –ù–ê–°–¢–†–û–ô–ö–ò ---------------------------
TIMEZONE = ZoneInfo("Europe/Kaliningrad")

# –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–ª—é—á–∏ VIP001..VIP100
ACCESS_KEYS = {f"VIP{n:03d}": None for n in range(1, 101)}
ALLOWED_USERS: set[int] = set()

# OpenAI –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö (–º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å ‚Äî —Ç–æ–≥–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–∫–ª—é—á–∞—Ç—Å—è)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

# –ú–∏–Ω–∏-Flask, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç (web service –Ω–µ –∑–∞—Å—ã–ø–∞–ª)
app_http = Flask(__name__)

@app_http.route("/")
def _health():
    return Response("OK", 200)

def run_flask():
    port = int(os.getenv("PORT", "8080"))
    log.info(f"HTTP keep-alive on 0.0.0.0:{port}")
    app_http.run(host="0.0.0.0", port=port, debug=False)

# ------------------------ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------------------
RU_MONTHS = {
    "—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
    "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12
}
RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"

def now_local() -> datetime:
    return datetime.now(TIMEZONE)

def fmt(dt: datetime) -> str:
    return dt.strftime("%Y-%m-%d %H:%M")

# ---------------------- –ü–†–ò–í–ê–¢–ù–´–ô –î–û–°–¢–£–ü -----------------------
async def ensure_access(update: Update) -> bool:
    user_id = update.effective_user.id
    if user_id in ALLOWED_USERS:
        return True

    txt = (update.message.text or "").strip().upper() if update.message else ""
    if txt in ACCESS_KEYS and ACCESS_KEYS[txt] is None:
        ACCESS_KEYS[txt] = user_id
        ALLOWED_USERS.add(user_id)
        await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        return True

    await update.message.reply_text(
        "üîí –ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.",
        parse_mode="Markdown"
    )
    return False

# ---------------------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_access(update):
        return

    examples = (
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
    )
    await update.message.reply_text(examples)

# --------------------- –ü–ê–†–°–ï–† –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ----------------------
def parse_request(text: str):
    t = text.strip().lower()

    m = re.match(r"^–Ω–∞–ø–æ–º–Ω–∏\s+—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(?P<u>–º–∏–Ω—É—Ç[—É—ã]?|–º–∏–Ω|—á–∞—Å[–∞–æ–≤]?)\s+(?P<text>.+)$", t)
    if m:
        n = int(m.group("n")); u = m.group("u")
        delta = timedelta(minutes=n) if u.startswith("–º–∏–Ω") else timedelta(hours=n)
        return {"after": delta, "text": m.group("text").strip()}

    m = re.match(rf"^–Ω–∞–ø–æ–º–Ω–∏\s+—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        target = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        if target <= now_local():
            target += timedelta(days=1)
        return {"once_at": target, "text": m.group("text").strip()}

    m = re.match(rf"^–Ω–∞–ø–æ–º–Ω–∏\s+–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        return {"once_at": base + timedelta(days=1), "text": m.group("text").strip()}

    m = re.match(rf"^–Ω–∞–ø–æ–º–Ω–∏\s+–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        return {"daily_at": (int(m.group("h")), int(m.group("m"))), "text": m.group("text").strip()}

    m = re.match(rf"^–Ω–∞–ø–æ–º–Ω–∏\s+(?P<day>\d{{1,2}})\s+(?P<month>[–∞-—è]+)(?:\s+–≤\s+{RE_TIME})?\s+(?P<text>.+)$", t)
    if m and m.group("month") in RU_MONTHS:
        day = int(m.group("day")); month = RU_MONTHS[m.group("month")]
        year = now_local().year
        hh = int(m.group("h")) if m.group("h") else 9
        mm = int(m.group("m")) if m.group("m") else 0
        target = datetime(year, month, day, hh, mm, tzinfo=TIMEZONE)
        return {"once_at": target, "text": m.group("text").strip()}

    return None

# ----------------------- JOB CALLBACKS -------------------------
async def job_once(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(context.job.chat_id, f"‚è∞ {context.job.data.get('text', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}")

async def job_daily(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(context.job.chat_id, f"üìÖ {context.job.data.get('text', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')}")

# -------------------- –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ----------------------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_access(update):
        return
    parsed = parse_request(update.message.text or "")
    if not parsed:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "‚Äî —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ‚Ä¶\n"
            "‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ‚Ä¶\n"
            "‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ‚Ä¶\n"
            "‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ‚Ä¶\n"
            "‚Äî 30 –∞–≤–≥—É—Å—Ç–∞ [–≤ 09:00] ‚Ä¶"
        )
        return

    jq = context.job_queue
    chat_id = update.effective_chat.id

    if "after" in parsed:
        run_at = now_local() + parsed["after"]
        jq.run_once(job_once, when=parsed["after"], chat_id=chat_id, name=str(run_at),
                    data={"text": parsed["text"]})
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt(run_at)} ‚Äî ¬´{parsed['text']}¬ª.")
        return

    if "once_at" in parsed:
        target = parsed["once_at"]
        delay = max(0, (target - now_local()).total_seconds())
        jq.run_once(job_once, when=delay, chat_id=chat_id, name=str(target),
                    data={"text": parsed["text"]})
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt(target)} ‚Äî ¬´{parsed['text']}¬ª.")
        return

    if "daily_at" in parsed:
        hh, mm = parsed["daily_at"]
        first = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        if first <= now_local():
            first += timedelta(days=1)
        jq.run_daily(job_daily, time=first.timetz(), chat_id=chat_id,
                     name=f"daily-{hh:02d}:{mm:02d}", data={"text": parsed["text"]})
        await update.message.reply_text(
            f"‚úÖ –û–∫, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hh:02d}:{mm:02d} ‚Äî ¬´{parsed['text']}¬ª.")
        return

# ------------------- –ì–û–õ–û–°–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ----------------------
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_access(update):
        return
    if not openai_client:
        await update.message.reply_text("üéôÔ∏è –†–µ—á—å-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–Ω–µ—Ç OPENAI_API_KEY).")
        return

    voice = update.message.voice
    if not voice:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ü§î")
        return

    tg_file = await context.bot.get_file(voice.file_id)
    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp:
        tmp_path = tmp.name
    await tg_file.download_to_drive(tmp_path)

    try:
        with open(tmp_path, "rb") as f:
            tr = openai_client.audio.transcriptions.create(model="whisper-1", file=f, response_format="text")
        text = tr.strip() if isinstance(tr, str) else str(tr).strip()
        if not text:
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üôè")
            returnupdate.message.text = text
        await handle_text(update, context)
    finally:
        try: os.remove(tmp_path)
        except Exception: pass

# ----------------------------- MAIN ----------------------------
def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    # HTTP keep-alive –¥–ª—è Render
    threading.Thread(target=run_flask, daemon=True).start()

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    log.info("Starting bot with polling‚Ä¶")
    application.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
