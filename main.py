# -*- coding: utf-8 -*-
"""
–õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.

–§—É–Ω–∫—Ü–∏–∏:
- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á–∞–º (VIP001‚ÄìVIP100).
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
- –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á:
    ‚Ä¢ ¬´—á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–µ—Å—Ç—å¬ª, ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª, ¬´—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ ‚Ä¶¬ª
    ‚Ä¢ ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 ‚Ä¶¬ª
    ‚Ä¢ ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 09:00 ‚Ä¶¬ª
    ‚Ä¢ ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 ‚Ä¶¬ª
    ‚Ä¢ ¬´30.08 –≤ 10:00 ‚Ä¶¬ª –∏–ª–∏ ¬´30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 ‚Ä¶¬ª (–≥–æ–¥ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- –°–ø–∏—Å–æ–∫ –¥–µ–ª: /affairs
- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É: ¬´affairs delete 3¬ª (–∏ –∫–æ–º–∞–Ω–¥–∞ /affairs_delete 3)
- –ê–¥–º–∏–Ω: /maintenance_on –∏ /maintenance_off
- SQLite-—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á (–ø–µ—Ä–µ–∂–∏–≤–∞—é—Ç —Ä–µ—Å—Ç–∞—Ä—Ç)
- –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
- –°–Ω—è—Ç–∏–µ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–∏—Å–∫–ª—é—á–∞–µ—Ç Conflict –Ω–∞ Render)
"""

import logging
import re
import sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta, time as dtime, timezone
from typing import Optional, List, Dict, Tuple
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
BOT_TOKEN = "8492146866:AAE6yWRhg1wa9qn7_PV3NRJS6lh1dFtjxqA"
ADMIN_ID = 963586834
TZ = ZoneInfo("Europe/Kaliningrad")
DB_PATH = "tasks.db"

# –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ (–≤—à–∏—Ç—ã –≤ –∫–æ–¥)
ACCESS_KEYS = {f"VIP{i:03d}" for i in range(1, 101)}
# –ö—Ç–æ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (in-memory; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –ë–î)
AUTHORIZED: Dict[int, bool] = {}

MAINTENANCE = False  # —Ñ–ª–∞–≥ —Ç–µ—Ö—Ä–∞–±–æ—Ç

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("reminder-bot")

# ===================== –ú–û–î–ï–õ–¨/–ë–î =====================
@dataclass
class Task:
    id: int
    chat_id: int
    title: str
    type: str  # 'once' | 'daily' | 'monthly'
    run_at_utc: Optional[datetime]
    hour: Optional[int]
    minute: Optional[int]
    day_of_month: Optional[int]

def db() -> sqlite3.Connection:
    return sqlite3.connect(DB_PATH)

def init_db():
    with db() as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS tasks(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER NOT NULL,
                title TEXT NOT NULL,
                type TEXT NOT NULL,
                run_at_utc TEXT,
                hour INTEGER,
                minute INTEGER,
                day_of_month INTEGER
            );
            """
        )
        conn.commit()

def add_task(chat_id: int, title: str, type_: str,
             run_at_utc: Optional[datetime], hour: Optional[int],
             minute: Optional[int], day_of_month: Optional[int]) -> int:
    with db() as conn:
        cur = conn.execute(
            "INSERT INTO tasks(chat_id,title,type,run_at_utc,hour,minute,day_of_month) "
            "VALUES (?,?,?,?,?,?,?)",
            (
                chat_id, title, type_,
                run_at_utc.isoformat() if run_at_utc else None,
                hour, minute, day_of_month
            )
        )
        conn.commit()
        return cur.lastrowid

def row_to_task(row: Tuple) -> Task:
    return Task(
        id=row[0],
        chat_id=row[1],
        title=row[2],
        type=row[3],
        run_at_utc=datetime.fromisoformat(row[4]) if row[4] else None,
        hour=row[5],
        minute=row[6],
        day_of_month=row[7]
    )

def get_task(task_id: int) -> Optional[Task]:
    with db() as conn:
        row = conn.execute(
            "SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks WHERE id=?",
            (task_id,)
        ).fetchone()
        return row_to_task(row) if row else None

def list_tasks(chat_id: int) -> List[Task]:
    with db() as conn:
        rows = conn.execute(
            "SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks WHERE chat_id=?",
            (chat_id,)
        ).fetchall()
        return [row_to_task(r) for r in rows]

def delete_task(task_id: int):
    with db() as conn:
        conn.execute("DELETE FROM tasks WHERE id=?", (task_id,))
        conn.commit()

# ===================== –ü–ê–†–°–ï–† =====================
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
    "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
    "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
}

# —á–µ—Ä–µ–∑ N [—Å–µ–∫/—Å–µ–∫—É–Ω–¥/—Å–µ–∫—É–Ω–¥—É/–º–∏–Ω/–º–∏–Ω—É—Ç/–º–∏–Ω—É—Ç—É/—á/—á–∞—Å/—á–∞—Å–∞/—á–∞—Å–æ–≤] <—Ç–µ–∫—Å—Ç>
RELATIVE_RE = re.compile(
    r"^\s*—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—É|—ã)?|—Å–µ–∫|—Å|–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω|–º|—á–∞—Å(?:–∞|–æ–≤)?|—á)\s+(.+)$",
    re.I
)
TODAY_RE    = re.compile(r"^\s*—Å–µ–≥–æ–¥–Ω—è\s*–≤\s*(\d{1,2})[.:](\d{2})\s+(.+)$", re.I)
TOMORROW_RE = re.compile(r"^\s*–∑–∞–≤—Ç—Ä–∞\s*–≤\s*(\d{1,2})[.:](\d{2})\s+(.+)$", re.I)
DAILY_RE    = re.compile(r"^\s*–∫–∞–∂–¥—ã–π\s*–¥–µ–Ω—å\s*–≤\s*(\d{1,2})[.:](\d{2})\s+(.+)$", re.I)
# 30.08[.2025] –≤ 10:00 <—Ç–µ–∫—Å—Ç>
DATE_NUM_RE = re.compile(
    r"^\s*(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{4}))?(?:\s*–≤\s*(\d{1,2})[.:](\d{2}))?\s+(.+)$",
    re.I
)
# 30 –∞–≤–≥—É—Å—Ç–∞ [2025] –≤ 10:00 <—Ç–µ–∫—Å—Ç>
DATE_TXT_RE = re.compile(
    r"^\s*(\d{1,2})\s+([–∞-—è–ê-–Ø]+)(?:\s+(\d{4}))?(?:\s*–≤\s*(\d{1,2})[.:](\d{2}))?\s+(.+)$",
    re.I
)

@dataclass
class ParsedTask:
    type: str
    title: str
    run_at_utc: Optional[datetime]
    hour: Optional[int]
    minute: Optional[int]
    day_of_month: Optional[int]

def parse_user_text_to_task(text: str, now_tz: datetime) -> Optional[ParsedTask]:
    text = text.strip()

    m = RELATIVE_RE.match(text)
    if m:
        amount = int(m.group(1))
        unit = m.group(2).lower()
        title = m.group(3).strip()

        if unit.startswith("—Å–µ–∫") or unit == "—Å":
            delta = timedelta(seconds=amount)
        elif unit.startswith("–º–∏–Ω") or unit == "–º":
            delta = timedelta(minutes=amount)
        else:
            delta = timedelta(hours=amount)

        run_local = now_tz + delta
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    m = TODAY_RE.match(text)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        run_local = now_tz.replace(hour=h, minute=mi, second=0, microsecond=0)
        if run_local <= now_tz:
            run_local += timedelta(days=1)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    m = TOMORROW_RE.match(text)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        run_local = (now_tz + timedelta(days=1)).replace(hour=h, minute=mi, second=0, microsecond=0)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    m = DAILY_RE.match(text)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        return ParsedTask("daily", title, None, h, mi, None)

    m = DATE_NUM_RE.match(text)
    if m:
        d = int(m.group(1))
        mo = int(m.group(2))
        y = int(m.group(3) or now_tz.year)
        h = int(m.group(4) or 10)
        mi = int(m.group(5) or 0)
        title = m.group(6).strip()
        run_local = datetime(y, mo, d, h, mi, tzinfo=TZ)
        if run_local <= now_tz and not m.group(3):
            run_local = datetime(y + 1, mo, d, h, mi, tzinfo=TZ)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    m = DATE_TXT_RE.match(text)
    if m:
        d = int(m.group(1))
        mon = m.group(2).lower()
        if mon not in MONTHS:
            return None
        y = int(m.group(3) or now_tz.year)
        h = int(m.group(4) or 10)
        mi = int(m.group(5) or 0)
        title = m.group(6).strip()
        mo = MONTHS[mon]
        run_local = datetime(y, mo, d, h, mi, tzinfo=TZ)
        if run_local <= now_tz and not m.group(3):
            run_local = datetime(y + 1, mo, d, h, mi, tzinfo=TZ)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)

    return None

# ===================== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö =====================
def compute_next_for_daily(hour: int, minute: int, now_tz: datetime) -> datetime:
    cand = now_tz.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if cand <= now_tz:
        cand += timedelta(days=1)
    return cand
    def compute_next_for_monthly(day: int, hour: int, minute: int, now_tz: datetime) -> datetime:
    y, m = now_tz.year, now_tz.month
    for _ in range(24):
        try:
            cand = datetime(y, m, day, hour, minute, tzinfo=TZ)
            if cand > now_tz:
                return cand
            m = 1 if m == 12 else m + 1
            if m == 1:
                y += 1
        except ValueError:
            m = 1 if m == 12 else m + 1
            if m == 1:
                y += 1
    return now_tz + timedelta(days=30)

LAST_LIST: Dict[int, List[int]] = {}  # chat_id -> [task_ids –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ø–∏—Å–∫–µ]

async def remind_once(ctx: ContextTypes.DEFAULT_TYPE):
    tid = ctx.job.data["task_id"]
    t = get_task(tid)
    if not t:
        return
    await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.title}")

async def remind_monthly(ctx: ContextTypes.DEFAULT_TYPE):
    tid = ctx.job.data["task_id"]
    t = get_task(tid)
    if not t:
        return
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–æ
    now = datetime.now(TZ)
    if now.day == t.day_of_month:
        await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.title}")

async def schedule_task(app: Application, t: Task):
    if not t:
        return
    jq = app.job_queue
    name = f"task_{t.id}"
    for j in jq.get_jobs_by_name(name):
        j.schedule_removal()

    if t.type == "once" and t.run_at_utc:
        if t.run_at_utc > datetime.now(timezone.utc):
            jq.run_once(remind_once, when=t.run_at_utc, name=name, data={"task_id": t.id})
    elif t.type == "daily":
        jq.run_daily(remind_once, time=dtime(hour=t.hour, minute=t.minute, tzinfo=TZ),
                     name=name, data={"task_id": t.id})
    elif t.type == "monthly":
        jq.run_daily(remind_monthly, time=dtime(hour=t.hour, minute=t.minute, tzinfo=TZ),
                     name=name, data={"task_id": t.id})

async def reschedule_all(app: Application):
    with db() as conn:
        rows = conn.execute("SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks").fetchall()
    for r in rows:
        await schedule_task(app, row_to_task(r))

# ===================== –ü–û–ú–û–©–ù–ò–ö–ò =====================
def fmt_dt_local(dt_utc: datetime) -> str:
    return dt_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

# ===================== –ö–û–ú–ê–ù–î–´ =====================
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, "
        "—á—Ç–æ–±—ã —Ç—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–ª—Å—è –Ω–∞ —Å–∞–º–æ–º –≥–ª–∞–≤–Ω–æ–º –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã / —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ‚Äî –ø–æ–µ—Å—Ç—å\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 18:30 ‚Äî –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 09:00 ‚Äî —Å—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 ‚Äî —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 ‚Äî –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n\n"
        "‚ùó –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00, –∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –∑–∞ —á–∞—Å ‚Äî –ø–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 14:00."
    )

async def affairs_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tasks = list_tasks(chat_id)
    if not tasks:
        await update.message.reply_text("–ü–æ–∫–∞ –¥–µ–ª –Ω–µ—Ç.")
        return

    now = datetime.now(TZ)

    def next_run(t: Task) -> datetime:
        if t.type == "once" and t.run_at_utc:
            return t.run_at_utc.astimezone(TZ)
        if t.type == "daily":
            return compute_next_for_daily(t.hour, t.minute, now)
        return compute_next_for_monthly(t.day_of_month, t.hour, t.minute, now)

    sorted_tasks = sorted(tasks, key=next_run)[:20]
    LAST_LIST[chat_id] = [t.id for t in sorted_tasks]

    lines = []
    for i, t in enumerate(sorted_tasks, 1):
        if t.type == "once":
            when = fmt_dt_local(t.run_at_utc)
        elif t.type == "daily":
            when = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}"
        else:
            when = f"–∫–∞–∂–¥–æ–µ {t.day_of_month} —á–∏—Å–ª–æ –≤ {t.hour:02d}:{t.minute:02d}"
        lines.append(f"{i}. {t.title} ‚Äî {when}")

    await update.message.reply_text("–¢–≤–æ–∏ –¥–µ–ª–∞:\n" + "\n".join(lines))

async def affairs_delete_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not ctx.args or not ctx.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /affairs_delete <–Ω–æ–º–µ—Ä>")
        return
    idx = int(ctx.args[0])
    tasks = list_tasks(chat_id)
    if not tasks or idx < 1 or idx > len(tasks):
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return
    t = tasks[idx - 1]
    delete_task(t.id)
    await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: ¬´{t.title}¬ª.")

async def maintenance_on_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    MAINTENANCE = True
    await update.message.reply_text("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    MAINTENANCE = False
    await update.message.reply_text("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# ===================== –¢–ï–ö–°–¢–´ =====================
async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    # –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    chat_id = update.effective_chat.id
    text = (update.message.text or "").strip()

    # 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if not AUTHORIZED.get(chat_id, False):
        key = re.sub(r"\s+", "", text).upper()
        if key in ACCESS_KEYS:
            AUTHORIZED[chat_id] = True
            await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´/affairs¬ª.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123 (–Ω–∞–ø—Ä–∏–º–µ—Ä, VIP003).")
        return

    # 2) –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç: "affairs delete 7"
    m = re.fullmatch(r"(?i)\s*affairs\s+delete\s+(\d+)\s*", text)
    if m:
        idx = int(m.group(1))
        ids = LAST_LIST.get(chat_id)
        if not ids or idx < 1 or idx > len(ids):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π —Å–ø–∏—Å–æ–∫ /affairs –∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä.")
            return
        tid = ids[idx - 1]
        t = get_task(tid)
        if t:
            delete_task(t.id)
            await update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: ¬´{t.title}¬ª.")
        else:
            await update.message.reply_text("–≠—Ç–æ –¥–µ–ª–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        return

    # 3) –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    now_tz = datetime.now(TZ)
    parsed = parse_user_text_to_task(text, now_tz)
    if not parsed:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª –∑–∞–¥–∞—á—É. –ü—Ä–∏–º–µ—Ä—ã: ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª, ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª, "
            "¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 –∑–∞—Ä—è–¥–∫–∞¬ª, ¬´30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç¬ª."
        )
        return

    task_id = add_task(chat_id, parsed.title, parsed.type,
                       parsed.run_at_utc, parsed.hour, parsed.minute, parsed.day_of_month)
    t = get_task(task_id)
    if not t:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    await schedule_task(ctx.application, t)

    if t.type == "once":
        when = fmt_dt_local(t.run_at_utc)
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî {when}")
    elif t.type == "daily":
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d} ‚Äî ¬´{t.title}¬ª")
    else:
        await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: –∫–∞–∂–¥–æ–µ {t.day_of_month} —á–∏—Å–ª–æ –≤ {t.hour:02d}:{t.minute:02d} ‚Äî ¬´{t.title}¬ª")

# ===================== MAIN =====================
def main():
    init_db()app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("affairs", affairs_cmd))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete_cmd))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on_cmd))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off_cmd))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    async def on_startup(app_: Application):
        # —É–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª –Ω–∞ Render
        await app_.bot.delete_webhook(drop_pending_updates=True)
        await reschedule_all(app_)
        log.info("Bot started. Timezone=%s", TZ)

    app.post_init = on_startup
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
