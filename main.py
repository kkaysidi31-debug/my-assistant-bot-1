import os
import json
import re
import asyncio
from datetime import datetime, timedelta
import pytz

from aiohttp import web

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import Message, BotCommand, Update as TgUpdate

# ============ –ö–û–ù–§–ò–ì ============
BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
ADMIN_ID = 963586834  # —Ç–≤–æ–π ID
TZ = pytz.timezone(os.getenv("TZ", "Europe/Kaliningrad"))

# –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
ACCESS_KEYS_LIST = os.getenv("ACCESS_KEYS", "VIP001,VIP002,VIP003").split(",")
ACCESS_KEYS = {k.strip(): None for k in ACCESS_KEYS_LIST if k.strip()}

DATA_FILE = "db.json"
TASKS_FILE = "tasks.json"

# webhook
BASE_URL = os.getenv("RENDER_EXTERNAL_URL", os.getenv("BASE_URL", "")).rstrip("/")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
HEALTH_PATH = "/healthz"
PORT = int(os.getenv("PORT", "10000"))

# ============ –ì–õ–û–ë–ê–õ–´ ============
ALLOWED_USERS = set()
PENDING_CHATS = set()
MAINTENANCE = False

scheduler = AsyncIOScheduler(timezone=TZ)
bot: Bot | None = None
dp = Dispatcher()

# ============ –•–†–ê–ù–ò–õ–ö–ò ============
def load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path: str, obj):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(obj, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

def load_db():
    global ALLOWED_USERS, ACCESS_KEYS
    db = load_json(DATA_FILE, {"allowed": [], "keys": {k: None for k in ACCESS_KEYS}})
    ALLOWED_USERS = set(db.get("allowed", []))
    # –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª—é—á–∏ –∏–∑ env –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ
    env_keys = {k: db["keys"].get(k) for k in db.get("keys", {})}
    for k in ACCESS_KEYS:
        env_keys.setdefault(k, None)
    ACCESS_KEYS = env_keys

def save_db():
    save_json(DATA_FILE, {"allowed": sorted(ALLOWED_USERS), "keys": ACCESS_KEYS})

def load_tasks():
    return load_json(TASKS_FILE, {})  # {uid: [{id, text, run_at_iso}]}

def save_tasks(tasks):
    save_json(TASKS_FILE, tasks)

# ============ –£–¢–ò–õ–´ ============
def fmt_dt(dt: datetime) -> str:
    return dt.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

def next_task_id(tasks, uid: str) -> int:
    used = {t["id"] for t in tasks.get(uid, [])}
    n = 1
    while n in used:
        n += 1
    return n

async def notify_due(uid: str, chat_id: int, task_id: int, text: str):
    try:
        await bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{text}¬ª")
    except Exception:
        pass
    # –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª—è–µ–º
    tasks = load_tasks()
    arr = tasks.get(str(uid), [])
    arr = [t for t in arr if t["id"] != task_id]
    tasks[str(uid)] = arr
    save_tasks(tasks)

def schedule_task(uid: int, chat_id: int, task_id: int, run_at: datetime, text: str):
    job_id = f"{uid}-{task_id}"
    # –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ ‚Äî —É–±–µ—Ä—ë–º
    for job in scheduler.get_jobs():
        if job.id == job_id:
            job.remove()
    scheduler.add_job(
        notify_due,
        "date",
        id=job_id,
        run_date=run_at.astimezone(TZ),
        args=[str(uid), chat_id, task_id, text],
        misfire_grace_time=60,
        replace_existing=True,
    )

def reschedule_all():
    tasks = load_tasks()
    for uid, arr in tasks.items():
        for t in arr:
            run_at = datetime.fromisoformat(t["run_at"])
            schedule_task(int(uid), t["chat_id"], t["id"], run_at, t["text"])

# ============ –ö–û–ú–ê–ù–î–´ ============
HELP_TEXT = (
    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
    "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00 (—Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:00)\n"
    "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
)

async def set_menu():
    commands = [BotCommand(command="start", description="–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand(command="affairs", description="–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand(command="affairs_delete", description="–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
    ]
    try:
        await bot.set_my_commands(commands)
    except Exception:
        pass

@dp.message(CommandStart())
async def cmd_start(msg: Message):
    if msg.from_user.id not in ALLOWED_USERS:
        await msg.answer("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    await msg.answer(HELP_TEXT)

@dp.message(Command("affairs"))
async def cmd_affairs(msg: Message):
    if msg.from_user.id not in ALLOWED_USERS:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    tasks = load_tasks()
    arr = sorted(tasks.get(str(msg.from_user.id), []), key=lambda t: t["run_at"])
    if not arr:
        await msg.answer("–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–ª –Ω–µ—Ç.")
        return
    lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:"]
    for i, t in enumerate(arr, 1):
        dt = datetime.fromisoformat(t["run_at"])
        lines.append(f"{i}. {fmt_dt(dt)} ‚Äî {t['text']}")
    await msg.answer("\n".join(lines))

@dp.message(Command("affairs_delete"))
async def cmd_affairs_delete(msg: Message, command: CommandObject):
    if msg.from_user.id not in ALLOWED_USERS:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not command.args:
        await msg.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –¥–µ–ª–∞: /affairs_delete N")
        return
    try:
        num = int(command.args.strip())
    except ValueError:
        await msg.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º.")
        return

    tasks = load_tasks()
    arr = sorted(tasks.get(str(msg.from_user.id), []), key=lambda t: t["run_at"])
    if num < 1 or num > len(arr):
        await msg.answer("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    task = arr[num - 1]
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    arr = [t for t in arr if t["id"] != task["id"]]
    tasks[str(msg.from_user.id)] = arr
    save_tasks(tasks)
    # –∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    for job in scheduler.get_jobs():
        if job.id == f"{msg.from_user.id}-{task['id']}":
            job.remove()
    await msg.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

# ============ –¢–ï–•–†–ê–ë–û–¢–´ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ============
@dp.message(Command("maintenance_on"))
async def maintenance_on(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    global MAINTENANCE
    MAINTENANCE = True
    await msg.answer("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

@dp.message(Command("maintenance_off"))
async def maintenance_off(msg: Message):
    if msg.from_user.id != ADMIN_ID:
        return
    global MAINTENANCE
    MAINTENANCE = False
    await msg.answer("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    # —É–≤–µ–¥–æ–º–∏–º –æ–∂–∏–¥–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        try:
            await bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        except Exception:
            pass

# ============ –ì–û–õ–û–° (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ============
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

async def transcribe_ogg(data: bytes) -> str | None:
    if not OPENAI_API_KEY:
        return None
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        import io
        f = io.BytesIO(data)
        f.name = "audio.ogg"
        result = client.audio.transcriptions.create(
            model="whisper-1",
            file=f
        )
        return result.text.strip()
    except Exception:
        return None

@dp.message(F.voice)
async def on_voice(msg: Message):
    if msg.from_user.id not in ALLOWED_USERS:
        await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if MAINTENANCE and msg.from_user.id != ADMIN_ID:
        PENDING_CHATS.add(msg.chat.id)
        await msg.answer("‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    file = await bot.get_file(msg.voice.file_id)
    data = await bot.download_file(file.file_path)
    text = await transcribe_ogg(data.read())
    if not text:
        await msg.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å (–∏–ª–∏ –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω).")
        return
    # –ø—Ä–æ–∫–∏–Ω–µ–º –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    fake = TgUpdate(message=Message.model_validate(msg.model_dump()))
    fake.message.text = text
    await handle_text(fake.message)

# ============ –ü–†–ò–Å–ú –ö–õ–Æ–ß–ê/–¢–ï–ö–°–¢–ê ============
@dp.message()
async def handle_text(msg: Message):
    uid = msg.from_user.id
    chat_id = msg.chat.id
    text = (msg.text or "").strip()

    # 1) –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", text):
            if text in ACCESS_KEYS and ACCESS_KEYS[text] is None:
                ACCESS_KEYS[text] = uid
                ALLOWED_USERS.add(uid)
                save_db()
                await msg.answer("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                await msg.answer(HELP_TEXT)
                return
            else:
                await msg.answer("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
                return
        else:
            await msg.answer("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
            return

    # 2) —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await msg.answer("‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 3) –ø–∞—Ä—Å–∏–Ω–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π, –∫–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å)

    # ¬´—á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å(–æ–≤) ...¬ª
    m = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å(–∞|–æ–≤)?)", text, re.I)
    if m:
        n = int(m.group(1))
        unit = m.group(2).lower()
        delta = timedelta(minutes=n) if unit.startswith("–º–∏–Ω") else timedelta(hours=n)
        run_at = datetime.now(TZ) + delta
        todo = re.sub(r"—á–µ—Ä–µ–∑\s+\d+\s*(?:–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å(?:–∞|–æ–≤)?)", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        await store_task(uid, chat_id, todo, run_at)
        await msg.answer(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {str(delta)} ‚Äî ¬´{todo}¬ª.")
        return

    # ¬´—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...¬ª
    m = re.search(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})", text, re.I)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        run_at = TZ.localize(datetime.now().replace(hour=hh, minute=mm, second=0, microsecond=0))
        todo = re.sub(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+\d{1,2}:\d{2}", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        if run_at < datetime.now(TZ):
            run_at += timedelta(days=1)
        await store_task(uid, chat_id, todo, run_at)
        await msg.answer(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt_dt(run_at)} ‚Äî ¬´{todo}¬ª. (TZ: {TZ})")
        return

    # ¬´–∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...¬ª
    m = re.search(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})", text, re.I)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        base = datetime.now(TZ) + timedelta(days=1)
        run_at = TZ.localize(base.replace(hour=hh, minute=mm, second=0, microsecond=0))
        todo = re.sub(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+\d{1,2}:\d{2}", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        await store_task(uid, chat_id, todo, run_at)
        await msg.answer(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt_dt(run_at)} ‚Äî ¬´{todo}¬ª. (TZ: {TZ})")
        return

    # ¬´DD.MM.YYYY –≤ HH:MM ...¬ª
    m = re.search(r"(\d{1,2})\.(\d{1,2})\.(\d{4})\s+–≤\s+(\d{1,2}):(\d{2})", text, re.I)
    if m:
        dd, mm_, yyyy, hh, mi = map(int, m.groups())
        run_at = TZ.localize(datetime(yyyy, mm_, dd, hh, mi, 0))
        todo = re.sub(r"\d{1,2}\.\d{1,2}\.\d{4}\s+–≤\s+\d{1,2}:\d{2}", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        await store_task(uid, chat_id, todo, run_at)
        await msg.answer(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt_dt(run_at)} ‚Äî ¬´{todo}¬ª. (TZ: {TZ})")
        return

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è–ª–∏
    await msg.answer("‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã —Å–º–æ—Ç—Ä–∏ –≤ /start")

async def store_task(uid: int, chat_id: int, text: str, run_at: datetime):
    tasks = load_tasks()
    arr = tasks.get(str(uid), [])
    task_id = next_task_id(tasks, str(uid))
    arr.append({"id": task_id, "text": text, "run_at": run_at.isoformat(), "chat_id": chat_id})
    tasks[str(uid)] = arr
    save_tasks(tasks)
    schedule_task(uid, chat_id, task_id, run_at, text)

# ============ AIOHTTP + WEBHOOK ============
async def on_startup(app: web.Application):
    # –º–µ–Ω—é
    await set_menu()
    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –ë–î –∏ –∑–∞–¥–∞—á–∏
    load_db()
    reschedule_all()
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook
    if BASE_URL:
        url = f"{BASE_URL}{WEBHOOK_PATH}"
        try:
            await bot.set_webhook(url, drop_pending_updates=True)
        except Exception:
            pass

async def on_shutdown(app: web.Application):
    try:
        await bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    scheduler.shutdown(wait=False)

def build_web_app() -> web.Application:
    application = web.Application()
    application.router.add_get(HEALTH_PATH, lambda r: web.json_response({"ok": True}))
    # aiogram webhook handler
    from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(application, path=WEBHOOK_PATH)
    setup_application(application, dp, bot=bot)
    application.on_startup.append(on_startup)
    application.on_shutdown.append(on_shutdown)
    return application

async def main():
    global bot
    if not BOT_TOKEN or BOT_TOKEN == "PASTE_YOUR_TOKEN_HERE":
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
    bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
    # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    # web app
    app = build_web_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    print(f"Serving on 0.0.0.0:{PORT} | health: {HEALTH_PATH} | webhook: {WEBHOOK_PATH}")
    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
