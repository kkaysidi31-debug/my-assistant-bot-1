# -*- coding: utf-8 -*-
import logging, os, re, sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta, time as dtime, timezone
from http.server import BaseHTTPRequestHandler, HTTPServer
from threading import Thread
from typing import Optional, List, Tuple
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
BOT_TOKEN = "<<<–°–Æ–î–ê –¢–û–ö–ï–ù>>>"
ADMIN_ID = 963586834
TZ = ZoneInfo("Europe/Kaliningrad")
DB = "assistant.db"

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("assistant")

# ==== HEALTH ====
class Health(BaseHTTPRequestHandler):
    def log_message(self, *a, **k): pass
    def do_GET(self):
        self.send_response(200); self.end_headers(); self.wfile.write(b"ok")

def start_health():
    port = int(os.getenv("PORT", "10000"))
    srv = HTTPServer(("0.0.0.0", port), Health)
    Thread(target=srv.serve_forever, daemon=True).start()

# ==== –ë–î ====
def db(): return sqlite3.connect(DB, check_same_thread=False)

def init_db():
    with db() as c:
        c.executescript("""
        CREATE TABLE IF NOT EXISTS users(chat_id INTEGER PRIMARY KEY, is_auth INTEGER NOT NULL DEFAULT 0, key_used TEXT);
        CREATE TABLE IF NOT EXISTS access_keys(key TEXT PRIMARY KEY, used_by_chat_id INTEGER);
        CREATE TABLE IF NOT EXISTS tasks(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            type TEXT NOT NULL CHECK(type IN ('once','daily','monthly')),
            run_at_utc TEXT, hour INTEGER, minute INTEGER, day_of_month INTEGER
        );
        """)
        have = {r[0] for r in c.execute("SELECT key FROM access_keys")}
        to_add = [(f"VIP{i:03d}",) for i in range(1,101) if f"VIP{i:03d}" not in have]
        if to_add: c.executemany("INSERT INTO access_keys(key) VALUES(?)", to_add)
        c.commit()

def is_auth(chat_id:int)->bool:
    with db() as c:
        r=c.execute("SELECT is_auth FROM users WHERE chat_id=?", (chat_id,)).fetchone()
        return bool(r and r[0])

def use_key(chat_id:int, text:str)->bool:
    key=re.sub(r"\s+","",text).upper()
    if not re.fullmatch(r"VIP\d{3}", key): return False
    with db() as c:
        r=c.execute("SELECT key,used_by_chat_id FROM access_keys WHERE key=?", (key,)).fetchone()
        if not r or (r[1] and r[1]!=chat_id): return False
        c.execute("INSERT INTO users(chat_id,is_auth,key_used) VALUES(?,?,?) "
                  "ON CONFLICT(chat_id) DO UPDATE SET is_auth=excluded.is_auth, key_used=excluded.key_used",
                  (chat_id,1,key))
        c.execute("UPDATE access_keys SET used_by_chat_id=? WHERE key=?", (chat_id,key))
        c.commit()
        return True

def keys_left()->int:
    with db() as c:
        return c.execute("SELECT COUNT(*) FROM access_keys WHERE used_by_chat_id IS NULL").fetchone()[0]

@dataclass
class Task:
    id:int; chat_id:int; title:str; type:str
    run_at_utc:Optional[datetime]; hour:Optional[int]; minute:Optional[int]; day_of_month:Optional[int]

def row2task(r:Tuple)->Task:
    return Task(r[0],r[1],r[2],r[3], datetime.fromisoformat(r[4]) if r[4] else None, r[5],r[6],r[7])

def add_task(chat_id:int,title:str,typ:str,run_at_utc:Optional[datetime],h:Optional[int],m:Optional[int],d:Optional[int])->int:
    with db() as c:
        cur=c.execute("INSERT INTO tasks(chat_id,title,type,run_at_utc,hour,minute,day_of_month) VALUES(?,?,?,?,?,?,?)",
                      (chat_id,title,typ, run_at_utc.isoformat() if run_at_utc else None, h,m,d))
        c.commit(); return cur.lastrowid

def get_task(tid:int)->Optional[Task]:
    with db() as c:
        r=c.execute("SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks WHERE id=?", (tid,)).fetchone()
        return row2task(r) if r else None

def list_tasks(chat_id:int)->List[Task]:
    with db() as c:
        rows=c.execute("SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks WHERE chat_id=?", (chat_id,)).fetchall()
        return [row2task(r) for r in rows]

def delete_task(tid:int):
    with db() as c: c.execute("DELETE FROM tasks WHERE id=?", (tid,)); c.commit()

# ==== –ü–ê–†–°–ò–ù–ì ====
MONTHS={"—è–Ω–≤–∞—Ä—è":1,"—Ñ–µ–≤—Ä–∞–ª—è":2,"–º–∞—Ä—Ç–∞":3,"–∞–ø—Ä–µ–ª—è":4,"–º–∞—è":5,"–∏—é–Ω—è":6,
        "–∏—é–ª—è":7,"–∞–≤–≥—É—Å—Ç–∞":8,"—Å–µ–Ω—Ç—è–±—Ä—è":9,"–æ–∫—Ç—è–±—Ä—è":10,"–Ω–æ—è–±—Ä—è":11,"–¥–µ–∫–∞–±—Ä—è":12}

REL=re.compile(r"^\s*—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫(?:—É–Ω–¥(?:—É|—ã)?)?|—Å|–º–∏–Ω(?:—É—Ç(?:—É|—ã)?)?|–º|—á–∞—Å(?:–∞|–æ–≤)?|—á)\s+(.+)$", re.I)
TOD=re.compile(r"^\s*—Å–µ–≥–æ–¥–Ω—è\s*–≤\s*(\d{1,2})[.:](\d{2})\s+(.+)$", re.I)
TOM=re.compile(r"^\s*–∑–∞–≤—Ç—Ä–∞\s*–≤\s*(\d{1,2})[.:](\d{2})\s+(.+)$", re.I)
DAY=re.compile(r"^\s*–∫–∞–∂–¥—ã–π\s*–¥–µ–Ω—å\s*–≤\s*(\d{1,2})[.:](\d{2})\s+(.+)$", re.I)
DNUM=re.compile(r"^\s*(\d{1,2})[.\-/](\d{1,2})(?:[.\-/](\d{4}))?(?:\s*–≤\s*(\d{1,2})[.:](\d{2}))?\s+(.+)$", re.I)
DTXT=re.compile(r"^\s*(\d{1,2})\s+([–∞-—è–ê-–Ø]+)(?:\s+(\d{4}))?(?:\s*–≤\s*(\d{1,2})[.:](\d{2}))?\s+(.+)$", re.I)

@dataclass
class Parsed:
    typ:str; title:str; run_utc:Optional[datetime]; h:Optional[int]; m:Optional[int]; d:Optional[int]

def parse(text:str, now:datetime)->Optional[Parsed]:
    text=text.strip()
    m=REL.match(text)
    if m:
        n=int(m.group(1)); u=m.group(2).lower(); title=m.group(3).strip()
        if u.startswith("—Å–µ–∫") or u=="—Å": delta=timedelta(seconds=n)
        elif u.startswith("–º–∏–Ω") or u=="–º": delta=timedelta(minutes=n)
        else: delta=timedelta(hours=n)
        run=(now+delta).astimezone(timezone.utc)
        return Parsed("once", title, run, None,None,None)
    m=TOD.match(text)
    if m:
        h,mi=int(m.group(1)),int(m.group(2)); title=m.group(3).strip()
        run=now.replace(hour=h,minute=mi,second=0,microsecond=0)
        if run<=now: run+=timedelta(days=1)
        return Parsed("once", title, run.astimezone(timezone.utc), None,None,None)
    m=TOM.match(text)
    if m:
        h,mi=int(m.group(1)),int(m.group(2)); title=m.group(3).strip()
        run=(now+timedelta(days=1)).replace(hour=h,minute=mi,second=0,microsecond=0)
        return Parsed("once", title, run.astimezone(timezone.utc), None,None,None)
    m=DAY.match(text)
    if m:
        h,mi=int(m.group(1)),int(m.group(2)); title=m.group(3).strip()
        return Parsed("daily", title, None, h,mi,None)
    m=DNUM.match(text)
    if m:
        d,mo=int(m.group(1)),int(m.group(2)); y=int(m.group(3) or now.year)
        h=int(m.group(4) or 10); mi=int(m.group(5) or 0); title=m.group(6).strip()
        run=datetime(y,mo,d,h,mi,tzinfo=TZ)
        if run<=now and not m.group(3): run=datetime(y+1,mo,d,h,mi,tzinfo=TZ)
        return Parsed("once", title, run.astimezone(timezone.utc), None,None,None)
    m=DTXT.match(text)
    if m:
        d=int(m.group(1)); mon=m.group(2).lower()
        if mon not in MONTHS: return None
        y=int(m.group(3) or now.year); h=int(m.group(4) or 10); mi=int(m.group(5) or 0)
        title=m.group(6).strip(); mo=MONTHS[mon]
        run=datetime(y,mo,d,h,mi,tzinfo=TZ)
        if run<=now and not m.group(3): run=datetime(y+1,mo,d,h,mi,tzinfo=TZ)
        return Parsed("once", title, run.astimezone(timezone.utc), None,None,None)
    return None

# ==== PLAN ====
def fmt(dt_utc:datetime)->str: return dt_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

async def job_once(ctx: ContextTypes.DEFAULT_TYPE):
    t=get_task(ctx.job.data["id"])
    if t: await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.title}")

async def schedule(app:Application, t:Task):
    jq=app.job_queue
    for j in jq.get_jobs_by_name(f"task_{t.id}"): j.schedule_removal()
    if t.type=="once" and t.run_at_utc and t.run_at_utc>datetime.now(timezone.utc):
        jq.run_once(job_once, when=t.run_at_utc, name=f"task_{t.id}", data={"id":t.id})
    elif t.type=="daily":
        jq.run_daily(job_once, time=dtime(hour=t.hour,minute=t.minute,tzinfo=TZ), name=f"task_{t.id}", data={"id":t.id})
    elif t.type=="monthly":
        async def monthly(ctx: ContextTypes.DEFAULT_TYPE):
            tt=get_task(ctx.job.data["id"])
            if tt and datetime.now(TZ).day==tt.day_of_month:
                await ctx.bot.send_message(tt.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {tt.title}")
        jq.run_daily(monthly, time=dtime(hour=t.hour,minute=t.minute,tzinfo=TZ), name=f"task_{t.id}", data={"id":t.id})

async def reschedule_all(app:Application):
    with db() as c:
        rows=c.execute("SELECT id,chat_id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks").fetchall()
    for r in rows: await schedule(app, row2task(r))

# ==== –ö–û–ú–ê–ù–î–´ ====
LAST={}

async def start_cmd(u:Update, c:ContextTypes.DEFAULT_TYPE):
    msg=(
      "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É.\n\n"
      "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123 (–Ω–∞–ø—Ä–∏–º–µ—Ä, VIP003).\n\n"
      "–ü—Ä–∏–º–µ—Ä—ã:\n"
      "‚Ä¢ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ–µ—Å—Ç—å / —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
      "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
      "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 09:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª\n"
      "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n"
      "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n\n"
      "‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´–∑–∞ N –º–∏–Ω—É—Ç¬ª: –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º—è –Ω–∞ N –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ."
    )
    await u.message.reply_text(msg)

async def affairs_cmd(u:Update, c:ContextTypes.DEFAULT_TYPE):
    chat=u.effective_chat.id
    if not (is_auth(chat) or u.effective_user.id==ADMIN_ID):
        await u.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏ –∫–ª—é—á (–ø—Ä–∏–º–µ—Ä: VIP003)."); return
    tasks=list_tasks(chat)
    if not tasks: await u.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–ª."); return
    now=datetime.now(TZ)
    def next_run(t:Task):
        if t.type=="once" and t.run_at_utc: return t.run_at_utc.astimezone(TZ)
        if t.type=="daily":
            cand=now.replace(hour=t.hour,minute=t.minute,second=0,microsecond=0)
            if cand<=now: cand+=timedelta(days=1); return cand
        y,m=now.year,now.month
        for _ in range(24):
            try:
                cand=datetime(y,m,t.day_of_month,t.hour,t.minute,tzinfo=TZ)
                if cand>now: return cand
                m=1 if m==12 else m+1;  y+=1 if m==1 else 0
            except ValueError:
                m=1 if m==12 else m+1;  y+=1 if m==1 else 0
        return now+timedelta(days=30)
    tasks=sorted(tasks, key=next_run)[:20]
    LAST[chat]=[t.id for t in tasks]
    lines=[]
    for i,t in enumerate(tasks,1):
        if t.type=="once": w=fmt(t.run_at_utc)
        elif t.type=="daily": w=f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}"
        else: w=f"–∫–∞–∂–¥–æ–µ {t.day_of_month} —á–∏—Å–ª–æ –≤ {t.hour:02d}:{t.minute:02d}"
        lines.append(f"{i}. {t.title} ‚Äî {w}")
    await u.message.reply_text("–¢–≤–æ–∏ –¥–µ–ª–∞:\n"+"\n".join(lines))

async def affairs_delete_cmd(u:Update, c:ContextTypes.DEFAULT_TYPE):
    chat=u.effective_chat.id
    if not (is_auth(chat) or u.effective_user.id==ADMIN_ID):
        await u.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏ –∫–ª—é—á."); return
    if not c.args or not c.args[0].isdigit():
        await u.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /affairs_delete <–Ω–æ–º–µ—Ä>"); return
    idx=int(c.args[0]); ids=LAST.get(chat)
    if not ids or idx<1 or idx>len(ids):
        await u.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ /affairs –∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä."); return
    tid=ids[idx-1]; t=get_task(tid)
    if t: delete_task(t.id); await u.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: ¬´{t.title}¬ª")
    else: await u.message.reply_text("–≠—Ç–æ –¥–µ–ª–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")

async def keys_left_cmd(u:Update, c:ContextTypes.DEFAULT_TYPE):
    if u.effective_user.id!=ADMIN_ID: return
    await u.message.reply_text(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π: {keys_left()} –∏–∑ 100.")

# ==== –¢–ï–ö–°–¢ ====
async def handle_text(u:Update, c:ContextTypes.DEFAULT_TYPE):
    chat=u.effective_chat.id; text=(u.message.text or "").strip()

    if not is_auth(chat) and u.effective_user.id!=ADMIN_ID:
        if use_key(chat, text):
            await u.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π /affairs –∏ –¥–æ–±–∞–≤–ª—è–π –¥–µ–ª–∞.")
        else:
            await u.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü—Ä–∏–º–µ—Ä: VIP003.")
        return

    m=re.fullmatch(r"(?i)\s*affairs\s+delete\s+(\d+)\s*", text)
    if m:
        idx=int(m.group(1)); ids=LAST.get(chat)
        if not ids or idx<1 or idx>len(ids):
            await u.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /affairs."); return
        tid=ids[idx-1]; t=get_task(tid)
        if t: delete_task(t.id); await u.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: ¬´{t.title}¬ª")
        else: await u.message.reply_text("–≠—Ç–æ –¥–µ–ª–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.")
        return

    now=datetime.now(TZ)
    p=parse(text, now)
    if not p:
        await u.message.reply_text("‚ö† –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä: ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª.")
        return

    tid=add_task(chat, p.title, p.typ, p.run_utc, p.h, p.m, p.d)
    t=get_task(tid)
    await schedule(c.application, t)
    if t.type=="once": msg=f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî {fmt(t.run_at_utc)}"
    elif t.type=="daily": msg=f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d} ‚Äî ¬´{t.title}¬ª"
    else: msg=f"–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: –∫–∞–∂–¥–æ–µ {t.day_of_month} —á–∏—Å–ª–æ –≤ {t.hour:02d}:{t.minute:02d} ‚Äî ¬´{t.title}¬ª"
    await u.message.reply_text(msg)

# ==== MAIN ====
def main():
    start_health()
    init_db()
    app=Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("affairs", affairs_cmd))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete_cmd))
    app.add_handler(CommandHandler("keys_left", keys_left_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    async def on_start(app_):
        await app_.bot.delete_webhook(drop_pending_updates=True)
        await reschedule_all(app_)
        import telegram, sys
        log.info("Bot started. TZ=%s | PTB=%s | Python=%s", TZ, getattr(telegram,"__version__","?"), sys.version)
    app.post_init=on_start
    app.run_polling()

if __name__=="__main__":
    main()
