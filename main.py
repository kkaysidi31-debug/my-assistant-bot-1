import os
import re
import json
from datetime import datetime, timedelta
import pytz

from flask import Flask, request, jsonify

from apscheduler.schedulers.background import BackgroundScheduler

import telebot
from telebot import types

# ------------------ –ö–æ–Ω—Ñ–∏–≥ ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
ADMIN_ID = int(os.getenv("ADMIN_ID", "963586834"))
TZ = pytz.timezone(os.getenv("TZ", "Europe/Kaliningrad"))

ACCESS_KEYS_LIST = os.getenv("ACCESS_KEYS", "VIP001,VIP002,VIP003").split(",")
ACCESS_KEYS = {k.strip(): None for k in ACCESS_KEYS_LIST if k.strip()}

BASE_URL = os.getenv("RENDER_EXTERNAL_URL", os.getenv("BASE_URL", "")).rstrip("/")
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
HEALTH_PATH = "/healthz"

DATA_FILE = "db.json"
TASKS_FILE = "tasks.json"

# ------------------ –ì–ª–æ–±–∞–ª—ã ------------------
ALLOWED_USERS = set()
PENDING_CHATS = set()
MAINTENANCE = False

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=True)
app = Flask(__name__)
scheduler = BackgroundScheduler(timezone=TZ)

HELP_TEXT = (
    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
    "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
    "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00 (—Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:00)\n"
    "(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Kaliningrad)"
)

# ------------------ –•—Ä–∞–Ω–µ–Ω–∏–µ ------------------
def _load(path, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def _save(path, obj):
    tmp = path + ".tmp"
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(obj, f, ensure_ascii=False, indent=2)
    os.replace(tmp, path)

def load_db():
    global ALLOWED_USERS, ACCESS_KEYS
    db = _load(DATA_FILE, {"allowed": [], "keys": {k: None for k in ACCESS_KEYS}})
    ALLOWED_USERS = set(db.get("allowed", []))
    # –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–ª—é—á–µ–π –∏–∑ env
    combined = {k: db.get("keys", {}).get(k) for k in ACCESS_KEYS}
    ACCESS_KEYS = combined

def save_db():
    _save(DATA_FILE, {"allowed": sorted(ALLOWED_USERS), "keys": ACCESS_KEYS})

def load_tasks():
    return _load(TASKS_FILE, {})  # {uid: [{id, text, run_at, chat_id}]}

def save_tasks(tasks):
    _save(TASKS_FILE, tasks)

# ------------------ –£—Ç–∏–ª–∏—Ç—ã ------------------
def fmt_dt(dt: datetime) -> str:
    return dt.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

def next_task_id(tasks, uid: str) -> int:
    used = {t["id"] for t in tasks.get(uid, [])}
    n = 1
    while n in used:
        n += 1
    return n

def schedule_task(uid: int, chat_id: int, task_id: int, when: datetime, text: str):
    job_id = f"{uid}-{task_id}"
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass
    scheduler.add_job(
        func=notify_due,
        trigger="date",
        run_date=when,
        args=[uid, chat_id, task_id, text],
        id=job_id,
        replace_existing=True,
        misfire_grace_time=60,
    )

def reschedule_all():
    tasks = load_tasks()
    for uid, arr in tasks.items():
        for t in arr:
            when = datetime.fromisoformat(t["run_at"])
            schedule_task(int(uid), t["chat_id"], t["id"], when, t["text"])

def parse_and_store(uid: int, chat_id: int, text: str):
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ—Ä–∞–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    now = datetime.now(TZ)

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ...
    m = re.search(r"—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å(?:–∞|–æ–≤)?)", text, re.I)
    if m:
        n = int(m.group(1))
        unit = m.group(2).lower()
        delta = timedelta(minutes=n) if unit.startswith("–º–∏–Ω") else timedelta(hours=n)
        run_at = now + delta
        todo = re.sub(r"—á–µ—Ä–µ–∑\s+\d+\s*(?:–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å(?:–∞|–æ–≤)?)", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        return store_task(uid, chat_id, todo, run_at)

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...
    m = re.search(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})", text, re.I)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        run_at = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if run_at < now:
            run_at = run_at + timedelta(days=1)
        todo = re.sub(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+\d{1,2}:\d{2}", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        return store_task(uid, chat_id, todo, run_at)

    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...
    m = re.search(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})", text, re.I)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        base = now + timedelta(days=1)
        run_at = base.replace(hour=hh, minute=mm, second=0, microsecond=0)
        todo = re.sub(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+\d{1,2}:\d{2}", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        return store_task(uid, chat_id, todo, run_at)

    # DD.MM.YYYY –≤ HH:MM ...
    m = re.search(r"(\d{1,2})\.(\d{1,2})\.(\d{4})\s+–≤\s+(\d{1,2}):(\d{2})", text, re.I)
    if m:
        dd, mm_, yyyy, hh, mi = map(int, m.groups())
        run_at = TZ.localize(datetime(yyyy, mm_, dd, hh, mi, 0)).astimezone(TZ)
        todo = re.sub(r"\d{1,2}\.\d{1,2}\.\d{4}\s+–≤\s+\d{1,2}:\d{2}", "", text, flags=re.I).strip() or "–¥–µ–ª–æ"
        return store_task(uid, chat_id, todo, run_at)

    return None

def store_task(uid: int, chat_id: int, todo: str, run_at: datetime):
    tasks = load_tasks()
    suid = str(uid)
    arr = tasks.get(suid, [])
    tid = next_task_id(tasks, suid)
    item = {"id": tid, "text": todo, "run_at": run_at.isoformat(), "chat_id": chat_id}
    arr.append(item)
    tasks[suid] = arr
    save_tasks(tasks)
    schedule_task(uid, chat_id, tid, run_at, todo)
    return item

# ------------------ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ------------------
def notify_due(uid: int, chat_id: int, task_id: int, text: str):
    try:
        bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{text}¬ª")
    except Exception:
        pass
    # –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª–∏–º –∑–∞–¥–∞—á—É
    tasks = load_tasks()
    suid = str(uid)
    tasks[suid] = [t for t in tasks.get(suid, []) if t["id"] != task_id]
    save_tasks(tasks)

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
@bot.message_handler(commands=["start"])
def start_cmd(msg: types.Message):
    if msg.from_user.id not in ALLOWED_USERS:
        bot.reply_to(msg, "–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    bot.reply_to(msg, HELP_TEXT)

@bot.message_handler(commands=["affairs"])
def affairs_cmd(msg: types.Message):
    if msg.from_user.id not in ALLOWED_USERS:
        bot.reply_to(msg, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    tasks = load_tasks()
    arr = sorted(tasks.get(str(msg.from_user.id), []), key=lambda t: t["run_at"])
    if not arr:
        bot.reply_to(msg, "–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–µ–ª –Ω–µ—Ç.")
        return
    lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:"]
    for i, t in enumerate(arr, 1):
        when = datetime.fromisoformat(t["run_at"])
        lines.append(f"{i}. {fmt_dt(when)} ‚Äî {t['text']}")
    bot.reply_to(msg, "\n".join(lines))

@bot.message_handler(commands=["affairs_delete"])
def affairs_delete_cmd(msg: types.Message):
    if msg.from_user.id not in ALLOWED_USERS:
        bot.reply_to(msg, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    args = msg.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(msg, "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä: /affairs_delete N")
        return
    try:
        num = int(args[1].strip())
    except ValueError:
        bot.reply_to(msg, "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º.")
        return
    tasks = load_tasks()
    arr = sorted(tasks.get(str(msg.from_user.id), []), key=lambda t: t["run_at"])
    if num < 1 or num > len(arr):
        bot.reply_to(msg, "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return
    task = arr[num - 1]
    # —É–¥–∞–ª–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    arr = [t for t in arr if t["id"] != task["id"]]
    tasks[str(msg.from_user.id)] = arr
    save_tasks(tasks)
    # –∏ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        scheduler.remove_job(f"{msg.from_user.id}-{task['id']}")
    except Exception:
        pass
    bot.reply_to(msg, "‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

@bot.message_handler(commands=["maintenance_on"])
def maintenance_on(msg: types.Message):
    global MAINTENANCE
    if msg.from_user.id != ADMIN_ID:
        return
    MAINTENANCE = True
    bot.reply_to(msg, "üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

@bot.message_handler(commands=["maintenance_off"])
def maintenance_off(msg: types.Message):
    global MAINTENANCE
    if msg.from_user.id != ADMIN_ID:
        return
    MAINTENANCE = False
    bot.reply_to(msg, "üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        try:
            bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        except Exception:
            pass

# ------------------ –ì–æ–ª–æ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ------------------
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

def transcribe_ogg_bytes(data: bytes) -> str | None:
    if not OPENAI_API_KEY:
        return None
    try:
        from openai import OpenAI
        import io
        client = OpenAI(api_key=OPENAI_API_KEY)
        bio = io.BytesIO(data); bio.name = "audio.ogg"
        r = client.audio.transcriptions.create(model="whisper-1", file=bio)
        return (r.text or "").strip()
    except Exception:
        return None

@bot.message_handler(content_types=["voice"])
def voice_handler(msg: types.Message):
    if msg.from_user.id not in ALLOWED_USERS:
        bot.reply_to(msg, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if MAINTENANCE and msg.from_user.id != ADMIN_ID:
        PENDING_CHATS.add(msg.chat.id)
        bot.reply_to(msg, "‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    try:
        file = bot.get_file(msg.voice.file_id)
        data = bot.download_file(file.file_path)
        text = transcribe_ogg_bytes(data) or ""
        if not text:
            bot.reply_to(msg, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å (–∏–ª–∏ –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω).")
            return
        # –ø—Ä–æ–∫–∏–Ω–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        fake = types.Message(
            message_id=msg.message_id,
            date=msg.date,
            chat=msg.chat,
            from_user=msg.from_user,
            content_type="text",
            options=None,
            json_string=None
        )
        fake.text = text
        handle_text(fake)
    except Exception:
        bot.reply_to(msg, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.")

# ------------------ –¢–µ–∫—Å—Ç ------------------
@bot.message_handler(content_types=["text"])
def handle_text(msg: types.Message):
    global MAINTENANCE
    uid = msg.from_user.id
    chat_id = msg.chat.id
    text = (msg.text or "").strip()

    # –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å
    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", text):
            if text in ACCESS_KEYS and ACCESS_KEYS[text] is None:
                ACCESS_KEYS[text] = uid
                ALLOWED_USERS.add(uid)
                save_db()
                bot.reply_to(msg, "–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                bot.send_message(chat_id, HELP_TEXT)
            else:
                bot.reply_to(msg, "–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        else:
            bot.reply_to(msg, "–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        bot.reply_to(msg, "‚ö†Ô∏è –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ø–∞—Ä—Å–∏–Ω–≥
    item = parse_and_store(uid, chat_id, text)
    if item:
        when = datetime.fromisoformat(item["run_at"])
        bot.reply_to(msg, f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {fmt_dt(when)} ‚Äî ¬´{item['text']}¬ª. (TZ: {TZ})")
    else:
        bot.reply_to(msg, "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã —Å–º–æ—Ç—Ä–∏ –≤ /start")

# ------------------ Flask/Webhook ------------------
@app.get(HEALTH_PATH)
def health():
    return jsonify({"ok": True})

@app.post(WEBHOOK_PATH)
def telegram_webhook():
    update = telebot.types.Update.de_json(request.get_json(force=True))
    bot.process_new_updates([update])
    return "OK", 200

# –∫–æ—Ä–µ–Ω—å –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
@app.get("/")
def root():
    return "Telegram bot is alive", 200

def set_bot_commands():
    try:
        bot.set_my_commands([
            types.BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
            types.BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
            types.BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        ])
    except Exception:
        pass

def setup_webhook():
    if BASE_URL:
        try:
            bot.remove_webhook()
        except Exception:
            pass
        url = f"{BASE_URL}{WEBHOOK_PATH}"
        bot.set_webhook(url, max_connections=40, allowed_updates=["message", "edited_message"])
        print("Webhook set to:", url)
    else:
        print("BASE_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî webhook –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.")

def bootstrap():
    load_db()
    set_bot_commands()
    if not scheduler.running:
        scheduler.start()
    reschedule_all()
    setup_webhook()

# ------------------ Entrypoint ------------------
bootstrap()

# –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'app' –¥–ª—è waitress/gunicorn
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ Render:
# waitress-serve --host=0.0.0.0 --port=$PORT main:app
