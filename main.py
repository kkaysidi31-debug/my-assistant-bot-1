import logging
import re
import os
from datetime import datetime, timedelta
from pytz import timezone
from flask import Flask, request, Response
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
TIMEZONE = timezone("Europe/Kaliningrad")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞
def generate_keys(n=100):
    keys = {}
    for i in range(n):
        key = f"VIP{str(i+1).zfill(3)}"  # VIP001 ... VIP100
        keys[key] = None
    return keys

ACCESS_KEYS = generate_keys(100)
ALLOWED_USERS = set()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.start()

# ================== –ö–æ–º–∞–Ω–¥—ã ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text(
            "üîí –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.\n\n"
            "–í–≤–µ–¥–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ABC123"
        )
        return
    await update.message.reply_text("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                    "‚Äî —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ...\n"
                                    "‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...\n"
                                    "‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...\n"
                                    "‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...\n"
                                    "‚Äî 30 –∞–≤–≥—É—Å—Ç–∞ ...")

# ================== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π ==================

async def check_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    user_id = update.effective_user.id

    if user_id in ALLOWED_USERS:
        return

    if text in ACCESS_KEYS and ACCESS_KEYS[text] is None:
        ACCESS_KEYS[text] = user_id
        ALLOWED_USERS.add(user_id)
        await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# ================== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ==================

async def remind(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    data = job.kwargs.get("data")
    chat_id = job.chat_id
    await context.bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {data}")

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∫–ª—é—á.")
        return

    text = update.message.text.strip()
    task = text

    # 1) —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç
    m = re.match(r"—á–µ—Ä–µ–∑ (\d+) –º–∏–Ω—É—Ç", text)
    if m:
        minutes = int(m.group(1))
        run_time = datetime.now(TIMEZONE) + timedelta(minutes=minutes)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                          kwargs={"data": task}, id=f"{user_id}_{run_time}")
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return

    # 2) —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM
    m = re.match(r"—Å–µ–≥–æ–¥–Ω—è –≤ (\d{1,2}):(\d{2})", text)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        run_time = datetime.now(TIMEZONE).replace(hour=hh, minute=mm, second=0, microsecond=0)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                          kwargs={"data": task}, id=f"{user_id}_{run_time}")
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –≤ {hh:02d}:{mm:02d} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return

    # 3) –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM
    m = re.match(r"–∑–∞–≤—Ç—Ä–∞ –≤ (\d{1,2}):(\d{2})", text)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        run_time = (datetime.now(TIMEZONE) + timedelta(days=1)).replace(hour=hh, minute=mm, second=0, microsecond=0)
        scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                          kwargs={"data": task}, id=f"{user_id}_{run_time}")
        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ {hh:02d}:{mm:02d} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return

    # 4) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM
    m = re.match(r"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ (\d{1,2}):(\d{2})", text)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        scheduler.add_job(remind, "cron", hour=hh, minute=mm, args=[context],
                          kwargs={"data": task}, id=f"{user_id}_daily_{hh}{mm}")
        await update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {hh:02d}:{mm:02d} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return

    # 5) –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞: 30 –∞–≤–≥—É—Å—Ç–∞
    m = re.match(r"(\d{1,2}) ([–∞-—è–ê-–Ø]+)", text)
    if m:
        day, month_name = m.groups()
        months = {
            "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
            "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
            "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
        }
        if month_name in months:
            month = months[month_name]
            year = datetime.now(TIMEZONE).year
            run_time = datetime(year, month, int(day), 9, 0, tzinfo=TIMEZONE)  # 09:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            scheduler.add_job(remind, "date", run_date=run_time, args=[context],
                              kwargs={"data": task}, id=f"{user_id}_{run_time}")
            await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {day} {month_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 09:00!")
            return

    await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                    "‚Äî —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ...\n"
                                    "‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...\n"
                                    "‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...\n"
                                    "‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...\n"
                                    "‚Äî 30 –∞–≤–≥—É—Å—Ç–∞ ...")

# ================== –ó–∞–ø—É—Å–∫ ==================

def main():
    BOT_TOKEN = os.getenv("BOT_TOKEN")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_key))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder))

    app.run_polling()

if __name__ == "__main__":
    main()
