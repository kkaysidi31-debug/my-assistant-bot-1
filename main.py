group("m"))
        target = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        return {"once_at": target, "text": m.group("text").strip()}

    # 3) –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ‚Ä¶
    m = re.match(rf"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        target = base + timedelta(days=1)
        return {"once_at": target, "text": m.group("text").strip()}

    # 4) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ‚Ä¶
    m = re.match(rf"(–∫–∞–∂–¥—ã–π|–µ–∂–µ–¥–Ω(–µ–≤–Ω–æ)?)\s*–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        return {"daily_at": time(hh, mm, tzinfo=TIMEZONE), "text": m.group("text").strip()}

    # 5) ¬´30 –∞–≤–≥—É—Å—Ç–∞ ‚Ä¶¬ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ¬´–≤ HH:MM ‚Ä¶¬ª)
    #    –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
    m = re.match(
        rf"(?P<day>\d{{1,2}})\s+(?P<month>[–∞-—è]+)(?:\s+–≤\s+{RE_TIME})?\s+(?P<text>.+)$", t
    )
    if m and m.group("month") in MONTHS:
        day = int(m.group("day"))
        month = MONTHS[m.group("month")]
        hh = int(m.group("h")) if m.group("h") else 9
        mm = int(m.group("m")) if m.group("m") else 0
        year = now_local().year
        target = datetime(year, month, day, hh, mm, tzinfo=TIMEZONE)
        # –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—ë–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        if target < now_local():
            try:
                target = target.replace(year=year + 1)
            except ValueError:
                pass
        return {"once_at": target, "text": m.group("text").strip()}

    return None

# --------- –î–û–°–¢–£–ü –ü–û –ö–õ–Æ–ß–£ ---------
async def require_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    uid = update.effective_user.id
    if uid in ALLOWED_USERS:
        return True

    text = (update.message.text or "").strip()
    if re.fullmatch(r"VIP\d{3}", text, flags=re.IGNORECASE):
        key = text.upper()
        if key in ACCESS_KEYS and ACCESS_KEYS[key] is None:
            # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
            ACCESS_KEYS[key] = uid
            ALLOWED_USERS.add(uid)
            save_json(KEYS_FILE, ACCESS_KEYS)
            save_json(ACCESS_FILE, list(ALLOWED_USERS))
            await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n" + WELCOME)
            return True
        else:
            await update.message.reply_text("‚ùå –ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            return False

    await update.message.reply_text(
        "üîí –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ü—Ä–∏—à–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤–∏–¥–∞: VIP001 ‚Ä¶ VIP100."
    )
    return False

# --------- –•–≠–ù–î–õ–ï–†–´ ---------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await require_access(update, context):
        await update.message.reply_text(WELCOME)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await require_access(update, context):
        return

    cmd = parse_command(update.message.text or "")
    if not cmd:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç ‚Ä¶\n"
            "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ‚Ä¶\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ‚Ä¶\n"
            "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ‚Ä¶\n"
            "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ ‚Ä¶"
        )
        return

    chat_id = update.effective_chat.id
    app = context.application

    if "after" in cmd:
        when = now_local() + cmd["after"]
        schedule_once(app, when, chat_id, cmd["text"])
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{cmd['text']}¬ª. (TZ: {TIMEZONE.zone})"
        )
        return

    if "once_at" in cmd:
        when = cmd["once_at"]
        if when < now_local():
            await update.message.reply_text("‚õî –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
            return
        schedule_once(app, when, chat_id, cmd["text"])
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{cmd['text']}¬ª.(TZ: {TIMEZONE.zone})"
        )
        return

    if "daily_at" in cmd:
        schedule_daily(app, cmd["daily_at"], chat_id, cmd["text"])
        hhmm = f"{cmd['daily_at'].hour:02d}:{cmd['daily_at'].minute:02d}"
        await update.message.reply_text(
            f"‚úÖ –û–∫, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hhmm} ‚Äî ¬´{cmd['text']}¬ª. (TZ: {TIMEZONE.zone})"
        )
    return

# --------- –ó–ê–ü–£–°–ö (WEBHOOK) ---------
async def main():
    if not BOT_TOKEN:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    public_url = os.getenv("RENDER_EXTERNAL_URL", "").strip()
    if not public_url:
        # –ù–∞ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –¥–µ–ø–ª–æ–µ URL –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç ‚Äî —Å–¥–µ–ª–∞–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¥–µ–ø–ª–æ–π
        log.warning("RENDER_EXTERNAL_URL –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –¥–µ–ø–ª–æ–π –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞.")
        raise SystemExit(1)

    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞ = —Ç–æ–∫–µ–Ω (—É–¥–æ–±–Ω–æ –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ)
    url_path = BOT_TOKEN
    webhook_url = f"{public_url.rstrip('/')}/{url_path}"
    log.info("–°—Ç–∞–≤–ª—é –≤–µ–±—Ö—É–∫: %s", webhook_url)

    # –í PTB v21 —É–∫–∞–∑—ã–≤–∞–µ–º url=, –ù–ï webhook_url=
    await application.bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES)

    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π aiohttp-—Å–µ—Ä–≤–µ—Ä PTB
    await application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=url_path,
        # —á—Ç–æ–±—ã PTB –Ω–µ –ø—ã—Ç–∞–ª—Å—è –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π event loop –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö
        close_loop=False,
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
