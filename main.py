import os
import re
import json
import logging
from datetime import datetime, timedelta, time as dtime

from pytz import timezone
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
ADMIN_ID = 963586834  # —Ç–≤–æ–π id
TZ = timezone("Europe/Kaliningrad")
APP_URL = os.getenv("APP_URL", "").rstrip("/")
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
PORT = int(os.getenv("PORT", "10000"))

# –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ VIP001..VIP100
ACCESS_KEYS = {f"VIP{str(i).zfill(3)}": None for i in range(1, 101)}
ALLOWED_USERS = set()           # user_id, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å
PENDING_CHATS = set()           # –∫—Ç–æ –ø–∏—Å–∞–ª –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö—Ä–∞–±–æ—Ç
MAINTENANCE = False

DB_PATH = "db.json"             # —Ñ–∞–π–ª "–±–∞–∑—ã"

# –ú–µ—Å—è—Ü—ã –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
    "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
    "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
}

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("bot")

# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------
def now_local() -> datetime:
    return datetime.now(TZ)

def load_db():
    """–ß–∏—Ç–∞–µ–º –¥–µ–ª–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if not os.path.exists(DB_PATH):
        return {}
    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
        # –∫–ª—é—á–∏ json ‚Äî —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∏–≤–µ–¥—ë–º id –∫ str –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        return {str(k): v for k, v in data.items()}
    except Exception:
        return {}

def save_db():
    """–ü–∏—à–µ–º –¥–µ–ª–∞ –≤ —Ñ–∞–π–ª."""
    try:
        with open(DB_PATH, "w", encoding="utf-8") as f:
            json.dump(DB, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.error("save_db error: %s", e)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DB: { str(user_id): [ {id, when_iso, text, periodic}, ... ] }
DB = load_db()

def add_task(uid: int, when_dt: datetime, text: str, periodic: bool, job_id: str):
    u = str(uid)
    DB.setdefault(u, [])
    DB[u].append({
        "id": job_id,
        "when_iso": when_dt.isoformat(),
        "text": text,
        "periodic": periodic
    })
    DB[u].sort(key=lambda x: x["when_iso"])
    save_db()

def remove_task(uid: int, job_id: str) -> bool:
    u = str(uid)
    if u not in DB:
        return False
    before = len(DB[u])
    DB[u] = [t for t in DB[u] if t["id"] != job_id]
    if len(DB[u]) != before:
        save_db()
        return True
    return False

def list_tasks(uid: int):
    return DB.get(str(uid), [])

# -------------------- –ü–ê–†–°–ï–† –†–£–°–°–ö–û–ì–û –¢–ï–ö–°–¢–ê --------------------
RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"
RE_NUM = r"(?P<n>\d{1,3})"
RE_MONTH = r"(?P<d>\d{1,2})\s+(?P<month>[–∞-—è]+)"
RE_TODAY = rf"^(?:—Å–µ–≥–æ–¥–Ω—è)\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$"
RE_TMRW = rf"^(?:–∑–∞–≤—Ç—Ä–∞)\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$"
RE_AFTER = rf"^(?:—á–µ—Ä–µ–∑)\s+{RE_NUM}\s+(?P<unit>–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å[–∞—É–æ–≤]?)\s+(?P<text>.+)$"
RE_DAILY = rf"^(?:–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å)\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$"
RE_DATE = rf"^{RE_MONTH}(?:\s+–≤\s+{RE_TIME})?\s+(?P<text>.+)$"

def parse_text_to_schedule(t: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
      ("once_at", datetime, text)  ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
      ("daily_at", time, text)     ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    –ª–∏–±–æ None –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.
    """
    t = " ".join(t.split()).strip().lower()

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
    m = re.match(RE_AFTER, t)
    if m:
        n = int(m.group("n"))
        unit = m.group("unit")
        delta = timedelta(minutes=n) if unit.startswith("–º–∏–Ω—É—Ç") else timedelta(hours=n)
        when = now_local() + delta
        return ("once_at", when.replace(second=0, microsecond=0), m.group("text").strip())

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ‚Ä¶
    m = re.match(RE_TODAY, t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        return ("once_at", base, m.group("text").strip())

    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ‚Ä¶
    m = re.match(RE_TMRW, t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0) + timedelta(days=1)
        return ("once_at", base, m.group("text").strip())

    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ‚Ä¶
    m = re.match(RE_DAILY, t)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        return ("daily_at", dtime(hh, mm, tzinfo=TZ), m.group("text").strip())

    # 30 –∞–≤–≥—É—Å—Ç–∞ [–≤ 09:00] ‚Ä¶
    m = re.match(RE_DATE, t)
    if m:
        d = int(m.group("d"))
        mon_name = m.group("month")
        mon = MONTHS.get(mon_name)
        if mon:
            hh = int(m.group("h")) if m.group("h") else 9
            mm = int(m.group("m")) if m.group("m") else 0
            y = now_local().year
            when = TZ.localize(datetime(y, mon, d, hh, mm))
            return ("once_at", when, m.group("text").strip())

    return None

# -------------------- –•–ï–ù–î–õ–ï–†–´ --------------------
async def send_examples(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –Ω–∞–ø–æ–º–∏–Ω–∞—é, –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00 (—Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 14:00)\n"
        f"(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ})"
    )
    await update.message.reply_text(text)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid not in ALLOWED_USERS:
        await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return
    await send_examples(update, context)

async def affairs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    tasks = list_tasks(uid)
    if not tasks:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –¥–µ–ª –ø—É—Å—Ç.")
        return
    lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–ª–∞:"]
    for i, t in enumerate(tasks, 1):
        dt = datetime.fromisoformat(t["when_iso"])
        dt = TZ.normalize(dt.astimezone(TZ))
        lines.append(f"{i}. {dt:%d.%m.%Y %H:%M} ‚Äî {t['text']}")
    await update.message.reply_text("\n".join(lines))

async def affairs_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä: /affairs_delete N")
        return
    try:
        num = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_tasks = list_tasks(uid)
    if not (1 <= num <= len(user_tasks)):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    # —Å–Ω–∏–º–∞–µ–º job –∏ —É–¥–∞–ª—è–µ–º –∏–∑ DB
    job_id = user_tasks[num - 1]["id"]
    for j in context.job_queue.get_jobs_by_name(job_id):
        j.schedule_removal()
    ok = remove_task(uid, job_id)
    await update.message.reply_text("–£–¥–∞–ª–µ–Ω–æ ‚úÖ" if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ.")

# ---- –¢–µ—Ö—Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ----
async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != ADMIN_ID:
        return
    global MAINTENANCE
    MAINTENANCE = True
    await update.message.reply_text("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != ADMIN_ID:
        return
    global MAINTENANCE
    MAINTENANCE = False
    await update.message.reply_text("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    # —É–≤–µ–¥–æ–º–∏–º –æ–∂–∏–¥–∞–≤—à–∏—Ö
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        try:
            await context.bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        except Exception:
            pass

# ---- –ü—Ä–∏—Ö–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ----
async def remind_job(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data  # {uid, text, periodic}
    uid = data["uid"]
    txt = data["text"]
    await context.bot.send_message(uid, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: ¬´{txt}¬ª")

    # –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ ‚Äî —É–±—Ä–∞—Ç—å –∏–∑ DB
    if not data.get("periodic"):
        remove_task(uid, context.job.name)

# ---- –¢–µ–∫—Å—Ç—ã/–∫–ª—é—á–∏/–ª–æ–≥–∏–∫–∞ ----
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE

    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É
    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", msg):
            if msg in ACCESS_KEYS and ACCESS_KEYS[msg] is None:
                ACCESS_KEYS[msg] = uid
                ALLOWED_USERS.add(uid)
                save_db()
                await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                await send_examples(update, context)
            else:
                await update.message.reply_text("–ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        else:
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123.")
        return

    # 2) –¢–µ—Ö—Ä–∞–±–æ—Ç—ã
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await update.message.reply_text("üü° –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –°–µ–π—á–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –°–æ–æ–±—â–∏–º –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    # 3) –ü–∞—Ä—Å–∏–Ω–≥
    parsed = parse_text_to_schedule(msg)
    if not parsed:
        await update.message.reply_text(
            "‚ùì –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "‚Äî —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤ ‚Ä¶\n"
            "‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ‚Ä¶\n"
            "‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ‚Ä¶\n"
            "‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ‚Ä¶\n"
            "‚Äî DD <–º–µ—Å—è—Ü> [–≤ HH:MM] ‚Ä¶"
        )
        return

    kind, target, text = parsed

    # 4) –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if kind == "once_at":
        when = target
        job_id = f"once:{uid}:{int(when.timestamp())}"
        context.job_queue.run_once(
            remind_job,
            when - now_local(),
            name=job_id,
            data={"uid": uid, "text": text, "periodic": False},
            chat_id=uid,
        )
        add_task(uid, when, text, False, job_id)
        await update.message.reply_text(f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when:%Y-%m-%d %H:%M} ‚Äî ¬´{text}¬ª. (TZ: {TZ})")

    else:  # daily_at
        t: dtime = target
        # –±–ª–∏–∂–∞–π—à–µ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
        now = now_local()
        first = now.replace(hour=t.hour, minute=t.minute, second=0, microsecond=0)
        if first <= now:
            first += timedelta(days=1)

        job_id = f"daily:{uid}:{t.hour:02d}{t.minute:02d}"
        context.job_queue.run_daily(
            remind_job,
            time=t,
            name=job_id,
            data={"uid": uid, "text": text, "periodic": True},
            chat_id=uid,
            first=first
        )
        add_task(uid, first, text, True, job_id)
        await update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {t.hour:02d}:{t.minute:02d} ‚Äî ¬´{text}¬ª.")

# -------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø --------------------
async def set_commands(app: Application):
    cmds = [
        BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
        BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
        BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
        BotCommand("maintenance_on", "–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand("maintenance_off", "–í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)"),
    ]
    try:
        await app.bot.set_my_commands(cmds)
    except Exception as e:
        log.warning("set_my_commands warn: %s", e)

def build_application() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("affairs", affairs))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off))

    # –¢–µ–∫—Å—Ç—ã
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    return app

async def post_init(app: Application):
    await set_commands(app)

def main():
    app = build_application()
    app.post_init = post_init  # –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞

    # Webhook
    if not APP_URL:
        raise RuntimeError("APP_URL –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –≤–Ω–µ—à–Ω–∏–π URL Render, –Ω–∞–ø—Ä.: https://<service>.onrender.com")

    webhook_path = f"/{BOT_TOKEN}"
    webhook_url = f"{APP_URL}{webhook_path}"

    log.info("Starting webhook on port %s", PORT)
    # PTB —Å–∞–º –ø–æ–¥–Ω—è–º–µ—Ç aiohttp-—Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è –∫ PORT
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
