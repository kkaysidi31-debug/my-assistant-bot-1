import os
import re
import logging
from datetime import datetime, timedelta, timezone, time
from zoneinfo import ZoneInfo

from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ---------- –æ–∫—Ä—É–∂–µ–Ω–∏–µ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT = int(os.getenv("PORT", "10000"))
PUBLIC_URL = os.getenv("RENDER_EXTERNAL_URL", "").strip()

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ö–ê–õ–ò–ù–ò–ù–ì–†–ê–î)
# –í–∞–∂–Ω–æ: —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA: "Europe/Kaliningrad"
TZ_NAME = os.getenv("TZ", "Europe/Kaliningrad")
LOCAL_TZ = ZoneInfo(TZ_NAME)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
log = logging.getLogger("bot")

# ---------- —É—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ ----------
def now_local() -> datetime:
    return datetime.now(LOCAL_TZ)

def to_utc(dt_local: datetime) -> datetime:
    return dt_local.astimezone(timezone.utc)

# ---------- handlers ----------
async def start(update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        f"(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ_NAME})"
    )

async def help_cmd(update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def remind_callback(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data or {}
    chat_id = context.job.chat_id
    text = data.get("text", "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    await context.bot.send_message(chat_id=chat_id, text=f"üîî {text}")

# ---------- –ø–∞—Ä—Å–µ—Ä –Ω–∞ —Ä—É—Å—Å–∫–æ–º ----------
RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"

def parse_message(msg: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å –æ–¥–Ω–∏–º –∏–∑ –∫–ª—é—á–µ–π:
      - {'once_at': datetime, 'text': str}
      - {'after': timedelta, 'text': str}
      - {'daily_at': time(tzinfo=LOCAL_TZ), 'text': str}
    –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ ‚Äî None.
    """
    s = (msg or "").strip().lower()
    # —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ "–Ω–∞–ø–æ–º–Ω–∏"/"–Ω–∞–ø–æ–º–Ω–∏—Ç—å"
    s = re.sub(r"^(–Ω–∞–ø–æ–º–Ω–∏(—Ç—å)?\s+)", "", s)

    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m = re.match(rf"–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", s)
    if m:
        hh = int(m.group("h")); mm = int(m.group("m"))
        text = m.group("text").strip()
        return {"daily_at": time(hour=hh, minute=mm, tzinfo=LOCAL_TZ), "text": text}

    # —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å(–æ–≤) <—Ç–µ–∫—Å—Ç>
    m = re.match(
        r"—á–µ—Ä–µ–∑\s+(?P<n>\d+)\s*(?P<unit>–º–∏–Ω—É—Ç(?:—É|—ã)?|–º–∏–Ω|—á(?:–∞—Å(?:–∞|–æ–≤)?)?)\s+(?P<text>.+)$",
        s
    )
    if m:
        n = int(m.group("n")); unit = m.group("unit"); text = m.group("text").strip()
        if unit.startswith("–º–∏–Ω"):
            delta = timedelta(minutes=n)
        else:
            delta = timedelta(hours=n)
        return {"after": delta, "text": text}

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m = re.match(rf"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", s)
    if m:
        hh = int(m.group("h")); mm = int(m.group("m")); text = m.group("text").strip()
        target = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        if target <= now_local():
            target += timedelta(days=1)
        return {"once_at": target, "text": text}

    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM <—Ç–µ–∫—Å—Ç>
    m = re.match(rf"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(?P<text>.+)$", s)
    if m:
        hh = int(m.group("h")); mm = int(m.group("m")); text = m.group("text").strip()
        base = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        target = base + timedelta(days=1)
        return {"once_at": target, "text": text}

    # –≤ HH:MM <—Ç–µ–∫—Å—Ç> (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ ‚Äî –Ω–∞ –∑–∞–≤—Ç—Ä–∞)
    m = re.match(rf"–≤\s+{RE_TIME}\s+(?P<text>.+)$", s)
    if m:
        hh = int(m.group("h")); mm = int(m.group("m")); text = m.group("text").strip()
        target = now_local().replace(hour=hh, minute=mm, second=0, microsecond=0)
        if target <= now_local():
            target += timedelta(days=1)
                return {"once_at": target, "text": text}

    return None

async def text_handler(update, context: ContextTypes.DEFAULT_TYPE):
    parsed = parse_message(update.message.text)
    if not parsed:
        await update.message.reply_text(
            "–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
            "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
            "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
            "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞"
        )
        return

    if "after" in parsed:
        when_local = now_local() + parsed["after"]
        when_utc = to_utc(when_local)
        context.application.job_queue.run_once(
            remind_callback, when=when_utc,
            chat_id=update.effective_chat.id,
            data={"text": parsed["text"]},
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when_local.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ_NAME})"
        )
        return

    if "once_at" in parsed:
        when_local = parsed["once_at"]
        when_utc = to_utc(when_local)
        context.application.job_queue.run_once(
            remind_callback, when=when_utc,
            chat_id=update.effective_chat.id,
            data={"text": parsed["text"]},
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {when_local.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ_NAME})"
        )
        return

    if "daily_at" in parsed:
        context.application.job_queue.run_daily(
            remind_callback,
            time=parsed["daily_at"],
            chat_id=update.effective_chat.id,
            data={"text": parsed["text"]},
            name=f"daily-{update.effective_chat.id}-{parsed['daily_at'].strftime('%H%M')}",
        )
        await update.message.reply_text(
            f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ {parsed['daily_at'].strftime('%H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ_NAME})"
        )
        return

# ---------- –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ / –≤–µ–±—Ö—É–∫ ----------
def build_app() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    return app

if __name__ == "__main__":
    if not BOT_TOKEN:
        raise SystemExit("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = build_app()
    url_path = BOT_TOKEN
    webhook_url = f"{PUBLIC_URL.rstrip('/')}/{url_path}" if PUBLIC_URL else None
    if webhook_url:
        log.info(f"–ó–∞–ø—É—Å–∫–∞—é —Å –≤–µ–±—Ö—É–∫–æ–º: {webhook_url}")
    else:
        log.warning("RENDER_EXTERNAL_URL –ø—É—Å—Ç ‚Äî —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç –±–µ–∑ –≤–µ–±—Ö—É–∫–∞, —Å–¥–µ–ª–∞–π –ø–æ–≤—Ç–æ—Ä–Ω—ã–π Deploy –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –±–∏–ª–¥–∞.")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=url_path,
        webhook_url=webhook_url,   # –º–æ–∂–µ—Ç –±—ã—Ç—å None –Ω–∞ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        close_loop=False,
    )
