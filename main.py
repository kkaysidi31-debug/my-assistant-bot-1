import logging
import re
import sqlite3
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ================= –ù–ê–°–¢–†–û–ô–ö–ò =================
BOT_TOKEN = "8492146866:AAE6yWRhg1wa9qn7_PV3NRJS6lh1dFtjxqA"
ADMIN_ID = 963586834
TZ = timezone(timedelta(hours=2), name="Europe/Kaliningrad")

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("reminder-bot")

DB_FILE = "tasks.db"
ALLOWED_KEYS = [f"VIP{i:03d}" for i in range(1, 101)]
ACCESS_GRANTED: Dict[int, bool] = {}
MAINTENANCE = False
LAST_LIST_INDEX: Dict[int, List[int]] = {}

# ================= –î–ê–ù–ù–´–ï =================
@dataclass
class Task:
    id: int
    chat_id: int
    title: str
    type: str
    run_at_utc: Optional[datetime]
    hour: Optional[int]
    minute: Optional[int]
    day_of_month: Optional[int]

# ================= –ë–ê–ó–ê =================
def db():
    return sqlite3.connect(DB_FILE)

def init_db():
    with db() as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS tasks(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                title TEXT,
                type TEXT,
                run_at_utc TEXT,
                hour INTEGER,
                minute INTEGER,
                day_of_month INTEGER
            )
            """
        )

def add_task(chat_id, title, type_, run_at_utc, hour, minute, day_of_month):
    with db() as conn:
        cur = conn.execute(
            "INSERT INTO tasks(chat_id,title,type,run_at_utc,hour,minute,day_of_month) VALUES (?,?,?,?,?,?,?)",
            (
                chat_id,
                title,
                type_,
                run_at_utc.isoformat() if run_at_utc else None,
                hour,
                minute,
                day_of_month,
            ),
        )
        return cur.lastrowid

def get_task(task_id: int) -> Optional[Task]:
    with db() as conn:
        cur = conn.execute("SELECT * FROM tasks WHERE id=?", (task_id,))
        row = cur.fetchone()
        return row and Task(
            id=row[0],
            chat_id=row[1],
            title=row[2],
            type=row[3],
            run_at_utc=datetime.fromisoformat(row[4]) if row[4] else None,
            hour=row[5],
            minute=row[6],
            day_of_month=row[7],
        )

def list_active_tasks(chat_id: int) -> List[Task]:
    with db() as conn:
        cur = conn.execute("SELECT * FROM tasks WHERE chat_id=?", (chat_id,))
        rows = cur.fetchall()
        return [
            Task(
                id=r[0],
                chat_id=r[1],
                title=r[2],
                type=r[3],
                run_at_utc=datetime.fromisoformat(r[4]) if r[4] else None,
                hour=r[5],
                minute=r[6],
                day_of_month=r[7],
            )
            for r in rows
        ]

def delete_task(task_id: int):
    with db() as conn:
        conn.execute("DELETE FROM tasks WHERE id=?", (task_id,))

# ================= –ü–ê–†–°–ò–ù–ì =================
RELATIVE_RE = re.compile(r"—á–µ—Ä–µ–∑\s+(\d+)\s+(.+)", re.I)
TODAY_RE = re.compile(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)", re.I)
TOMORROW_RE = re.compile(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)", re.I)
DAILY_RE = re.compile(r"–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)", re.I)
MONTHLY_RE = re.compile(r"(\d{1,2})\s+–∞–≤–≥—É—Å—Ç–∞\s+(.+)", re.I)

@dataclass
class ParsedTask:
    type: str
    title: str
    run_at_utc: Optional[datetime]
    hour: Optional[int]
    minute: Optional[int]
    day_of_month: Optional[int]

def parse_user_text_to_task(text: str, now_tz: datetime) -> Optional[ParsedTask]:
    text = text.strip()
    m = RELATIVE_RE.match(text)
    if m:
        amount = int(m.group(1))
        title = m.group(2).strip()
        low = text.lower()
        if "—Å–µ–∫" in low:
            delta = timedelta(seconds=amount)
        elif "–º–∏–Ω" in low:
            delta = timedelta(minutes=amount)
        elif "—á–∞—Å" in low:
            delta = timedelta(hours=amount)
        else:
            delta = timedelta(minutes=amount)
        run_local = now_tz + delta
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)
    m = TODAY_RE.match(text)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        run_local = now_tz.replace(hour=h, minute=mi, second=0, microsecond=0)
        if run_local <= now_tz:
            run_local += timedelta(days=1)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)
    m = TOMORROW_RE.match(text)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        run_local = (now_tz + timedelta(days=1)).replace(hour=h, minute=mi, second=0, microsecond=0)
        return ParsedTask("once", title, run_local.astimezone(timezone.utc), None, None, None)
    m = DAILY_RE.match(text)
    if m:
        h, mi, title = int(m.group(1)), int(m.group(2)), m.group(3).strip()
        return ParsedTask("daily", title, None, h, mi, None)
    m = MONTHLY_RE.match(text)
    if m:
        d, title = int(m.group(1)), m.group(2).strip()
        return ParsedTask("monthly", title, None, None, None, d)
    return None

def fmt_dt_kaliningrad(dt_utc: datetime) -> str:
    return dt_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

# ================= JOB =================
async def schedule_task(app: Application, t: Task):
    if app is None or t is None:
        return
    jq = app.job_queue
    name = f"task_{t.id}"
    for old in jq.get_jobs_by_name(name):
        old.schedule_removal()
    if t.type == "once":
        jq.run_once(remind_task, when=t.run_at_utc, name=name, data=t)
    elif t.type == "daily":
        jq.run_daily(remind_task, time=datetime.now().replace(hour=t.hour, minute=t.minute, second=0).timetz(), name=name, data=t)
    elif t.type == "monthly":
        jq.run_daily(remind_task, time=datetime.now().replace(hour=t.hour, minute=t.minute, second=0).timetz(), name=name, data=t)

async def remind_task(ctx: ContextTypes.DEFAULT_TYPE):
    t: Task = ctx.job.data
    if t.type == "monthly":
        today = datetime.now(TZ).day
        if today != t.day_of_month:
            return
    await ctx.bot.send_message(t.chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {t.title}")

# ================= –ö–û–ú–ê–ù–î–´ =================
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ ABC123\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 14:00 –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 19:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç"
    )

async def keys_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip()
    if key in ALLOWED_KEYS:
        ACCESS_GRANTED[update.effective_chat.id] = True
        await update.message.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –¥–µ–ª–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É ¬´/affairs¬ª.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")

async def affairs_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    tasks = list_active_tasks(chat_id)
    if not tasks:
        await update.message.reply_text("–ü–æ–∫–∞ –¥–µ–ª –Ω–µ—Ç.")
        return
    lines = []
    for i, t in enumerate(tasks, 1):
        if t.type == "once":
            when = fmt_dt_kaliningrad(t.run_at_utc)
        elif t.type == "daily":
            when = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}"
        else:
            when = f"–∫–∞–∂–¥–æ–µ {t.day_of_month} —á–∏—Å–ª–æ"
        lines.append(f"{i}. {t.title} ‚Äî {when}")
    await update.message.reply_text("–¢–≤–æ–∏ –¥–µ–ª–∞:\n" + "\n".join(lines))

async def affairs_delete_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not ctx.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /affairs_delete <–Ω–æ–º–µ—Ä>")
        return
    try:
        num = int(ctx.args[0]) - 1
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    tasks = list_active_tasks(chat_id)
    if num < 0 or num >= len(tasks):
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return
    t = tasks[num]
    delete_task(t.id)
    await update.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ ¬´{t.title}¬ª —É–¥–∞–ª–µ–Ω–∞.")

async def maintenance_on(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    MAINTENANCE = True
    await update.message.reply_text("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

async def maintenance_off(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    if update.effective_chat.id != ADMIN_ID:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    MAINTENANCE = False
    await update.message.reply_text("‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

# ================= –¢–ï–ö–°–¢ =================
async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if MAINTENANCE:
        await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö.")
        return
    if not ACCESS_GRANTED.get(update.effective_chat.id):
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏ –∫–ª—é—á.")
        return
    now_tz = datetime.now(TZ)
    parsed = parse_user_text_to_task(update.message.text, now_tz)
    if not parsed:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π: ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª")
        return
    task_id = add_task(
        update.effective_chat.id,
        parsed.title,
        parsed.type,
        parsed.run_at_utc,
        parsed.hour,
        parsed.minute,
        parsed.day_of_month,
    )
    t = get_task(task_id)
    await schedule_task(ctx.application, t)
    if t.type == "once":
        when = fmt_dt_kaliningrad(t.run_at_utc)
    elif t.type == "daily":
        when = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}"
    else:
        when = f"–∫–∞–∂–¥–æ–µ {t.day_of_month} —á–∏—Å–ª–æ"
    await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî {when}")

# ================= MAIN =================
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("affairs", affairs_cmd))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete_cmd))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, keys_cmd), 0)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), 1)

    async def on_startup(app_: Application):
        await app_.bot.delete_webhook(drop_pending_updates=True)
        log.info("Bot started. Timezone=%s", TZ)

    app.post_init = on_startup
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
