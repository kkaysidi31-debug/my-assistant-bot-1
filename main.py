# coding: utf-8
import os
import re
import sqlite3
import logging
from contextlib import contextmanager
from datetime import datetime, timedelta, time as dtime
from typing import Optional, Dict, Any

from zoneinfo import ZoneInfo
from telegram import Update, BotCommand
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler, ContextTypes, filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# ---------- –ö–û–ù–§–ò–ì ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
TZ = ZoneInfo("Europe/Kaliningrad")  # –ª–æ–∫–∞–ª—å–Ω–∞—è TZ

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –±–æ—Ç-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
    "–ü–æ–º–æ–≥—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É, —á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–≤–∞–ª.\n\n"
    "üìå –ü—Ä–∏–º–µ—Ä—ã, –∫–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    "‚Ä¢ ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª\n"
    "‚Ä¢ ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª\n"
    "‚Ä¢ ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 09:00 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ¬ª\n"
    "‚Ä¢ ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É¬ª\n"
    "‚Ä¢ ¬´30 –∞–≤–≥—É—Å—Ç–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç¬ª\n"
    "‚Ä¢ ¬´30.08 –≤ 15:30 —Å–æ–∑–≤–æ–Ω¬ª\n"
)

# ---------- –ë–ê–ó–ê ----------
DB_PATH = os.path.join(os.getcwd(), "bot.db")

@contextmanager
def db():
    con = sqlite3.connect(DB_PATH)
    con.row_factory = sqlite3.Row
    try:
        yield con
        con.commit()
    finally:
        con.close()

def init_db() -> None:
    with db() as con:
        con.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            id          INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id     INTEGER NOT NULL,
            type        TEXT    NOT NULL,        -- 'once' | 'daily'
            text        TEXT    NOT NULL,
            run_at_utc  INTEGER,                 -- –¥–ª—è 'once': unix-UTC
            daily_hhmm  INTEGER,                 -- –¥–ª—è 'daily': HH*100+MM
            active      INTEGER NOT NULL DEFAULT 1
        );
        """)
    log.info("DB ready")

# ---------- –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ----------
async def job_fire(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –î–ª—è 'once' –ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –∏ —Å–Ω–∏–º–∞–µ—Ç –¥–∂–æ–±—É."""
    data = ctx.job.data or {}
    chat_id = int(data["chat_id"])
    text = str(data["text"])
    task_id = int(data.get("task_id", 0))
    task_type = str(data.get("type", ""))

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.bot.send_message(chat_id=chat_id, text=text)

    # –µ—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è ‚Äî –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î –∏ —Å–Ω–∏–º–∞–µ–º –¥–∂–æ–±—É
    if task_type == "once" and task_id:
        with db() as con:
            con.execute("UPDATE tasks SET active=0 WHERE id=?", (task_id,))
        # —Ç–µ–∫—É—â–∞—è –¥–∂–æ–±–∞ —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–µ–º –ø–æ –∏–º–µ–Ω–∏
        for j in ctx.application.job_queue.get_jobs_by_name(f"task:{task_id}"):
            j.schedule_removal()

def schedule_task(app: Application, row: sqlite3.Row) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –ë–î –≤ JobQueue."""
    if not row["active"]:
        return

    jq = app.job_queue
    name = f"task:{row['id']}"
    base_data = {
        "chat_id": row["chat_id"],
        "text": row["text"],
        "task_id": row["id"],
        "type": row["type"],
    }

    if row["type"] == "once":
        when = datetime.fromtimestamp(int(row["run_at_utc"]), tz=ZoneInfo("UTC"))
        jq.run_once(job_fire, when=when, data=base_data, name=name)
    else:
        hhmm = int(row["daily_hhmm"])
        hh, mm = divmod(hhmm, 100)
        t = dtime(hour=hh, minute=mm, tz=TZ)
        jq.run_daily(job_fire, time=t, data=base_data, name=name)

async def reschedule_all(app: Application) -> None:
    """–ü–æ–¥–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞."""
    with db() as con:
        rows = con.execute("SELECT * FROM tasks WHERE active=1").fetchall()
    for r in rows:
        schedule_task(app, r)

# ---------- –ü–ê–†–°–ï–† NATURAL LANGUAGE ----------
RU_MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4,
    "–º–∞—è": 5, "–∏—é–Ω—è": 6, "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8,
    "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12,
}

def parse_natural_ru(msg: str) -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {'type': 'once',  'text': str, 'run_at_utc': int}      ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
      {'type': 'daily', 'text': str, 'hhmm': int}            ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ
    –ò–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.
    """
    s = re.sub(r"\s+", " ", msg.strip().lower())

    # ¬´—á–µ—Ä–µ–∑ N —Å–µ–∫/–º–∏–Ω/—á–∞—Å –¢–ï–ö–°–¢¬ª
    m = re.match(r"^—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥|—Å–µ–∫|–º–∏–Ω—É—Ç|–º–∏–Ω|—á–∞—Å–æ–≤|—á–∞—Å)\s+(.+)$", s)
    if m:
        n = int(m.group(1))
        unit = m.group(2)
        text = m.group(3).strip()

        if unit in ("—Å–µ–∫—É–Ω–¥", "—Å–µ–∫"):
            delta = timedelta(seconds=n)
        elif unit in ("–º–∏–Ω—É—Ç", "–º–∏–Ω"):
            delta = timedelta(minutes=n)
        else:
            delta = timedelta(hours=n)

        run_at = datetime.now(TZ) + delta
        run_at_utc = int(run_at.astimezone(ZoneInfo("UTC")).timestamp())
        return {"type": "once", "text": text, "run_at_utc": run_at_utc}

    # ¬´—Å–µ–≥–æ–¥–Ω—è –≤ HH:MM –¢–ï–ö–°–¢¬ª
    m = re.match(r"^—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)$", s)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        text = m.group(3).strip()
        now = datetime.now(TZ)
        run_at = datetime(now.year, now.month, now.day, hh, mm, tzinfo=TZ)
        if run_at <= now:
            run_at += timedelta(days=1)
        run_at_utc = int(run_at.astimezone(ZoneInfo("UTC")).timestamp())
        return {"type": "once", "text": text, "run_at_utc": run_at_utc}

    # ¬´–∑–∞–≤—Ç—Ä–∞ –≤ HH:MM –¢–ï–ö–°–¢¬ª
    m = re.match(r"^–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)$", s)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        text = m.group(3).strip()
        now = datetime.now(TZ) + timedelta(days=1)
        run_at = datetime(now.year, now.month, now.day, hh, mm, tzinfo=TZ)
        run_at_utc = int(run_at.astimezone(ZoneInfo("UTC")).timestamp())
        return {"type": "once", "text": text, "run_at_utc": run_at_utc}

    # ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM –¢–ï–ö–°–¢¬ª
    m = re.match(r"^–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)$", s)
    if m:
        hh, mm = int(m.group(1)), int(m.group(2))
        text = m.group(3).strip()
        return {"type": "daily", "text": text, "hhmm": hh * 100 + mm}

    # ¬´30 –∞–≤–≥—É—Å—Ç–∞ –¢–ï–ö–°–¢¬ª (–≤ 09:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    m = re.match(r"^(\d{1,2})\s+([–∞-—è—ë]+)\s+(.+)$", s)
    if m and m.group(2) in RU_MONTHS:
        day = int(m.group(1))
        month = RU_MONTHS[m.group(2)]
        text = m.group(3).strip()

        now = datetime.now(TZ)
        year = now.year
        run_at = datetime(year, month, day, 9, 0, tzinfo=TZ)
        if run_at <= now:
            run_at = datetime(year + 1, month, day, 9, 0, tzinfo=TZ)
        run_at_utc = int(run_at.astimezone(ZoneInfo("UTC")).timestamp())
        return {"type": "once", "text": text, "run_at_utc": run_at_utc}

    # ¬´30.08 –≤ HH:MM –¢–ï–ö–°–¢¬ª
    m = re.match(r"^(\d{1,2})\.(\d{1,2})\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)$", s)
    if m:
        day, month = int(m.group(1)), int(m.group(2))
        hh, mm = int(m.group(3)), int(m.group(4))
        text = m.group(5).strip()

        now = datetime.now(TZ)
        year = now.year
        run_at = datetime(year, month, day, hh, mm, tzinfo=TZ)
        if run_at <= now:
            run_at = datetime(year + 1, month, day, hh, mm, tzinfo=TZ)
        run_at_utc = int(run_at.astimezone(ZoneInfo("UTC")).timestamp())
        return {"type": "once", "text": text, "run_at_utc": run_at_utc}

    return None

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
def human_when(row: sqlite3.Row) -> str:
    if row["type"] == "once":
        dt = datetime.fromtimestamp(int(row["run_at_utc"]), tz=ZoneInfo("UTC")).astimezone(TZ)
        return dt.strftime("%d.%m.%Y %H:%M")
    hhmm = int(row["daily_hhmm"])
    hh, mm = divmod(hhmm, 100)
    return f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hh:02d}:{mm:02d}"

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(WELCOME)

async def help_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(WELCOME)

async def tasks_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    with db() as con:
        rows = con.execute("SELECT id, type, text, run_at_utc, daily_hhmm, active "
            "FROM tasks WHERE chat_id=? ORDER BY id DESC LIMIT 50",
            (chat_id,)
        ).fetchall()

    if not rows:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")
        return

    lines = []
    for r in rows:
        if not r["active"]:
            continue
        when = human_when(r)
        lines.append(f"‚úÖ ID:{r['id']} ‚Äî {when} ‚Äî ¬´{r['text']}¬ª")
    await update.message.reply_text("\n".join(lines) if lines else "–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")

async def cancel_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not ctx.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID: /cancel 12")
        return
    try:
        tid = int(ctx.args[0])
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: /cancel 12")
        return

    chat_id = update.effective_chat.id
    with db() as con:
        row = con.execute("SELECT chat_id, active FROM tasks WHERE id=?", (tid,)).fetchone()
        if not row:
            await update.message.reply_text("–¢–∞–∫–æ–≥–æ ID –Ω–µ –Ω–∞—à—ë–ª.")
            return
        if row["chat_id"] != chat_id:
            await update.message.reply_text("–≠—Ç–æ—Ç ID –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —á–∞—Ç—É.")
            return
        if not row["active"]:
            await update.message.reply_text("–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

        con.execute("UPDATE tasks SET active=0 WHERE id=?", (tid,))

    # —Å–Ω—è—Ç—å –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    for j in ctx.application.job_queue.get_jobs_by_name(f"task:{tid}"):
        j.schedule_removal()

    await update.message.reply_text("üõë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–∞—Ä—Å–∏–º —Ñ—Ä–∞–∑—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–∂–æ–±—É."""
    msg = (update.message.text or "").strip()
    parsed = parse_natural_ru(msg)
    if not parsed:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä—ã —Å–º. –≤ /help")
        return

    chat_id = update.effective_chat.id
    if parsed["type"] == "once":
        with db() as con:
            con.execute(
                "INSERT INTO tasks(chat_id,type,text,run_at_utc,active) VALUES(?,?,?,?,1)",
                (chat_id, "once", parsed["text"], parsed["run_at_utc"])
            )
            task_id = con.execute("SELECT last_insert_rowid()").fetchone()[0]
            row = con.execute("SELECT * FROM tasks WHERE id=?", (task_id,)).fetchone()

        schedule_task(ctx.application, row)

        when_local = datetime.fromtimestamp(parsed["run_at_utc"], tz=ZoneInfo("UTC")).astimezone(TZ)
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–Ω—é {when_local.strftime('%d.%m.%Y %H:%M')} ‚Äî ¬´{parsed['text']}¬ª.\nID: {task_id}"
        )
    else:
        hhmm = int(parsed["hhmm"])
        with db() as con:
            con.execute(
                "INSERT INTO tasks(chat_id,type,text,daily_hhmm,active) VALUES(?,?,?,?,1)",
                (chat_id, "daily", parsed["text"], hhmm)
            )
            task_id = con.execute("SELECT last_insert_rowid()").fetchone()[0]
            row = con.execute("SELECT * FROM tasks WHERE id=?", (task_id,)).fetchone()

        schedule_task(ctx.application, row)
        hh, mm = divmod(hhmm, 100)
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ¬´{parsed['text']}¬ª, –≤ {hh:02d}:{mm:02d}.\nID: {task_id}"
        )

# ---------- –°–¢–ê–†–¢ ----------
async def on_startup(app: Application) -> None:
    await reschedule_all(app)
    try:
        await app.bot.set_my_commands([
            BotCommand("start", "–ù–∞—á–∞—Ç—å"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("tasks", "–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
            BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"),
        ])
    except Exception:
        log.exception("Startup error")

def build_app() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –ø—É—Å—Ç. –£–∫–∞–∂–∏ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("tasks", tasks_cmd))
    app.add_handler(CommandHandler("cancel", cancel_cmd))

    # —Ç–µ–∫—Å—Ç (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —è–∑—ã–∫)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –ø–æ–¥–Ω—è—Ç–∏–µ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ polling
    app.post_init = on_startup
    return app

def main() -> None:
    init_db()
    app = build_app()
    log.info("Bot started. Polling‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
