# -*- coding: utf-8 -*-
import logging
import re
from datetime import datetime, timedelta, time as dtime

import pytz
from flask import Flask
import threading

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackContext,
    filters,
)

# ------------------------ –õ–û–ì–ò ------------------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("reminder-bot")

# ------------------------ –ß–ê–°–û–í–û–ô –ü–û–Ø–° ------------------------
TZ = pytz.timezone("Europe/Kaliningrad")

# ------------------------ HEALTH-CHECK (Flask) ------------------------
flask_app = Flask(__name__)

@flask_app.route("/")
def home():
    return "‚úÖ Bot is running!", 200

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# ------------------------ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ------------------------
RE_TIME = r"(?P<h>\d{1,2}):(?P<m>\d{2})"

# –º–µ—Å—è—Ü—ã –ø–æ-—Ä—É—Å—Å–∫–∏ (–ª—é–±–∞—è –ø–∞–¥–µ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–∏–º–µ—Ç—Å—è –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É)
MONTHS = {
    "—è–Ω–≤": 1, "—Ñ–µ–≤": 2, "–º–∞—Ä": 3, "–∞–ø—Ä": 4, "–º–∞—è": 5, "–º–∞–π": 5,
    "–∏—é–Ω": 6, "–∏—é–ª": 7, "–∞–≤–≥": 8, "—Å–µ–Ω": 9, "—Å–µ–Ω—Ç": 9,
    "–æ–∫—Ç": 10, "–Ω–æ—è": 11, "–¥–µ–∫": 12,
}
def month_from_ru(name: str) -> int | None:
    s = name.strip().lower()
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±—â–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–∞–≤–≥—É—Å—Ç–∞ -> –∞–≤–≥, —Å–µ–Ω—Ç—è–±—Ä—è -> —Å–µ–Ω—Ç)
    s = s.replace("—ë", "–µ")
    candidates = [k for k in MONTHS if s.startswith(k)]
    return MONTHS[candidates[0]] if candidates else None

# ------------------------ –ü–ê–†–°–ï–† –§–†–ê–ó ------------------------
def parse_reminder(text: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict:
      {"once_at": datetime, "text": "..."}  ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ
      {"daily": (hh, mm),  "text": "..."}  ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ
      –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª.
    """
    t = text.strip()
    now_local = datetime.now(TZ)

    # —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
    m = re.match(r"–Ω–∞–ø–æ–º–Ω–∏\s+—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç[—É—ã]?|—á–∞—Å[–∞–æ–≤]?)\s+(.+)$", t, re.I)
    if m:
        n = int(m.group(1))
        unit = m.group(2).lower()
        what = m.group(3).strip()
        delta = timedelta(minutes=n) if unit.startswith("–º–∏–Ω") else timedelta(hours=n)
        return {"once_at": now_local + delta, "text": what}

    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM
    m = re.match(rf"–Ω–∞–ø–æ–º–Ω–∏\s+—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+{RE_TIME}\s+(.+)$", t, re.I)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        what = m.group(4).strip()
        target = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if target < now_local:
            target += timedelta(days=1)
        return {"once_at": target, "text": what}

    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM
    m = re.match(rf"–Ω–∞–ø–æ–º–Ω–∏\s+–∑–∞–≤—Ç—Ä–∞\s+–≤\s+{RE_TIME}\s+(.+)$", t, re.I)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        what = m.group(4).strip()
        base = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
        target = base + timedelta(days=1)
        return {"once_at": target, "text": what}

    # –≤ HH:MM (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
    m = re.match(rf"–Ω–∞–ø–æ–º–Ω–∏\s+–≤\s+{RE_TIME}\s+(.+)$", t, re.I)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        what = m.group(4).strip()
        target = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if target < now_local:
            target += timedelta(days=1)
        return {"once_at": target, "text": what}

    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM
    m = re.match(rf"–Ω–∞–ø–æ–º–Ω–∏\s+–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+{RE_TIME}\s+(.+)$", t, re.I)
    if m:
        hh, mm = int(m.group("h")), int(m.group("m"))
        what = m.group(4).strip()
        return {"daily": (hh, mm), "text": what}

    # ---- –ù–û–í–û–ï: ¬´–Ω–∞–ø–æ–º–Ω–∏ 30 –∞–≤–≥—É—Å—Ç–∞ [2025] [–≤ 16:00] <—Ç–µ–∫—Å—Ç>¬ª ----
    # –≥–æ–¥ –∏ –≤—Ä–µ–º—è ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç ‚Äî —Å—Ç–∞–≤–∏–º 09:00.
    m = re.match(
        rf"–Ω–∞–ø–æ–º–Ω–∏\s+(?P<d>\d{{1,2}})\s+(?P<mon>[–ê-–Ø–∞-—è–Å—ë]+)\s*(?P<y>\d{{4}})?(?:\s+–≤\s+{RE_TIME})?\s+(?P<text>.+)$",
        t, re.I
    )
    if m:
        day = int(m.group("d"))
        mon = month_from_ru(m.group("mon") or "")
        if not mon:
            return None
        year = int(m.group("y")) if m.group("y") else now_local.year
        # –≤—Ä–µ–º—è
        if m.group("h") and m.group("m"):
            hh, mm = int(m.group("h")), int(m.group("m"))
        else:
            hh, mm = 9, 0  # –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 09:00
        what = (m.group("text") or "").strip()
        try:
            target = TZ.localize(datetime(year, mon, day, hh, mm, 0, 0))
            # –µ—Å–ª–∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É –±–µ–∑ —è–≤–Ω–æ–≥–æ –≥–æ–¥–∞ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
            if not m.group("y") and target < now_local:
                target = TZ.localize(datetime(year + 1, mon, day, hh, mm, 0, 0))
            return {"once_at": target, "text": what}
        except ValueError:
            return None

    return None

# ------------------------ CALLBACK-–∏ –î–õ–Ø JOBQUEUE ------------------------
async def job_once(ctx: CallbackContext) -> None:
    data = ctx.job.data or {}
    text = data.get("text", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    await ctx.bot.send_message(ctx.job.chat_id, f"üîî {text}")

async def job_daily(ctx: CallbackContext) -> None:
    data = ctx.job.data or {}
    text = data.get("text", "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    await ctx.bot.send_message(ctx.job.chat_id, f"üîî {text}")

# ------------------------ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ 30 –∞–≤–≥—É—Å—Ç–∞ –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç   (–≤ 09:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        f"(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TZ.zone})"
    )
    await update.message.reply_text(msg)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    parsed = parse_reminder(update.message.text)
    if not parsed:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä—ã: "
            "¬´–Ω–∞–ø–æ–º–Ω–∏ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 16:00 –æ–ø–ª–∞—Ç–∏—Ç—å –ñ–ö–•¬ª, "
            "¬´–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤¬ª, "
            "¬´–Ω–∞–ø–æ–º–Ω–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞¬ª."
        )
        return

    chat_id = update.message.chat_id

    if "once_at" in parsed:
        target = parsed["once_at"]
        context.job_queue.run_once(
            job_once,
            when=target.astimezone(TZ),
            chat_id=chat_id,
            name=f"once-{chat_id}-{int(target.timestamp())}",
            data={"text": parsed["text"]},
            tzinfo=TZ,
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –Ω–∞–ø–æ–º–Ω—é {target.strftime('%Y-%m-%d %H:%M')} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ.zone})"
        )
        return

    if "daily" in parsed:
        hh, mm = parsed["daily"]
        context.job_queue.run_daily(
            job_daily,
            time=dtime(hour=hh, minute=mm, tzinfo=TZ),
            chat_id=chat_id,
            name=f"daily-{chat_id}-{hh:02}{mm:02}",
            data={"text": parsed["text"]},
        )
        await update.message.reply_text(
            f"‚úÖ –û–∫, –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hh:02}:{mm:02} ‚Äî ¬´{parsed['text']}¬ª. (TZ: {TZ.zone})"
        )

# ------------------------ –ó–ê–ü–£–°–ö ------------------------
def main():
    import os
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise SystemExit("–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")

    threading.Thread(target=run_flask, daemon=True).start()

    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    log.info("Starting bot with polling...")
    application.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
