import os
import re
import sqlite3
import string
import random
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta, time as dtime, timezone
from typing import Optional, List, Tuple

import pytz
from aiohttp import web

from telegram import Update, BotCommand
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# ====================== –ù–ê–°–¢–†–û–ô–ö–ò ======================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s | %(message)s"
)

BOT_TOKEN = os.environ.get("BOT_TOKEN", "").strip()
ADMIN_ID = int(os.environ.get("ADMIN_ID", "0") or "0")
TZ_NAME = os.environ.get("TZ", "Europe/Kaliningrad")
TZ = pytz.timezone(TZ_NAME)

DB_PATH = "bot.db"

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–æ–º–æ–≥—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, "
    "—á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª.\n\n"
    "–ü—Ä–∏–º–µ—Ä—ã:\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ–µ—Å—Ç—å / —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ–∑–≤–æ–Ω–∏—Ç—å\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 09:00 —Å—Ö–æ–¥–∏—Ç—å –≤ –∑–∞–ª\n"
    "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 07:45 —á–∏—Å—Ç–∏—Ç—å –∑—É–±—ã\n"
    "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–µ–¥–∏—Ç\n\n"
    "‚ùó –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´–∑–∞ N –º–∏–Ω—É—Ç¬ª: –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º—è –Ω–∞ N –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ."
)

# ====================== –£–¢–ò–õ–ò–¢–´ ======================

def db() -> sqlite3.Connection:
    con = sqlite3.connect(DB_PATH)
    con.row_factory = sqlite3.Row
    return con

def init_db() -> None:
    with db() as c:
        c.execute("""
            CREATE TABLE IF NOT EXISTS users(
              chat_id INTEGER PRIMARY KEY,
              authed  INTEGER DEFAULT 0
            );
        """)
        c.execute("""
            CREATE TABLE IF NOT EXISTS tasks(
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              chat_id INTEGER NOT NULL,
              title TEXT NOT NULL,
              type TEXT NOT NULL, -- once|daily|monthly
              run_at_utc TEXT,    -- ISO –¥–ª—è once
              hour INTEGER,
              minute INTEGER,
              day_of_month INTEGER,
              active INTEGER DEFAULT 1
            );
        """)
        c.execute("""
            CREATE TABLE IF NOT EXISTS keys(
              key TEXT PRIMARY KEY,
              issued INTEGER DEFAULT 0,   -- –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω—É (–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω)
              used_by INTEGER             -- chat_id, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª
            );
        """)
        c.execute("""
            CREATE TABLE IF NOT EXISTS settings(
              name TEXT PRIMARY KEY,
              value TEXT
            );
        """)
        # —Ñ–ª–∞–≥ —Ç–µ—Ö—Ä–∞–±–æ—Ç
        c.execute("INSERT OR IGNORE INTO settings(name,value) VALUES('maintenance','0');")
    logging.info("DB ready")

# ---- –ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞ ----

ALPHABET = string.ascii_letters + string.digits  # A..Z a..z 0..9

def random_key(n: int = 5) -> str:
    return "".join(random.choice(ALPHABET) for _ in range(n))

def ensure_keys_pool(target_total: int = 1000) -> None:
    """–ì–µ–Ω–µ—Ä–∏–º –ø—É–ª –∏–∑ 1000 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ 5 —Å–∏–º–≤–æ–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)."""
    with db() as c:
        cur = c.execute("SELECT COUNT(*) AS cnt FROM keys")
        have = cur.fetchone()["cnt"]
        need = max(0, target_total - have)
        if need == 0:
            return
        batch = set()
        while len(batch) < need:
            k = random_key(5)
            batch.add(k)
        c.executemany("INSERT OR IGNORE INTO keys(key) VALUES(?)", [(k,) for k in batch])
    logging.info("Keys pool ensured. total=%s", target_total)

def keys_left() -> int:
    with db() as c:
        # —Å–≤–æ–±–æ–¥–Ω—ã–µ == –Ω–µ –≤—ã–¥–∞–Ω—ã –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        cur = c.execute("SELECT COUNT(*) AS cnt FROM keys WHERE issued=0 AND used_by IS NULL")
        return cur.fetchone()["cnt"]

def keys_free() -> int:
    with db() as c:
        cur = c.execute("SELECT COUNT(*) AS cnt FROM keys WHERE used_by IS NULL")
        return cur.fetchone()["cnt"]

def keys_used() -> int:
    with db() as c:
        cur = c.execute("SELECT COUNT(*) AS cnt FROM keys WHERE used_by IS NOT NULL")
        return cur.fetchone()["cnt"]

def issue_random_key() -> Optional[str]:"""–ê–¥–º–∏–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª—é—á ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ issued=1 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º"""
    with db() as c:
        row = c.execute("SELECT key FROM keys WHERE issued=0 AND used_by IS NULL LIMIT 1" ).fetchone()
        if not row:
            return None
        k = row["key"]
        c.execute("UPDATE keys SET issued=1 WHERE key=?", (k,))
        return k

def keys_reset_all() -> None:
    with db() as c:
        c.execute("UPDATE keys SET issued=0, used_by=NULL")

def use_key(chat_id: int, key: str) -> bool:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –∫–ª—é—á. –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞–Ω–Ω—ã–µ (issued=1) –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ."""
    with db() as c:
        row = c.execute(
            "SELECT key, issued, used_by FROM keys WHERE key=?",
            (key,)
        ).fetchone()
        if not row:
            return False
        if row["used_by"] is not None:
            return False
        if int(row["issued"]) != 1:
            return False
        c.execute("UPDATE keys SET used_by=? WHERE key=?", (chat_id, key))
        c.execute("INSERT OR IGNORE INTO users(chat_id, authed) VALUES(?,1)", (chat_id,))
        c.execute("UPDATE users SET authed=1 WHERE chat_id=?", (chat_id,))
        return True

def is_authed(chat_id: int) -> bool:
    with db() as c:
        row = c.execute("SELECT authed FROM users WHERE chat_id=?", (chat_id,)).fetchone()
        return bool(row and row["authed"])

# ---- –¢–µ—Ö—Ä–∞–±–æ—Ç—ã ----

def maintenance_on() -> None:
    with db() as c:
        c.execute("UPDATE settings SET value='1' WHERE name='maintenance'")

def maintenance_off() -> None:
    with db() as c:
        c.execute("UPDATE settings SET value='0' WHERE name='maintenance'")

def is_maintenance() -> bool:
    with db() as c:
        row = c.execute("SELECT value FROM settings WHERE name='maintenance'").fetchone()
        return (row and row["value"] == "1")

# ====================== –ü–ê–†–°–ò–ù–ì –¢–ï–ö–°–¢–ê ======================

@dataclass
class Task:
    chat_id: int
    title: str
    type: str                     # once|daily|monthly
    run_at_utc: Optional[datetime] = None
    hour: Optional[int] = None
    minute: Optional[int] = None
    day_of_month: Optional[int] = None

def to_utc(dt_local: datetime) -> datetime:
    return dt_local.astimezone(timezone.utc)

def parse(text: str, chat_id: int) -> Optional[Task]:
    text = text.strip().lower()

    # —á–µ—Ä–µ–∑ N —Å–µ–∫—É–Ω–¥/–º–∏–Ω—É—Ç/—á–∞—Å–æ–≤
    m = re.fullmatch(r"—á–µ—Ä–µ–∑\s+(\d+)\s*(—Å–µ–∫—É–Ω–¥(?:—ã)?|—Å–µ–∫|–º–∏–Ω—É—Ç(?:—ã)?|–º–∏–Ω|—á–∞—Å(?:–∞|–æ–≤)?)\s+(.+)", text)
    if m:
        n = int(m.group(1))
        unit = m.group(2)
        title = m.group(3).strip()
        now = datetime.now(TZ)
        if unit.startswith("—Å–µ–∫"):
            run_local = now + timedelta(seconds=n)
        elif unit.startswith("–º–∏–Ω"):
            run_local = now + timedelta(minutes=n)
        else:
            run_local = now + timedelta(hours=n)
        return Task(chat_id, title, "once", run_at_utc=to_utc(run_local))
    # —Å–µ–≥–æ–¥–Ω—è –≤ HH:MM ...
    m = re.fullmatch(r"—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)", text)
    if m:
        h, mnt = int(m.group(1)), int(m.group(2))
        title = m.group(3).strip()
        now = datetime.now(TZ)
        run_local = datetime(now.year, now.month, now.day, h, mnt, tzinfo=TZ)
        if run_local < now:
            run_local += timedelta(days=1)
        return Task(chat_id, title, "once", run_at_utc=to_utc(run_local))
    # –∑–∞–≤—Ç—Ä–∞ –≤ HH:MM ...
    m = re.fullmatch(r"–∑–∞–≤—Ç—Ä–∞\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)", text)
    if m:
        h, mnt = int(m.group(1)), int(m.group(2))
        title = m.group(3).strip()
        now = datetime.now(TZ)
        run_local = datetime(now.year, now.month, now.day, h, mnt, tzinfo=TZ) + timedelta(days=1)
        return Task(chat_id, title, "once", run_at_utc=to_utc(run_local))
    # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ HH:MM ...
    m = re.fullmatch(r"–∫–∞–∂–¥—ã–π\s+–¥–µ–Ω—å\s+–≤\s+(\d{1,2}):(\d{2})\s+(.+)", text)
    if m:
        h, mnt = int(m.group(1)), int(m.group(2))
        title = m.group(3).strip()
        return Task(chat_id, title, "daily", hour=h, minute=mnt)
    # DD.MM.YYYY HH:MM ...
    m = re.fullmatch(r"(\d{1,2})\.(\d{1,2})\.(\d{4})\s+(\d{1,2}):(\d{2})\s+(.+)", text)
    if m:
        d, mon, y, h, mnt = map(int, m.groups()[:5])
        title = m.group(6).strip()
        run_local = datetime(y, mon, d, h, mnt, tzinfo=TZ)
        return Task(chat_id, title, "once", run_at_utc=to_utc(run_local))

    return None

# ====================== –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï ======================

def fmt_local(dt_utc: datetime) -> str:
    return dt_utc.astimezone(TZ).strftime("%d.%m.%Y %H:%M")

async def job_once(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = ctx.job.data or {}
    task_id = job_data.get("task_id")
    t = get_task(task_id)
    if not t:
        return
    await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{t.title}¬ª")
    # –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
    with db() as c:
        c.execute("UPDATE tasks SET active=0 WHERE id=?", (task_id,))

async def job_daily(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = ctx.job.data or {}
    task_id = job_data.get("task_id")
    t = get_task(task_id)
    if not t:
        return
    await ctx.bot.send_message(t.chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{t.title}¬ª")

def get_task(task_id: int) -> Optional[Task]:
    with db() as c:
        r = c.execute("SELECT * FROM tasks WHERE id=?", (task_id,)).fetchone()
        if not r:
            return None
        return Task(
            chat_id=r["chat_id"], title=r["title"], type=r["type"],
            run_at_utc=datetime.fromisoformat(r["run_at_utc"]) if r["run_at_utc"] else None,
            hour=r["hour"], minute=r["minute"], day_of_month=r["day_of_month"]
        )

def save_task(t: Task) -> int:
    with db() as c:
        c.execute("""
            INSERT INTO tasks(chat_id,title,type,run_at_utc,hour,minute,day_of_month,active)
            VALUES(?,?,?,?,?,?,?,1)
        """, (
            t.chat_id, t.title, t.type,
            t.run_at_utc.isoformat() if t.run_at_utc else None,
            t.hour, t.minute, t.day_of_month
        ))
        return c.execute("SELECT last_insert_rowid() AS id").fetchone()["id"]

async def schedule_task(app: Application, task_id: int) -> None:
    t = get_task(task_id)
    if not t or not hasattr(app, "job_queue"):
        return
    jq = app.job_queue
    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ –¥–∂–æ–±—ã —Å —ç—Ç–∏–º task_id
    for j in jq.get_jobs_by_name(f"task-{task_id}"):
        j.schedule_removal()

    if t.type == "once" and t.run_at_utc:
        when = t.run_at_utc
        if when < datetime.now(timezone.utc):
            # –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
            with db() as c:
                c.execute("UPDATE tasks SET active=0 WHERE id=?", (task_id,))
            return
        jq.run_once(job_once, when=when, name=f"task-{task_id}", data={"task_id": task_id})
    elif t.type == "daily" and t.hour is not None and t.minute is not None:
        jq.run_daily(
            job_daily,
            time=dtime(hour=t.hour, minute=t.minute, tzinfo=TZ),
            name=f"task-{task_id}",
            data={"task_id": task_id}
        )

async def reschedule_all(app: Application) -> None:
    with db() as c:
        rows = c.execute("SELECT id FROM tasks WHERE active=1").fetchall()
    for r in rows:
        await schedule_task(app, r["id"])

# ====================== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø –ü–ò–ù–ì–û–í ======================

async def handle_alive(_request):
    return web.Response(text="alive")

async def run_web():
    app = web.Application()
    app.add_routes([web.get("/", handle_alive)])
    port = int(os.environ.get("PORT", "10000"))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info("Web keepalive on :%s", port)

# ====================== –•–ï–ù–î–õ–ï–†–´ ======================

def user_is_admin(update: Update) -> bool:
    return update.effective_user and update.effective_user.id == ADMIN_ID

async def start_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not is_authed(chat_id):
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        return
    # —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç.")
    await update.message.reply_text(WELCOME_TEXT)

async def maintenance_on_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    maintenance_on()
    await update.message.reply_text("üöß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    maintenance_off()
    await update.message.reply_text("‚úÖ –¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

async def issue_key_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    k = issue_random_key()
    if not k:
        await update.message.reply_text("–ö–ª—é—á–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
    else:
        await update.message.reply_text(f"üîë –¢–≤–æ–π –∫–ª—é—á: `{k}`", parse_mode="Markdown")

async def keys_left_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    await update.message.reply_text(str(keys_left()))

async def keys_free_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    await update.message.reply_text(str(keys_free()))

async def keys_used_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    await update.message.reply_text(str(keys_used()))

async def keys_reset_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not user_is_admin(update):
        return
    keys_reset_all()
    await update.message.reply_text("–ö–ª—é—á–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

# –°–ø–∏—Å–æ–∫ –¥–µ–ª
async def affairs_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    with db() as c:
        rows = c.execute(
            "SELECT id,title,type,run_at_utc,hour,minute,day_of_month FROM tasks "
            "WHERE chat_id=? AND active=1 ORDER BY id", (chat_id,)
        ).fetchall()
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –¥–µ–ª –Ω–µ—Ç.")
        return
    lines = ["–¢–≤–æ–∏ –¥–µ–ª–∞:"]
    for i, r in enumerate(rows, start=1):
        if r["type"] == "once":
            dt = fmt_local(datetime.fromisoformat(r["run_at_utc"]))
            lines.append(f"{i}. {r['title']} ‚Äî {dt}")
        elif r["type"] == "daily":
            lines.append(f"{i}. {r['title']} ‚Äî –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {r['hour']:02d}:{r['minute']:02d}")
        else:
            lines.append(f"{i}. {r['title']}")
    await update.message.reply_text("\n".join(lines))

# /affairs_delete 3
async def affairs_delete_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not ctx.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä: /affairs_delete 3")
        return
    try:
        idx = int(ctx.args[0])
    except Exception:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    with db() as c:
        rows = c.execute(
            "SELECT id FROM tasks WHERE chat_id=? AND active=1 ORDER BY id",
            (chat_id,)
        ).fetchall()
    if idx < 1 or idx > len(rows):
        await update.message.reply_text("–ù–µ—Ç –¥–µ–ª–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        return
    task_id = rows[idx - 1]["id"]
    with db() as c:
        c.execute("UPDATE tasks SET active=0 WHERE id=?", (task_id,))
    # —Å–Ω—è—Ç—å –∏–∑ job_queue
    app: Application = ctx.application
    for j in app.job_queue.get_jobs_by_name(f"task-{task_id}"):
        j.schedule_removal()
    await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.")

# –¢–µ–∫—Å—Ç: –∫–ª—é—á –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.effective_chat.id
    text = (update.message.text or "").strip()

    # —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –≤—Å–µ—Ö, –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
    if is_maintenance() and not user_is_admin(update):
        await update.message.reply_text("üöß –°–µ–π—á–∞—Å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—è—Ç—å –∫–ª—é—á
    if not is_authed(chat_id):
        if use_key(chat_id, text):
            await update.message.reply_text("‚úÖ –ö–ª—é—á –ø—Ä–∏–Ω—è—Ç.")
            await update.message.reply_text(WELCOME_TEXT)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø–∞—Ä—Å–∏–º –∑–∞–¥–∞—á—É
    t = parse(text, chat_id)
    if not t:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª. –ü—Ä–∏–º–µ—Ä: ¬´—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–µ—Å—Ç—å¬ª –∏–ª–∏ ¬´—Å–µ–≥–æ–¥–Ω—è –≤ 18:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å¬ª.")
        return

    task_id = save_task(t)
    await schedule_task(ctx.application, task_id)

    if t.type == "once" and t.run_at_utc:
        await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é: ¬´{t.title}¬ª ‚Äî {fmt_local(t.run_at_utc)}")
    elif t.type == "daily":
        await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–æ–º–Ω—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {t.hour:02d}:{t.minute:02d}: ¬´{t.title}¬ª")
    else:
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.")

# ====================== –°–¢–ê–†–¢/–ü–ï–†–ï–ó–ê–ü–£–°–ö ======================

async def on_startup(app: Application):
    # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã polling –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception as e:
        logging.warning("delete_webhook failed: %s", e)
    # –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    try:
        await reschedule_all(app)
    except Exception:
        logging.exception("reschedule_all failed")
    # –≤—ã—Å—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    try:
        cmds = [
            BotCommand("start", "–ü–æ–º–æ—â—å –∏ –ø—Ä–∏–º–µ—Ä—ã"),
            BotCommand("affairs", "–°–ø–∏—Å–æ–∫ –¥–µ–ª"),
            BotCommand("affairs_delete", "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–æ –ø–æ –Ω–æ–º–µ—Ä—É"),
            BotCommand("maintenance_on", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤–∫–ª—é—á–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
            BotCommand("maintenance_off", "–¢–µ—Ö—Ä–∞–±–æ—Ç—ã: –≤—ã–∫–ª—é—á–∏—Ç—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
            BotCommand("issue_key", "–í—ã–¥–∞—Ç—å –∫–ª—é—á (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
            BotCommand("keys_left", "–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª—é—á–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
            BotCommand("keys_free", "–ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ + –≤—ã–¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
            BotCommand("keys_used", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
            BotCommand("keys_reset", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)")
        ]
        await app.bot.set_my_commands(cmds)
    except Exception as e:
        logging.warning("set_my_commands failed: %s", e)

# ====================== MAIN ======================

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty. Set it in Render -> Environment.")

    init_db()
    ensure_keys_pool(1000)

    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("affairs", affairs_cmd))
    app.add_handler(CommandHandler("affairs_delete", affairs_delete_cmd))

    app.add_handler(CommandHandler("maintenance_on", maintenance_on_cmd))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off_cmd))

    app.add_handler(CommandHandler("issue_key", issue_key_cmd))
    app.add_handler(CommandHandler("keys_left", keys_left_cmd))
    app.add_handler(CommandHandler("keys_free", keys_free_cmd))
    app.add_handler(CommandHandler("keys_used", keys_used_cmd))
    app.add_handler(CommandHandler("keys_reset", keys_reset_cmd))

    # —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.post_init = on_startup  # –≤—ã–∑–æ–≤–µ—Ç—Å—è –ø–µ—Ä–µ–¥ run_polling

    # –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ polling –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
    await run_web()
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
