import logging
import re
import pytz
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------
BOT_TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"
ADMIN_ID = 123456789  # —Ç–≤–æ–π Telegram ID (—á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º)
TIMEZONE = pytz.timezone("Europe/Kaliningrad")

ALLOWED_USERS = set()
ACCESS_KEYS = {"VIP001": None, "VIP123": None}  # –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞
PENDING_CHATS = set()
MAINTENANCE = False
TASKS = {}

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# -------------------- –ö–û–ú–ê–ù–î–´ --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 16:00 –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ\n"
        "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 9:15 –≤—Å—Ç—Ä–µ—á–∞ —Å –ê–Ω–¥—Ä–µ–µ–º\n"
        "‚Ä¢ –≤ 22:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
        "‚Ä¢ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã\n"
        "‚Ä¢ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:30 –∑–∞—Ä—è–¥–∫–∞\n"
        "‚Ä¢ 30 –∞–≤–≥—É—Å—Ç–∞ –≤ 09:00 –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫—Ä–µ–¥–∏—Ç\n"
        "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 14:00 (—Å–∏–≥–Ω–∞–ª) –≤—Å—Ç—Ä–µ—á–∞ –≤ 15:00\n"
        f"(—á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TIMEZONE})"
    )

# -------------------- –¢–ï–•–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï --------------------
async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    uid = update.effective_user.id
    if uid != ADMIN_ID:
        return
    MAINTENANCE = True
    await update.message.reply_text("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")

async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE
    uid = update.effective_user.id
    if uid != ADMIN_ID:
        return
    MAINTENANCE = False
    await update.message.reply_text("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")

# -------------------- –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô --------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MAINTENANCE

    msg = (update.message.text or "").strip()
    uid = update.effective_user.id
    chat_id = update.effective_chat.id

    # 1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if uid not in ALLOWED_USERS:
        if re.fullmatch(r"VIP\d{3}", msg):
            if msg in ACCESS_KEYS and ACCESS_KEYS[msg] is None:
                ALLOWED_USERS.add(uid)
                ACCESS_KEYS[msg] = uid
                await update.message.reply_text("–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç ‚úÖ. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            else:
                await update.message.reply_text("‚ùå –ö–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        else:
            await update.message.reply_text("–ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ VIP001.")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(chat_id)
        await update.message.reply_text("‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 3. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if "—á–µ—Ä–µ–∑" in msg and "–º–∏–Ω—É—Ç" in msg:
        try:
            n = int(msg.split("—á–µ—Ä–µ–∑")[1].split("–º–∏–Ω—É—Ç")[0].strip())
            run_at = datetime.now(TIMEZONE) + timedelta(minutes=n)
            task_id = f"{uid}_{int(run_at.timestamp())}"
            TASKS[task_id] = (chat_id, msg, run_at)
            await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ {run_at.strftime('%H:%M')}")
        except:
            await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ")

# -------------------- –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß --------------------
async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    task_id = context.args[0]
    if task_id in TASKS:
        del TASKS[task_id]
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# -------------------- –°–ë–û–†–ö–ê --------------------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("maintenance_on", maintenance_on))
    app.add_handler(CommandHandler("maintenance_off", maintenance_off))
    app.add_handler(CommandHandler("delete", delete_task))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
