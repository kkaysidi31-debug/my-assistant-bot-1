import os
import asyncio
from datetime import datetime, timedelta
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# ======================
# –ö–æ–Ω—Ñ–∏–≥
# ======================
BOT_TOKEN = os.getenv("BOT_TOKEN", "PASTE_YOUR_TOKEN_HERE")
ADMIN_ID = 963586834  # —Ç–≤–æ–π Telegram ID
TZ = pytz.timezone("Europe/Kaliningrad")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# ======================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ
# ======================
TASKS = {}  # {task_id: {"uid":..., "text":..., "time":...}}
MAINTENANCE = False
PENDING_CHATS = set()


# ======================
# –§—É–Ω–∫—Ü–∏–∏
# ======================
async def set_task(uid, text, delay_sec):
    run_at = datetime.now(TZ) + timedelta(seconds=delay_sec)

    async def job():
        try:
            await bot.send_message(uid, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", e)

    task_id = f"{uid}_{int(run_at.timestamp())}"
    TASKS[task_id] = {"uid": uid, "text": text, "time": run_at}

    asyncio.create_task(delayed_job(delay_sec, job))
    return task_id, run_at


async def delayed_job(delay, coro):
    await asyncio.sleep(delay)
    await coro()


def remove_task(task_id):
    return TASKS.pop(task_id, None)


# ======================
# –ö–æ–º–∞–Ω–¥—ã
# ======================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ\n\n"
        "–ü—Ä–∏–º–µ—Ä: '—á–µ—Ä–µ–∑ 60 –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã'\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /delete <ID> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "‚Ä¢ /maintenance_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ /maintenance_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã"
    )


@dp.message(Command("delete"))
async def cmd_delete(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("–£–∫–∞–∂–∏ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    task_id = parts[1]
    removed = remove_task(task_id)
    if removed:
        await message.reply("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ")
    else:
        await message.reply("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")


@dp.message(Command("maintenance_on"))
async def cmd_maintenance_on(message: Message):
    global MAINTENANCE
    if message.from_user.id != ADMIN_ID:
        return
    MAINTENANCE = True
    await message.reply("üü° –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã.")


@dp.message(Command("maintenance_off"))
async def cmd_maintenance_off(message: Message):
    global MAINTENANCE
    if message.from_user.id != ADMIN_ID:
        return
    MAINTENANCE = False
    await message.reply("üü¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã.")
    while PENDING_CHATS:
        cid = PENDING_CHATS.pop()
        try:
            await bot.send_message(cid, "‚úÖ –ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        except:
            pass


# ======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
# ======================
@dp.message()
async def handle_message(message: Message):
    global MAINTENANCE
    uid = message.from_user.id
    text = message.text.strip()

    if MAINTENANCE and uid != ADMIN_ID:
        PENDING_CHATS.add(uid)
        await message.reply("‚ö†Ô∏è –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    if text.startswith("—á–µ—Ä–µ–∑"):
        try:
            parts = text.split()
            delay = int(parts[1])  # —Å–µ–∫—É–Ω–¥—ã
            task_text = " ".join(parts[2:])
            task_id, run_at = await set_task(uid, task_text, delay)
            await message.reply(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (ID: {task_id}), –Ω–∞–ø–æ–º–Ω—é –≤ {run_at.strftime('%H:%M:%S')}"
            )
        except Exception:
            await message.reply("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 60 –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã")
    else:
        await message.reply("–ü—Ä–∏–º–µ—Ä: '—á–µ—Ä–µ–∑ 300 —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω'")


# ======================
# –ó–∞–ø—É—Å–∫
# ======================
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
